!function t(e,n,i){function r(a,s){if(!n[a]){if(!e[a]){var o="function"==typeof require&&require;if(!s&&o)return o(a,!0);if(u)return u(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};e[a][0].call(c.exports,(function(t){return r(e[a][1][t]||t)}),c,c.exports,t,e,n,i)}return n[a].exports}for(var u="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(t,e,n){(function(t){(function(){!function(t,i){"object"==typeof n&&void 0!==e?i(n):"function"==typeof define&&define.amd?define(["exports"],i):i((t=t||self).IMask={})}(this,(function(e){"use strict";var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{};function i(t,e){return t(e={exports:{}},e.exports),e.exports}var r=function(t){return t&&t.Math==Math&&t},u=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n&&n)||Function("return this")(),a=function(t){try{return!!t()}catch(t){return!0}},s=!a((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),o={}.propertyIsEnumerable,l=Object.getOwnPropertyDescriptor,c={f:l&&!o.call({1:2},1)?function(t){var e=l(this,t);return!!e&&e.enumerable}:o},h=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},f={}.toString,d="".split,p=a((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==function(t){return f.call(t).slice(8,-1)}(t)?d.call(t,""):Object(t)}:Object,v=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t},g=function(t){return p(v(t))},k=function(t){return"object"==typeof t?null!==t:"function"==typeof t},m=function(t,e){if(!k(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!k(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!k(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!k(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")},y={}.hasOwnProperty,_=function(t,e){return y.call(t,e)},b=u.document,A=k(b)&&k(b.createElement),E=!s&&!a((function(){return 7!=Object.defineProperty((t="div",A?b.createElement(t):{}),"a",{get:function(){return 7}}).a;var t})),C=Object.getOwnPropertyDescriptor,S={f:s?C:function(t,e){if(t=g(t),e=m(e,!0),E)try{return C(t,e)}catch(t){}if(_(t,e))return h(!c.f.call(t,e),t[e])}},w=function(t){if(!k(t))throw TypeError(String(t)+" is not an object");return t},F=Object.defineProperty,D={f:s?F:function(t,e,n){if(w(t),e=m(e,!0),w(n),E)try{return F(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},B=s?function(t,e,n){return D.f(t,e,h(1,n))}:function(t,e,n){return t[e]=n,t},M=function(t,e){try{B(u,t,e)}catch(n){u[t]=e}return e},x=u["__core-js_shared__"]||M("__core-js_shared__",{}),P=Function.toString;"function"!=typeof x.inspectSource&&(x.inspectSource=function(t){return P.call(t)});var O,T,z,I,j=x.inspectSource,V=u.WeakMap,R="function"==typeof V&&/native code/.test(j(V)),L=i((function(t){(t.exports=function(t,e){return x[t]||(x[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:"global",copyright:"Â© 2020 Denis Pushkarev (zloirock.ru)"})})),N=0,q=Math.random(),U=L("keys"),W={},H=u.WeakMap;if(R){var Y=new H,$=Y.get,G=Y.has,Z=Y.set;O=function(t,e){return Z.call(Y,t,e),e},T=function(t){return $.call(Y,t)||{}},z=function(t){return G.call(Y,t)}}else{var K=U[I="state"]||(U[I]=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++N+q).toString(36)}(I));W[K]=!0,O=function(t,e){return B(t,K,e),e},T=function(t){return _(t,K)?t[K]:{}},z=function(t){return _(t,K)}}var Q={set:O,get:T,has:z,enforce:function(t){return z(t)?T(t):O(t,{})},getterFor:function(t){return function(e){var n;if(!k(e)||(n=T(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}},X=i((function(t){var e=Q.get,n=Q.enforce,i=String(String).split("String");(t.exports=function(t,e,r,a){var s=!!a&&!!a.unsafe,o=!!a&&!!a.enumerable,l=!!a&&!!a.noTargetGet;"function"==typeof r&&("string"!=typeof e||_(r,"name")||B(r,"name",e),n(r).source=i.join("string"==typeof e?e:"")),t!==u?(s?!l&&t[e]&&(o=!0):delete t[e],o?t[e]=r:B(t,e,r)):o?t[e]=r:M(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&e(this).source||j(this)}))})),J=u,tt=function(t){return"function"==typeof t?t:void 0},et=function(t,e){return arguments.length<2?tt(J[t])||tt(u[t]):J[t]&&J[t][e]||u[t]&&u[t][e]},nt=Math.ceil,it=Math.floor,rt=function(t){return isNaN(t=+t)?0:(t>0?it:nt)(t)},ut=Math.min,at=function(t){return t>0?ut(rt(t),9007199254740991):0},st=Math.max,ot=Math.min,lt=function(t){return function(e,n,i){var r,u=g(e),a=at(u.length),s=function(t,e){var n=rt(t);return n<0?st(n+e,0):ot(n,e)}(i,a);if(t&&n!=n){for(;a>s;)if((r=u[s++])!=r)return!0}else for(;a>s;s++)if((t||s in u)&&u[s]===n)return t||s||0;return!t&&-1}},ct={includes:lt(!0),indexOf:lt(!1)}.indexOf,ht=function(t,e){var n,i=g(t),r=0,u=[];for(n in i)!_(W,n)&&_(i,n)&&u.push(n);for(;e.length>r;)_(i,n=e[r++])&&(~ct(u,n)||u.push(n));return u},ft=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],dt=ft.concat("length","prototype"),pt={f:Object.getOwnPropertyNames||function(t){return ht(t,dt)}},vt={f:Object.getOwnPropertySymbols},gt=et("Reflect","ownKeys")||function(t){var e=pt.f(w(t)),n=vt.f;return n?e.concat(n(t)):e},kt=function(t,e){for(var n=gt(e),i=D.f,r=S.f,u=0;u<n.length;u++){var a=n[u];_(t,a)||i(t,a,r(e,a))}},mt=/#|\.prototype\./,yt=function(t,e){var n=bt[_t(t)];return n==Et||n!=At&&("function"==typeof e?a(e):!!e)},_t=yt.normalize=function(t){return String(t).replace(mt,".").toLowerCase()},bt=yt.data={},At=yt.NATIVE="N",Et=yt.POLYFILL="P",Ct=yt,St=S.f,wt=function(t,e){var n,i,r,a,s,o=t.target,l=t.global,c=t.stat;if(n=l?u:c?u[o]||M(o,{}):(u[o]||{}).prototype)for(i in e){if(a=e[i],r=t.noTargetGet?(s=St(n,i))&&s.value:n[i],!Ct(l?i:o+(c?".":"#")+i,t.forced)&&void 0!==r){if(typeof a==typeof r)continue;kt(a,r)}(t.sham||r&&r.sham)&&B(a,"sham",!0),X(n,i,a,t)}},Ft=Object.keys||function(t){return ht(t,ft)},Dt=function(t){return Object(v(t))},Bt=Object.assign,Mt=Object.defineProperty,xt=!Bt||a((function(){if(s&&1!==Bt({b:1},Bt(Mt({},"a",{enumerable:!0,get:function(){Mt(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol();return t[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=Bt({},t)[n]||"abcdefghijklmnopqrst"!=Ft(Bt({},e)).join("")}))?function(t,e){for(var n=Dt(t),i=arguments.length,r=1,u=vt.f,a=c.f;i>r;)for(var o,l=p(arguments[r++]),h=u?Ft(l).concat(u(l)):Ft(l),f=h.length,d=0;f>d;)o=h[d++],s&&!a.call(l,o)||(n[o]=l[o]);return n}:Bt;wt({target:"Object",stat:!0,forced:Object.assign!==xt},{assign:xt});var Pt="".repeat||function(t){var e=String(v(this)),n="",i=rt(t);if(i<0||i==1/0)throw RangeError("Wrong number of repetitions");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n},Ot=Math.ceil,Tt=function(t){return function(e,n,i){var r,u,a=String(v(e)),s=a.length,o=void 0===i?" ":String(i),l=at(n);return l<=s||""==o?a:(r=l-s,(u=Pt.call(o,Ot(r/o.length))).length>r&&(u=u.slice(0,r)),t?a+u:u+a)}},zt={start:Tt(!1),end:Tt(!0)},It=et("navigator","userAgent")||"",jt=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(It),Vt=zt.end;wt({target:"String",proto:!0,forced:jt},{padEnd:function(t){return Vt(this,t,arguments.length>1?arguments[1]:void 0)}});var Rt=zt.start;function Lt(t){return(Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Nt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function qt(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function Ut(t,e,n){return e&&qt(t.prototype,e),n&&qt(t,n),t}function Wt(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Yt(t,e)}function Ht(t){return(Ht=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Yt(t,e){return(Yt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function $t(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},u=Object.keys(t);for(i=0;i<u.length;i++)n=u[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);for(i=0;i<u.length;i++)n=u[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function Gt(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Zt(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ht(t)););return t}function Kt(t,e,n){return(Kt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=Zt(t,e);if(i){var r=Object.getOwnPropertyDescriptor(i,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function Qt(t,e,n,i){return(Qt="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,i){var r,u=Zt(t,e);if(u){if((r=Object.getOwnPropertyDescriptor(u,e)).set)return r.set.call(i,n),!0;if(!r.writable)return!1}if(r=Object.getOwnPropertyDescriptor(i,e)){if(!r.writable)return!1;r.value=n,Object.defineProperty(i,e,r)}else!function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(i,e,n);return!0})(t,e,n,i)}function Xt(t,e,n,i,r){if(!Qt(t,e,n,i||t)&&r)throw new Error("failed to set property");return n}function Jt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t))&&"[object Arguments]"!==Object.prototype.toString.call(t))return;var n=[],i=!0,r=!1,u=void 0;try{for(var a,s=t[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);i=!0);}catch(t){r=!0,u=t}finally{try{i||null==s.return||s.return()}finally{if(r)throw u}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function te(t){return"string"==typeof t||t instanceof String}wt({target:"String",proto:!0,forced:jt},{padStart:function(t){return Rt(this,t,arguments.length>1?arguments[1]:void 0)}}),wt({target:"String",proto:!0},{repeat:Pt}),wt({global:!0},{globalThis:u});var ee="NONE",ne="LEFT",ie="FORCE_LEFT",re="RIGHT",ue="FORCE_RIGHT";function ae(t){switch(t){case ne:return ie;case re:return ue;default:return t}}function se(t){return t.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1")}var oe=function(){function t(e,n,i,r){for(Nt(this,t),this.value=e,this.cursorPos=n,this.oldValue=i,this.oldSelection=r;this.value.slice(0,this.startChangePos)!==this.oldValue.slice(0,this.startChangePos);)--this.oldSelection.start}return Ut(t,[{key:"startChangePos",get:function(){return Math.min(this.cursorPos,this.oldSelection.start)}},{key:"insertedCount",get:function(){return this.cursorPos-this.startChangePos}},{key:"inserted",get:function(){return this.value.substr(this.startChangePos,this.insertedCount)}},{key:"removedCount",get:function(){return Math.max(this.oldSelection.end-this.startChangePos||this.oldValue.length-this.value.length,0)}},{key:"removed",get:function(){return this.oldValue.substr(this.startChangePos,this.removedCount)}},{key:"head",get:function(){return this.value.substring(0,this.startChangePos)}},{key:"tail",get:function(){return this.value.substring(this.startChangePos+this.insertedCount)}},{key:"removeDirection",get:function(){return!this.removedCount||this.insertedCount?ee:this.oldSelection.end===this.cursorPos||this.oldSelection.start===this.cursorPos?re:ne}}]),t}(),le=function(){function t(e){Nt(this,t),Object.assign(this,{inserted:"",rawInserted:"",skip:!1,tailShift:0},e)}return Ut(t,[{key:"aggregate",value:function(t){return this.rawInserted+=t.rawInserted,this.skip=this.skip||t.skip,this.inserted+=t.inserted,this.tailShift+=t.tailShift,this}},{key:"offset",get:function(){return this.tailShift+this.inserted.length}}]),t}(),ce=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0;Nt(this,t),this.value=e,this.from=n,this.stop=i}return Ut(t,[{key:"toString",value:function(){return this.value}},{key:"extend",value:function(t){this.value+=String(t)}},{key:"appendTo",value:function(t){return t.append(this.toString(),{tail:!0}).aggregate(t._appendPlaceholder())}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.value.length)return"";var e=this.value[0];return this.value=this.value.slice(1),e}},{key:"state",get:function(){return{value:this.value,from:this.from,stop:this.stop}},set:function(t){Object.assign(this,t)}}]),t}();function he(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new he.InputMask(t,e)}var fe=function(){function t(e){Nt(this,t),this._value="",this._update(Object.assign({},t.DEFAULTS,{},e)),this.isInitialized=!0}return Ut(t,[{key:"updateOptions",value:function(t){Object.keys(t).length&&this.withValueRefresh(this._update.bind(this,t))}},{key:"_update",value:function(t){Object.assign(this,t)}},{key:"reset",value:function(){this._value=""}},{key:"resolve",value:function(t){return this.reset(),this.append(t,{input:!0},""),this.doCommit(),this.value}},{key:"nearestInputPos",value:function(t,e){return t}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return this.value.slice(t,e)}},{key:"extractTail",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return new ce(this.extractInput(t,e),t)}},{key:"appendTail",value:function(t){return te(t)&&(t=new ce(String(t))),t.appendTo(this)}},{key:"_appendCharRaw",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t=this.doPrepare(t,e))?(this._value+=t,new le({inserted:t,rawInserted:t})):new le}},{key:"_appendChar",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,i=this.state,r=this._appendCharRaw(t,e);if(r.inserted){var u,a=!1!==this.doValidate(e);if(a&&null!=n){var s=this.state;this.overwrite&&(u=n.state,n.shiftBefore(this.value.length));var o=this.appendTail(n);(a=o.rawInserted===n.toString())&&o.inserted&&(this.state=s)}a||(r=new le,this.state=i,n&&u&&(n.state=u))}return r}},{key:"_appendPlaceholder",value:function(){return new le}},{key:"append",value:function(t,e,n){if(!te(t))throw new Error("value should be string");var i=new le,r=te(n)?new ce(String(n)):n;e.tail&&(e._beforeTailState=this.state);for(var u=0;u<t.length;++u)i.aggregate(this._appendChar(t[u],e,r));return null!=r&&(i.tailShift+=this.appendTail(r).tailShift),i}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return this._value=this.value.slice(0,t)+this.value.slice(e),new le}},{key:"withValueRefresh",value:function(t){if(this._refreshing||!this.isInitialized)return t();this._refreshing=!0;var e=this.rawInputValue,n=this.value,i=t();return this.rawInputValue=e,this.value!==n&&0===n.indexOf(this.value)&&this.append(n.slice(this.value.length),{},""),delete this._refreshing,i}},{key:"runIsolated",value:function(t){if(this._isolated||!this.isInitialized)return t(this);this._isolated=!0;var e=this.state,n=t(this);return this.state=e,delete this._isolated,n}},{key:"doPrepare",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.prepare?this.prepare(t,this,e):t}},{key:"doValidate",value:function(t){return(!this.validate||this.validate(this.value,this,t))&&(!this.parent||this.parent.doValidate(t))}},{key:"doCommit",value:function(){this.commit&&this.commit(this.value,this)}},{key:"doFormat",value:function(t){return this.format?this.format(t,this):t}},{key:"doParse",value:function(t){return this.parse?this.parse(t,this):t}},{key:"splice",value:function(t,e,n,i){var r=t+e,u=this.extractTail(r),a=this.nearestInputPos(t,i);return new le({tailShift:a-t}).aggregate(this.remove(a)).aggregate(this.append(n,{input:!0},u))}},{key:"state",get:function(){return{_value:this.value}},set:function(t){this._value=t._value}},{key:"value",get:function(){return this._value},set:function(t){this.resolve(t)}},{key:"unmaskedValue",get:function(){return this.value},set:function(t){this.reset(),this.append(t,{},""),this.doCommit()}},{key:"typedValue",get:function(){return this.doParse(this.value)},set:function(t){this.value=this.doFormat(t)}},{key:"rawInputValue",get:function(){return this.extractInput(0,this.value.length,{raw:!0})},set:function(t){this.reset(),this.append(t,{raw:!0},""),this.doCommit()}},{key:"isComplete",get:function(){return!0}}]),t}();function de(t){if(null==t)throw new Error("mask property should be defined");return t instanceof RegExp?he.MaskedRegExp:te(t)?he.MaskedPattern:t instanceof Date||t===Date?he.MaskedDate:t instanceof Number||"number"==typeof t||t===Number?he.MaskedNumber:Array.isArray(t)||t===Array?he.MaskedDynamic:he.Masked&&t.prototype instanceof he.Masked?t:t instanceof Function?he.MaskedFunction:t instanceof he.Masked?t.constructor:(console.warn("Mask not found for mask",t),he.Masked)}function pe(t){if(he.Masked&&t instanceof he.Masked)return t;var e=(t=Object.assign({},t)).mask;if(he.Masked&&e instanceof he.Masked)return e;var n=de(e);if(!n)throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.");return new n(t)}fe.DEFAULTS={format:function(t){return t},parse:function(t){return t}},he.Masked=fe,he.createMask=pe;var ve={0:/\d/,a:/[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,"*":/./},ge=function(){function t(e){Nt(this,t);var n=e.mask,i=$t(e,["mask"]);this.masked=pe({mask:n}),Object.assign(this,i)}return Ut(t,[{key:"reset",value:function(){this._isFilled=!1,this.masked.reset()}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return 0===t&&e>=1?(this._isFilled=!1,this.masked.remove(t,e)):new le}},{key:"_appendChar",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this._isFilled)return new le;var n=this.masked.state,i=this.masked._appendChar(t,e);return i.inserted&&!1===this.doValidate(e)&&(i.inserted=i.rawInserted="",this.masked.state=n),i.inserted||this.isOptional||this.lazy||e.input||(i.inserted=this.placeholderChar),i.skip=!i.inserted&&!this.isOptional,this._isFilled=Boolean(i.inserted),i}},{key:"append",value:function(){var t;return(t=this.masked).append.apply(t,arguments)}},{key:"_appendPlaceholder",value:function(){var t=new le;return this._isFilled||this.isOptional||(this._isFilled=!0,t.inserted=this.placeholderChar),t}},{key:"extractTail",value:function(){var t;return(t=this.masked).extractTail.apply(t,arguments)}},{key:"appendTail",value:function(){var t;return(t=this.masked).appendTail.apply(t,arguments)}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=arguments.length>2?arguments[2]:void 0;return this.masked.extractInput(t,e,n)}},{key:"nearestInputPos",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ee,n=0,i=this.value.length,r=Math.min(Math.max(t,n),i);switch(e){case ne:case ie:return this.isComplete?r:n;case re:case ue:return this.isComplete?r:i;case ee:default:return r}}},{key:"doValidate",value:function(){var t,e;return(t=this.masked).doValidate.apply(t,arguments)&&(!this.parent||(e=this.parent).doValidate.apply(e,arguments))}},{key:"doCommit",value:function(){this.masked.doCommit()}},{key:"value",get:function(){return this.masked.value||(this._isFilled&&!this.isOptional?this.placeholderChar:"")}},{key:"unmaskedValue",get:function(){return this.masked.unmaskedValue}},{key:"isComplete",get:function(){return Boolean(this.masked.value)||this.isOptional}},{key:"state",get:function(){return{masked:this.masked.state,_isFilled:this._isFilled}},set:function(t){this.masked.state=t.masked,this._isFilled=t._isFilled}}]),t}(),ke=function(){function t(e){Nt(this,t),Object.assign(this,e),this._value=""}return Ut(t,[{key:"reset",value:function(){this._isRawInput=!1,this._value=""}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._value.length;return this._value=this._value.slice(0,t)+this._value.slice(e),this._value||(this._isRawInput=!1),new le}},{key:"nearestInputPos",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ee,n=0,i=this._value.length;switch(e){case ne:case ie:return n;case ee:case re:case ue:default:return i}}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._value.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.raw&&this._isRawInput&&this._value.slice(t,e)||""}},{key:"_appendChar",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new le;if(this._value)return n;var i=this.char===t[0],r=i&&(this.isUnmasking||e.input||e.raw)&&!e.tail;return r&&(n.rawInserted=this.char),this._value=n.inserted=this.char,this._isRawInput=r&&(e.raw||e.input),n}},{key:"_appendPlaceholder",value:function(){var t=new le;return this._value||(this._value=t.inserted=this.char),t}},{key:"extractTail",value:function(){arguments.length>1&&void 0!==arguments[1]||this.value.length;return new ce("")}},{key:"appendTail",value:function(t){return te(t)&&(t=new ce(String(t))),t.appendTo(this)}},{key:"append",value:function(t,e,n){var i=this._appendChar(t,e);return null!=n&&(i.tailShift+=this.appendTail(n).tailShift),i}},{key:"doCommit",value:function(){}},{key:"value",get:function(){return this._value}},{key:"unmaskedValue",get:function(){return this.isUnmasking?this.value:""}},{key:"isComplete",get:function(){return!0}},{key:"state",get:function(){return{_value:this._value,_isRawInput:this._isRawInput}},set:function(t){Object.assign(this,t)}}]),t}(),me=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;Nt(this,t),this.chunks=e,this.from=n}return Ut(t,[{key:"toString",value:function(){return this.chunks.map(String).join("")}},{key:"extend",value:function(e){if(String(e)){te(e)&&(e=new ce(String(e)));var n=this.chunks[this.chunks.length-1],i=n&&(n.stop===e.stop||null==e.stop)&&e.from===n.from+n.toString().length;if(e instanceof ce)i?n.extend(e.toString()):this.chunks.push(e);else if(e instanceof t){if(null==e.stop)for(var r;e.chunks.length&&null==e.chunks[0].stop;)(r=e.chunks.shift()).from+=e.from,this.extend(r);e.toString()&&(e.stop=e.blockIndex,this.chunks.push(e))}}}},{key:"appendTo",value:function(e){if(!(e instanceof he.MaskedPattern))return new ce(this.toString()).appendTo(e);for(var n=new le,i=0;i<this.chunks.length&&!n.skip;++i){var r=this.chunks[i],u=e._mapPosToBlock(e.value.length),a=r.stop,s=void 0;if(null!=a&&(!u||u.index<=a)&&((r instanceof t||e._stops.indexOf(a)>=0)&&n.aggregate(e._appendPlaceholder(a)),s=r instanceof t&&e._blocks[a]),s){var o=s.appendTail(r);o.skip=!1,n.aggregate(o),e._value+=o.inserted;var l=r.toString().slice(o.rawInserted.length);l&&n.aggregate(e.append(l,{tail:!0}))}else n.aggregate(e.append(r.toString(),{tail:!0}))}return n}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.chunks.length)return"";for(var e=t-this.from,n=0;n<this.chunks.length;){var i=this.chunks[n],r=i.shiftBefore(e);if(i.toString()){if(!r)break;++n}else this.chunks.splice(n,1);if(r)return r}return""}},{key:"state",get:function(){return{chunks:this.chunks.map((function(t){return t.state})),from:this.from,stop:this.stop,blockIndex:this.blockIndex}},set:function(e){var n=e.chunks,i=$t(e,["chunks"]);Object.assign(this,i),this.chunks=n.map((function(e){var n="chunks"in e?new t:new ce;return n.state=e,n}))}}]),t}(),ye=function(t){function e(){return Nt(this,e),Gt(this,Ht(e).apply(this,arguments))}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){t.mask&&(t.validate=function(e){return e.search(t.mask)>=0}),Kt(Ht(e.prototype),"_update",this).call(this,t)}}]),e}(fe);he.MaskedRegExp=ye;var _e=function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Nt(this,e),t.definitions=Object.assign({},ve,t.definitions),Gt(this,Ht(e).call(this,Object.assign({},e.DEFAULTS,{},t)))}return Wt(e,t),Ut(e,[{key:"_update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.definitions=Object.assign({},this.definitions,t.definitions),Kt(Ht(e.prototype),"_update",this).call(this,t),this._rebuildMask()}},{key:"_rebuildMask",value:function(){var t=this,n=this.definitions;this._blocks=[],this._stops=[],this._maskedBlocks={};var i=this.mask;if(i&&n)for(var r=!1,u=!1,a=0;a<i.length;++a){if(this.blocks)if("continue"===function(){var e=i.slice(a),n=Object.keys(t.blocks).filter((function(t){return 0===e.indexOf(t)}));n.sort((function(t,e){return e.length-t.length}));var r=n[0];if(r){var u=pe(Object.assign({parent:t,lazy:t.lazy,placeholderChar:t.placeholderChar,overwrite:t.overwrite},t.blocks[r]));return u&&(t._blocks.push(u),t._maskedBlocks[r]||(t._maskedBlocks[r]=[]),t._maskedBlocks[r].push(t._blocks.length-1)),a+=r.length-1,"continue"}}())continue;var s=i[a],o=s in n;if(s!==e.STOP_CHAR)if("{"!==s&&"}"!==s)if("["!==s&&"]"!==s){if(s===e.ESCAPE_CHAR){if(++a,!(s=i[a]))break;o=!1}var l=o?new ge({parent:this,lazy:this.lazy,placeholderChar:this.placeholderChar,mask:n[s],isOptional:u}):new ke({char:s,isUnmasking:r});this._blocks.push(l)}else u=!u;else r=!r;else this._stops.push(this._blocks.length)}}},{key:"reset",value:function(){Kt(Ht(e.prototype),"reset",this).call(this),this._blocks.forEach((function(t){return t.reset()}))}},{key:"doCommit",value:function(){this._blocks.forEach((function(t){return t.doCommit()})),Kt(Ht(e.prototype),"doCommit",this).call(this)}},{key:"appendTail",value:function(t){return Kt(Ht(e.prototype),"appendTail",this).call(this,t).aggregate(this._appendPlaceholder())}},{key:"_appendCharRaw",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t=this.doPrepare(t,e);var n=this._mapPosToBlock(this.value.length),i=new le;if(!n)return i;for(var r=n.index;;++r){var u=this._blocks[r];if(!u)break;var a=u._appendChar(t,e),s=a.skip;if(i.aggregate(a),s||a.rawInserted)break}return i}},{key:"extractTail",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=new me;return e===n||this._forEachBlocksInRange(e,n,(function(e,n,r,u){var a=e.extractTail(r,u);a.stop=t._findStopBefore(n),a.from=t._blockStartPos(n),a instanceof me&&(a.blockIndex=n),i.extend(a)})),i}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(t===e)return"";var i="";return this._forEachBlocksInRange(t,e,(function(t,e,r,u){i+=t.extractInput(r,u,n)})),i}},{key:"_findStopBefore",value:function(t){for(var e,n=0;n<this._stops.length;++n){var i=this._stops[n];if(!(i<=t))break;e=i}return e}},{key:"_appendPlaceholder",value:function(t){var e=this,n=new le;if(this.lazy&&null==t)return n;var i=this._mapPosToBlock(this.value.length);if(!i)return n;var r=i.index,u=null!=t?t:this._blocks.length;return this._blocks.slice(r,u).forEach((function(i){if(!i.lazy||null!=t){var r=null!=i._blocks?[i._blocks.length]:[],u=i._appendPlaceholder.apply(i,r);e._value+=u.inserted,n.aggregate(u)}})),n}},{key:"_mapPosToBlock",value:function(t){for(var e="",n=0;n<this._blocks.length;++n){var i=this._blocks[n],r=e.length;if(t<=(e+=i.value).length)return{index:n,offset:t-r}}}},{key:"_blockStartPos",value:function(t){return this._blocks.slice(0,t).reduce((function(t,e){return t+e.value.length}),0)}},{key:"_forEachBlocksInRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=arguments.length>2?arguments[2]:void 0,i=this._mapPosToBlock(t);if(i){var r=this._mapPosToBlock(e),u=r&&i.index===r.index,a=i.offset,s=r&&u?r.offset:this._blocks[i.index].value.length;if(n(this._blocks[i.index],i.index,a,s),r&&!u){for(var o=i.index+1;o<r.index;++o)n(this._blocks[o],o,0,this._blocks[o].value.length);n(this._blocks[r.index],r.index,0,r.offset)}}}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=Kt(Ht(e.prototype),"remove",this).call(this,t,n);return this._forEachBlocksInRange(t,n,(function(t,e,n,r){i.aggregate(t.remove(n,r))})),i}},{key:"nearestInputPos",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ee,n=this._mapPosToBlock(t)||{index:0,offset:0},i=n.offset,r=n.index,u=this._blocks[r];if(!u)return t;var a=i;0!==a&&a<u.value.length&&(a=u.nearestInputPos(i,ae(e)));var s=a===u.value.length,o=0===a;if(!o&&!s)return this._blockStartPos(r)+a;var l=s?r+1:r;if(e===ee){if(l>0){var c=l-1,h=this._blocks[c],f=h.nearestInputPos(0,ee);if(!h.value.length||f!==h.value.length)return this._blockStartPos(l)}for(var d=l,p=d;p<this._blocks.length;++p){var v=this._blocks[p],g=v.nearestInputPos(0,ee);if(!v.value.length||g!==v.value.length)return this._blockStartPos(p)+g}for(var k=l-1;k>=0;--k){var m=this._blocks[k],y=m.nearestInputPos(0,ee);if(!m.value.length||y!==m.value.length)return this._blockStartPos(k)+m.value.length}return t}if(e===ne||e===ie){for(var _,b=l;b<this._blocks.length;++b)if(this._blocks[b].value){_=b;break}if(null!=_){var A=this._blocks[_],E=A.nearestInputPos(0,re);if(0===E&&A.unmaskedValue.length)return this._blockStartPos(_)+E}for(var C,S=-1,w=l-1;w>=0;--w){var F=this._blocks[w],D=F.nearestInputPos(F.value.length,ie);if(F.value&&0===D||(C=w),0!==D){if(D!==F.value.length)return this._blockStartPos(w)+D;S=w;break}}if(e===ne)for(var B=S+1;B<=Math.min(l,this._blocks.length-1);++B){var M=this._blocks[B],x=M.nearestInputPos(0,ee),P=this._blockStartPos(B)+x;if(P>t)break;if(x!==M.value.length)return P}if(S>=0)return this._blockStartPos(S)+this._blocks[S].value.length;if(e===ie||this.lazy&&!this.extractInput()&&!be(this._blocks[l]))return 0;if(null!=C)return this._blockStartPos(C);for(var O=l;O<this._blocks.length;++O){var T=this._blocks[O],z=T.nearestInputPos(0,ee);if(!T.value.length||z!==T.value.length)return this._blockStartPos(O)+z}return 0}if(e===re||e===ue){for(var I,j,V=l;V<this._blocks.length;++V){var R=this._blocks[V],L=R.nearestInputPos(0,ee);if(L!==R.value.length){j=this._blockStartPos(V)+L,I=V;break}}if(null!=I&&null!=j){for(var N=I;N<this._blocks.length;++N){var q=this._blocks[N],U=q.nearestInputPos(0,ue);if(U!==q.value.length)return this._blockStartPos(N)+U}return e===ue?this.value.length:j}for(var W=Math.min(l,this._blocks.length-1);W>=0;--W){var H=this._blocks[W],Y=H.nearestInputPos(H.value.length,ne);if(0!==Y){var $=this._blockStartPos(W)+Y;if($>=t)return $;break}}}return t}},{key:"maskedBlock",value:function(t){return this.maskedBlocks(t)[0]}},{key:"maskedBlocks",value:function(t){var e=this,n=this._maskedBlocks[t];return n?n.map((function(t){return e._blocks[t]})):[]}},{key:"state",get:function(){return Object.assign({},Kt(Ht(e.prototype),"state",this),{_blocks:this._blocks.map((function(t){return t.state}))})},set:function(t){var n=t._blocks,i=$t(t,["_blocks"]);this._blocks.forEach((function(t,e){return t.state=n[e]})),Xt(Ht(e.prototype),"state",i,this,!0)}},{key:"isComplete",get:function(){return this._blocks.every((function(t){return t.isComplete}))}},{key:"unmaskedValue",get:function(){return this._blocks.reduce((function(t,e){return t+e.unmaskedValue}),"")},set:function(t){Xt(Ht(e.prototype),"unmaskedValue",t,this,!0)}},{key:"value",get:function(){return this._blocks.reduce((function(t,e){return t+e.value}),"")},set:function(t){Xt(Ht(e.prototype),"value",t,this,!0)}}]),e}(fe);function be(t){if(!t)return!1;var e=t.value;return!e||t.nearestInputPos(0,ee)!==e.length}_e.DEFAULTS={lazy:!0,placeholderChar:"_"},_e.STOP_CHAR="`",_e.ESCAPE_CHAR="\\",_e.InputDefinition=ge,_e.FixedDefinition=ke,he.MaskedPattern=_e;var Ae=function(t){function e(){return Nt(this,e),Gt(this,Ht(e).apply(this,arguments))}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){t=Object.assign({to:this.to||0,from:this.from||0},t);var n=String(t.to).length;null!=t.maxLength&&(n=Math.max(n,t.maxLength)),t.maxLength=n;for(var i=String(t.from).padStart(n,"0"),r=String(t.to).padStart(n,"0"),u=0;u<r.length&&r[u]===i[u];)++u;t.mask=r.slice(0,u).replace(/0/g,"\\0")+"0".repeat(n-u),Kt(Ht(e.prototype),"_update",this).call(this,t)}},{key:"boundaries",value:function(t){var e="",n="",i=Jt(t.match(/^(\D*)(\d*)(\D*)/)||[],3),r=i[1],u=i[2];return u&&(e="0".repeat(r.length)+u,n="9".repeat(r.length)+u),[e=e.padEnd(this.maxLength,"0"),n=n.padEnd(this.maxLength,"9")]}},{key:"doPrepare",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t=Kt(Ht(e.prototype),"doPrepare",this).call(this,t,n).replace(/\D/g,""),!this.autofix)return t;for(var i=String(this.from).padStart(this.maxLength,"0"),r=String(this.to).padStart(this.maxLength,"0"),u=this.value,a="",s=0;s<t.length;++s){var o=u+a+t[s],l=this.boundaries(o),c=Jt(l,2),h=c[0],f=c[1];Number(f)<this.from?a+=i[o.length-1]:Number(h)>this.to?a+=r[o.length-1]:a+=t[s]}return a}},{key:"doValidate",value:function(){var t,n=this.value,i=n.search(/[^0]/);if(-1===i&&n.length<=this._matchFrom)return!0;for(var r=this.boundaries(n),u=Jt(r,2),a=u[0],s=u[1],o=arguments.length,l=new Array(o),c=0;c<o;c++)l[c]=arguments[c];return this.from<=Number(s)&&Number(a)<=this.to&&(t=Kt(Ht(e.prototype),"doValidate",this)).call.apply(t,[this].concat(l))}},{key:"_matchFrom",get:function(){return this.maxLength-String(this.from).length}},{key:"isComplete",get:function(){return Kt(Ht(e.prototype),"isComplete",this)&&Boolean(this.value)}}]),e}(_e);he.MaskedRange=Ae;var Ee=function(t){function e(t){return Nt(this,e),Gt(this,Ht(e).call(this,Object.assign({},e.DEFAULTS,{},t)))}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){t.mask===Date&&delete t.mask,t.pattern&&(t.mask=t.pattern);var n=t.blocks;t.blocks=Object.assign({},e.GET_DEFAULT_BLOCKS()),t.min&&(t.blocks.Y.from=t.min.getFullYear()),t.max&&(t.blocks.Y.to=t.max.getFullYear()),t.min&&t.max&&t.blocks.Y.from===t.blocks.Y.to&&(t.blocks.m.from=t.min.getMonth()+1,t.blocks.m.to=t.max.getMonth()+1,t.blocks.m.from===t.blocks.m.to&&(t.blocks.d.from=t.min.getDate(),t.blocks.d.to=t.max.getDate())),Object.assign(t.blocks,n),Object.keys(t.blocks).forEach((function(e){var n=t.blocks[e];"autofix"in n||(n.autofix=t.autofix)})),Kt(Ht(e.prototype),"_update",this).call(this,t)}},{key:"doValidate",value:function(){for(var t,n=this.date,i=arguments.length,r=new Array(i),u=0;u<i;u++)r[u]=arguments[u];return(t=Kt(Ht(e.prototype),"doValidate",this)).call.apply(t,[this].concat(r))&&(!this.isComplete||this.isDateExist(this.value)&&null!=n&&(null==this.min||this.min<=n)&&(null==this.max||n<=this.max))}},{key:"isDateExist",value:function(t){return this.format(this.parse(t,this),this).indexOf(t)>=0}},{key:"date",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"typedValue",get:function(){return this.isComplete?Kt(Ht(e.prototype),"typedValue",this):null},set:function(t){Xt(Ht(e.prototype),"typedValue",t,this,!0)}}]),e}(_e);Ee.DEFAULTS={pattern:"d{.}`m{.}`Y",format:function(t){return[String(t.getDate()).padStart(2,"0"),String(t.getMonth()+1).padStart(2,"0"),t.getFullYear()].join(".")},parse:function(t){var e=Jt(t.split("."),3),n=e[0],i=e[1],r=e[2];return new Date(r,i-1,n)}},Ee.GET_DEFAULT_BLOCKS=function(){return{d:{mask:Ae,from:1,to:31,maxLength:2},m:{mask:Ae,from:1,to:12,maxLength:2},Y:{mask:Ae,from:1900,to:9999}}},he.MaskedDate=Ee;var Ce=function(){function t(){Nt(this,t)}return Ut(t,[{key:"select",value:function(t,e){if(null!=t&&null!=e&&(t!==this.selectionStart||e!==this.selectionEnd))try{this._unsafeSelect(t,e)}catch(t){}}},{key:"_unsafeSelect",value:function(t,e){}},{key:"bindEvents",value:function(t){}},{key:"unbindEvents",value:function(){}},{key:"selectionStart",get:function(){var t;try{t=this._unsafeSelectionStart}catch(t){}return null!=t?t:this.value.length}},{key:"selectionEnd",get:function(){var t;try{t=this._unsafeSelectionEnd}catch(t){}return null!=t?t:this.value.length}},{key:"isActive",get:function(){return!1}}]),t}();he.MaskElement=Ce;var Se=function(t){function e(t){var n;return Nt(this,e),(n=Gt(this,Ht(e).call(this))).input=t,n._handlers={},n}return Wt(e,t),Ut(e,[{key:"_unsafeSelect",value:function(t,e){this.input.setSelectionRange(t,e)}},{key:"bindEvents",value:function(t){var n=this;Object.keys(t).forEach((function(i){return n._toggleEventHandler(e.EVENTS_MAP[i],t[i])}))}},{key:"unbindEvents",value:function(){var t=this;Object.keys(this._handlers).forEach((function(e){return t._toggleEventHandler(e)}))}},{key:"_toggleEventHandler",value:function(t,e){this._handlers[t]&&(this.input.removeEventListener(t,this._handlers[t]),delete this._handlers[t]),e&&(this.input.addEventListener(t,e),this._handlers[t]=e)}},{key:"rootElement",get:function(){return this.input.getRootNode?this.input.getRootNode():document}},{key:"isActive",get:function(){return this.input===this.rootElement.activeElement}},{key:"_unsafeSelectionStart",get:function(){return this.input.selectionStart}},{key:"_unsafeSelectionEnd",get:function(){return this.input.selectionEnd}},{key:"value",get:function(){return this.input.value},set:function(t){this.input.value=t}}]),e}(Ce);Se.EVENTS_MAP={selectionChange:"keydown",input:"input",drop:"drop",click:"click",focus:"focus",commit:"blur"},he.HTMLMaskElement=Se;var we=function(t){function e(){return Nt(this,e),Gt(this,Ht(e).apply(this,arguments))}return Wt(e,t),Ut(e,[{key:"_unsafeSelect",value:function(t,e){if(this.rootElement.createRange){var n=this.rootElement.createRange();n.setStart(this.input.firstChild||this.input,t),n.setEnd(this.input.lastChild||this.input,e);var i=this.rootElement,r=i.getSelection&&i.getSelection();r&&(r.removeAllRanges(),r.addRange(n))}}},{key:"_unsafeSelectionStart",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&e.anchorOffset}},{key:"_unsafeSelectionEnd",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&this._unsafeSelectionStart+String(e).length}},{key:"value",get:function(){return this.input.textContent},set:function(t){this.input.textContent=t}}]),e}(Se);he.HTMLContenteditableMaskElement=we;var Fe=function(){function t(e,n){Nt(this,t),this.el=e instanceof Ce?e:e.isContentEditable&&"INPUT"!==e.tagName&&"TEXTAREA"!==e.tagName?new we(e):new Se(e),this.masked=pe(n),this._listeners={},this._value="",this._unmaskedValue="",this._saveSelection=this._saveSelection.bind(this),this._onInput=this._onInput.bind(this),this._onChange=this._onChange.bind(this),this._onDrop=this._onDrop.bind(this),this._onFocus=this._onFocus.bind(this),this._onClick=this._onClick.bind(this),this.alignCursor=this.alignCursor.bind(this),this.alignCursorFriendly=this.alignCursorFriendly.bind(this),this._bindEvents(),this.updateValue(),this._onChange()}return Ut(t,[{key:"maskEquals",value:function(t){return null==t||t===this.masked.mask||t===Date&&this.masked instanceof Ee}},{key:"_bindEvents",value:function(){this.el.bindEvents({selectionChange:this._saveSelection,input:this._onInput,drop:this._onDrop,click:this._onClick,focus:this._onFocus,commit:this._onChange})}},{key:"_unbindEvents",value:function(){this.el&&this.el.unbindEvents()}},{key:"_fireEvent",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var r=this._listeners[t];r&&r.forEach((function(t){return t.apply(void 0,n)}))}},{key:"_saveSelection",value:function(){this.value!==this.el.value&&console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."),this._selection={start:this.selectionStart,end:this.cursorPos}}},{key:"updateValue",value:function(){this.masked.value=this.el.value,this._value=this.masked.value}},{key:"updateControl",value:function(){var t=this.masked.unmaskedValue,e=this.masked.value,n=this.unmaskedValue!==t||this.value!==e;this._unmaskedValue=t,this._value=e,this.el.value!==e&&(this.el.value=e),n&&this._fireChangeEvents()}},{key:"updateOptions",value:function(t){var e=t.mask,n=$t(t,["mask"]),i=!this.maskEquals(e),r=!function t(e,n){if(n===e)return!0;var i,r=Array.isArray(n),u=Array.isArray(e);if(r&&u){if(n.length!=e.length)return!1;for(i=0;i<n.length;i++)if(!t(n[i],e[i]))return!1;return!0}if(r!=u)return!1;if(n&&e&&"object"===Lt(n)&&"object"===Lt(e)){var a=n instanceof Date,s=e instanceof Date;if(a&&s)return n.getTime()==e.getTime();if(a!=s)return!1;var o=n instanceof RegExp,l=e instanceof RegExp;if(o&&l)return n.toString()==e.toString();if(o!=l)return!1;var c=Object.keys(n);for(i=0;i<c.length;i++)if(!Object.prototype.hasOwnProperty.call(e,c[i]))return!1;for(i=0;i<c.length;i++)if(!t(e[c[i]],n[c[i]]))return!1;return!0}return!(!n||!e||"function"!=typeof n||"function"!=typeof e)&&n.toString()===e.toString()}(this.masked,n);i&&(this.mask=e),r&&this.masked.updateOptions(n),(i||r)&&this.updateControl()}},{key:"updateCursor",value:function(t){null!=t&&(this.cursorPos=t,this._delayUpdateCursor(t))}},{key:"_delayUpdateCursor",value:function(t){var e=this;this._abortUpdateCursor(),this._changingCursorPos=t,this._cursorChanging=setTimeout((function(){e.el&&(e.cursorPos=e._changingCursorPos,e._abortUpdateCursor())}),10)}},{key:"_fireChangeEvents",value:function(){this._fireEvent("accept",this._inputEvent),this.masked.isComplete&&this._fireEvent("complete",this._inputEvent)}},{key:"_abortUpdateCursor",value:function(){this._cursorChanging&&(clearTimeout(this._cursorChanging),delete this._cursorChanging)}},{key:"alignCursor",value:function(){this.cursorPos=this.masked.nearestInputPos(this.cursorPos,ne)}},{key:"alignCursorFriendly",value:function(){this.selectionStart===this.cursorPos&&this.alignCursor()}},{key:"on",value:function(t,e){return this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e),this}},{key:"off",value:function(t,e){if(!this._listeners[t])return this;if(!e)return delete this._listeners[t],this;var n=this._listeners[t].indexOf(e);return n>=0&&this._listeners[t].splice(n,1),this}},{key:"_onInput",value:function(t){if(this._inputEvent=t,this._abortUpdateCursor(),!this._selection)return this.updateValue();var e=new oe(this.el.value,this.cursorPos,this.value,this._selection),n=this.masked.rawInputValue,i=this.masked.splice(e.startChangePos,e.removed.length,e.inserted,e.removeDirection).offset,r=n===this.masked.rawInputValue?e.removeDirection:ee,u=this.masked.nearestInputPos(e.startChangePos+i,r);this.updateControl(),this.updateCursor(u),delete this._inputEvent}},{key:"_onChange",value:function(){this.value!==this.el.value&&this.updateValue(),this.masked.doCommit(),this.updateControl(),this._saveSelection()}},{key:"_onDrop",value:function(t){t.preventDefault(),t.stopPropagation()}},{key:"_onFocus",value:function(t){this.alignCursorFriendly()}},{key:"_onClick",value:function(t){this.alignCursorFriendly()}},{key:"destroy",value:function(){this._unbindEvents(),this._listeners.length=0,delete this.el}},{key:"mask",get:function(){return this.masked.mask},set:function(t){if(!this.maskEquals(t))if(t instanceof he.Masked||this.masked.constructor!==de(t)){var e=pe({mask:t});e.unmaskedValue=this.masked.unmaskedValue,this.masked=e}else this.masked.updateOptions({mask:t})}},{key:"value",get:function(){return this._value},set:function(t){this.masked.value=t,this.updateControl(),this.alignCursor()}},{key:"unmaskedValue",get:function(){return this._unmaskedValue},set:function(t){this.masked.unmaskedValue=t,this.updateControl(),this.alignCursor()}},{key:"typedValue",get:function(){return this.masked.typedValue},set:function(t){this.masked.typedValue=t,this.updateControl(),this.alignCursor()}},{key:"selectionStart",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionStart}},{key:"cursorPos",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionEnd},set:function(t){this.el&&this.el.isActive&&(this.el.select(t,t),this._saveSelection())}}]),t}();he.InputMask=Fe;var De=function(t){function e(){return Nt(this,e),Gt(this,Ht(e).apply(this,arguments))}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){t.enum&&(t.mask="*".repeat(t.enum[0].length)),Kt(Ht(e.prototype),"_update",this).call(this,t)}},{key:"doValidate",value:function(){for(var t,n=this,i=arguments.length,r=new Array(i),u=0;u<i;u++)r[u]=arguments[u];return this.enum.some((function(t){return t.indexOf(n.unmaskedValue)>=0}))&&(t=Kt(Ht(e.prototype),"doValidate",this)).call.apply(t,[this].concat(r))}}]),e}(_e);he.MaskedEnum=De;var Be=function(t){function e(t){return Nt(this,e),Gt(this,Ht(e).call(this,Object.assign({},e.DEFAULTS,{},t)))}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){Kt(Ht(e.prototype),"_update",this).call(this,t),this._updateRegExps()}},{key:"_updateRegExps",value:function(){var t="^"+(this.allowNegative?"[+|\\-]?":""),e=(this.scale?"("+se(this.radix)+"\\d{0,"+this.scale+"})?":"")+"$";this._numberRegExpInput=new RegExp(t+"(0|([1-9]+\\d*))?"+e),this._numberRegExp=new RegExp(t+"\\d*"+e),this._mapToRadixRegExp=new RegExp("["+this.mapToRadix.map(se).join("")+"]","g"),this._thousandsSeparatorRegExp=new RegExp(se(this.thousandsSeparator),"g")}},{key:"_removeThousandsSeparators",value:function(t){return t.replace(this._thousandsSeparatorRegExp,"")}},{key:"_insertThousandsSeparators",value:function(t){var e=t.split(this.radix);return e[0]=e[0].replace(/\B(?=(\d{3})+(?!\d))/g,this.thousandsSeparator),e.join(this.radix)}},{key:"doPrepare",value:function(t){for(var n,i=arguments.length,r=new Array(i>1?i-1:0),u=1;u<i;u++)r[u-1]=arguments[u];return(n=Kt(Ht(e.prototype),"doPrepare",this)).call.apply(n,[this,this._removeThousandsSeparators(t.replace(this._mapToRadixRegExp,this.radix))].concat(r))}},{key:"_separatorsCount",value:function(t){for(var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0,i=0;i<t;++i)this._value.indexOf(this.thousandsSeparator,i)===i&&(++n,e&&(t+=this.thousandsSeparator.length));return n}},{key:"_separatorsCountFromSlice",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._value;return this._separatorsCount(this._removeThousandsSeparators(t).length,!0)}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=arguments.length>2?arguments[2]:void 0,r=this._adjustRangeWithSeparators(t,n),u=Jt(r,2);return t=u[0],n=u[1],this._removeThousandsSeparators(Kt(Ht(e.prototype),"extractInput",this).call(this,t,n,i))}},{key:"_appendCharRaw",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.thousandsSeparator)return Kt(Ht(e.prototype),"_appendCharRaw",this).call(this,t,n);var i=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,r=this._separatorsCountFromSlice(i);this._value=this._removeThousandsSeparators(this.value);var u=Kt(Ht(e.prototype),"_appendCharRaw",this).call(this,t,n);this._value=this._insertThousandsSeparators(this._value);var a=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,s=this._separatorsCountFromSlice(a);return u.tailShift+=(s-r)*this.thousandsSeparator.length,u.skip=!u.rawInserted&&t===this.thousandsSeparator,u}},{key:"_findSeparatorAround",value:function(t){if(this.thousandsSeparator){var e=t-this.thousandsSeparator.length+1,n=this.value.indexOf(this.thousandsSeparator,e);if(n<=t)return n}return-1}},{key:"_adjustRangeWithSeparators",value:function(t,e){var n=this._findSeparatorAround(t);n>=0&&(t=n);var i=this._findSeparatorAround(e);return i>=0&&(e=i+this.thousandsSeparator.length),[t,e]}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=this._adjustRangeWithSeparators(t,e),i=Jt(n,2);t=i[0],e=i[1];var r=this.value.slice(0,t),u=this.value.slice(e),a=this._separatorsCount(r.length);this._value=this._insertThousandsSeparators(this._removeThousandsSeparators(r+u));var s=this._separatorsCountFromSlice(r);return new le({tailShift:(s-a)*this.thousandsSeparator.length})}},{key:"nearestInputPos",value:function(t,e){if(!this.thousandsSeparator)return t;switch(e){case ee:case ne:case ie:var n=this._findSeparatorAround(t-1);if(n>=0){var i=n+this.thousandsSeparator.length;if(t<i||this.value.length<=i||e===ie)return n}break;case re:case ue:var r=this._findSeparatorAround(t);if(r>=0)return r+this.thousandsSeparator.length}return t}},{key:"doValidate",value:function(t){var n=(t.input?this._numberRegExpInput:this._numberRegExp).test(this._removeThousandsSeparators(this.value));if(n){var i=this.number;n=n&&!isNaN(i)&&(null==this.min||this.min>=0||this.min<=this.number)&&(null==this.max||this.max<=0||this.number<=this.max)}return n&&Kt(Ht(e.prototype),"doValidate",this).call(this,t)}},{key:"doCommit",value:function(){if(this.value){var t=this.number,n=t;null!=this.min&&(n=Math.max(n,this.min)),null!=this.max&&(n=Math.min(n,this.max)),n!==t&&(this.unmaskedValue=String(n));var i=this.value;this.normalizeZeros&&(i=this._normalizeZeros(i)),this.padFractionalZeros&&(i=this._padFractionalZeros(i)),this._value=i}Kt(Ht(e.prototype),"doCommit",this).call(this)}},{key:"_normalizeZeros",value:function(t){var e=this._removeThousandsSeparators(t).split(this.radix);return e[0]=e[0].replace(/^(\D*)(0*)(\d*)/,(function(t,e,n,i){return e+i})),t.length&&!/\d$/.test(e[0])&&(e[0]=e[0]+"0"),e.length>1&&(e[1]=e[1].replace(/0*$/,""),e[1].length||(e.length=1)),this._insertThousandsSeparators(e.join(this.radix))}},{key:"_padFractionalZeros",value:function(t){if(!t)return t;var e=t.split(this.radix);return e.length<2&&e.push(""),e[1]=e[1].padEnd(this.scale,"0"),e.join(this.radix)}},{key:"unmaskedValue",get:function(){return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix,".")},set:function(t){Xt(Ht(e.prototype),"unmaskedValue",t.replace(".",this.radix),this,!0)}},{key:"typedValue",get:function(){return Number(this.unmaskedValue)},set:function(t){Xt(Ht(e.prototype),"unmaskedValue",String(t),this,!0)}},{key:"number",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"allowNegative",get:function(){return this.signed||null!=this.min&&this.min<0||null!=this.max&&this.max<0}}]),e}(fe);Be.DEFAULTS={radix:",",thousandsSeparator:"",mapToRadix:["."],scale:2,signed:!1,normalizeZeros:!0,padFractionalZeros:!1},he.MaskedNumber=Be;var Me=function(t){function e(){return Nt(this,e),Gt(this,Ht(e).apply(this,arguments))}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){t.mask&&(t.validate=t.mask),Kt(Ht(e.prototype),"_update",this).call(this,t)}}]),e}(fe);he.MaskedFunction=Me;var xe=function(t){function e(t){var n;return Nt(this,e),(n=Gt(this,Ht(e).call(this,Object.assign({},e.DEFAULTS,{},t)))).currentMask=null,n}return Wt(e,t),Ut(e,[{key:"_update",value:function(t){Kt(Ht(e.prototype),"_update",this).call(this,t),"mask"in t&&(this.compiledMasks=Array.isArray(t.mask)?t.mask.map((function(t){return pe(t)})):[])}},{key:"_appendCharRaw",value:function(){var t,e=this._applyDispatch.apply(this,arguments);this.currentMask&&e.aggregate((t=this.currentMask)._appendChar.apply(t,arguments));return e}},{key:"_applyDispatch",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.tail&&null!=e._beforeTailState?e._beforeTailState._value:this.value,i=this.rawInputValue,r=e.tail&&null!=e._beforeTailState?e._beforeTailState._rawInputValue:i,u=i.slice(r.length),a=this.currentMask,s=new le,o=a&&a.state;if(this.currentMask=this.doDispatch(t,Object.assign({},e)),this.currentMask)if(this.currentMask!==a){this.currentMask.reset();var l=this.currentMask.append(r,{raw:!0});s.tailShift=l.inserted.length-n.length,u&&(s.tailShift+=this.currentMask.append(u,{raw:!0,tail:!0}).tailShift)}else this.currentMask.state=o;return s}},{key:"_appendPlaceholder",value:function(){var t=this._applyDispatch.apply(this,arguments);return this.currentMask&&t.aggregate(this.currentMask._appendPlaceholder()),t}},{key:"doDispatch",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.dispatch(t,this,e)}},{key:"doValidate",value:function(){for(var t,n,i=arguments.length,r=new Array(i),u=0;u<i;u++)r[u]=arguments[u];return(t=Kt(Ht(e.prototype),"doValidate",this)).call.apply(t,[this].concat(r))&&(!this.currentMask||(n=this.currentMask).doValidate.apply(n,r))}},{key:"reset",value:function(){this.currentMask&&this.currentMask.reset(),this.compiledMasks.forEach((function(t){return t.reset()}))}},{key:"remove",value:function(){var t,e=new le;this.currentMask&&e.aggregate((t=this.currentMask).remove.apply(t,arguments)).aggregate(this._applyDispatch());return e}},{key:"extractInput",value:function(){var t;return this.currentMask?(t=this.currentMask).extractInput.apply(t,arguments):""}},{key:"extractTail",value:function(){for(var t,n,i=arguments.length,r=new Array(i),u=0;u<i;u++)r[u]=arguments[u];return this.currentMask?(t=this.currentMask).extractTail.apply(t,r):(n=Kt(Ht(e.prototype),"extractTail",this)).call.apply(n,[this].concat(r))}},{key:"doCommit",value:function(){this.currentMask&&this.currentMask.doCommit(),Kt(Ht(e.prototype),"doCommit",this).call(this)}},{key:"nearestInputPos",value:function(){for(var t,n,i=arguments.length,r=new Array(i),u=0;u<i;u++)r[u]=arguments[u];return this.currentMask?(t=this.currentMask).nearestInputPos.apply(t,r):(n=Kt(Ht(e.prototype),"nearestInputPos",this)).call.apply(n,[this].concat(r))}},{key:"value",get:function(){return this.currentMask?this.currentMask.value:""},set:function(t){Xt(Ht(e.prototype),"value",t,this,!0)}},{key:"unmaskedValue",get:function(){return this.currentMask?this.currentMask.unmaskedValue:""},set:function(t){Xt(Ht(e.prototype),"unmaskedValue",t,this,!0)}},{key:"typedValue",get:function(){return this.currentMask?this.currentMask.typedValue:""},set:function(t){var e=String(t);this.currentMask&&(this.currentMask.typedValue=t,e=this.currentMask.unmaskedValue),this.unmaskedValue=e}},{key:"isComplete",get:function(){return!!this.currentMask&&this.currentMask.isComplete}},{key:"state",get:function(){return Object.assign({},Kt(Ht(e.prototype),"state",this),{_rawInputValue:this.rawInputValue,compiledMasks:this.compiledMasks.map((function(t){return t.state})),currentMaskRef:this.currentMask,currentMask:this.currentMask&&this.currentMask.state})},set:function(t){var n=t.compiledMasks,i=t.currentMaskRef,r=t.currentMask,u=$t(t,["compiledMasks","currentMaskRef","currentMask"]);this.compiledMasks.forEach((function(t,e){return t.state=n[e]})),null!=i&&(this.currentMask=i,this.currentMask.state=r),Xt(Ht(e.prototype),"state",u,this,!0)}},{key:"overwrite",get:function(){return this.currentMask?this.currentMask.overwrite:Kt(Ht(e.prototype),"overwrite",this)},set:function(t){console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings')}}]),e}(fe);xe.DEFAULTS={dispatch:function(t,e,n){if(e.compiledMasks.length){var i=e.rawInputValue,r=e.compiledMasks.map((function(e,r){return e.reset(),e.append(i,{raw:!0}),e.append(t,n),{weight:e.rawInputValue.length,index:r}}));return r.sort((function(t,e){return e.weight-t.weight})),e.compiledMasks[r[0].index]}}},he.MaskedDynamic=xe;var Pe={MASKED:"value",UNMASKED:"unmaskedValue",TYPED:"typedValue"};function Oe(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Pe.MASKED,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Pe.MASKED,i=pe(t);return function(t){return i.runIsolated((function(i){return i[e]=t,i[n]}))}}function Te(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];return Oe.apply(void 0,n)(t)}he.PIPE_TYPE=Pe,he.createPipe=Oe,he.pipe=Te;try{globalThis.IMask=he}catch(t){}e.HTMLContenteditableMaskElement=we,e.HTMLMaskElement=Se,e.InputMask=Fe,e.MaskElement=Ce,e.Masked=fe,e.MaskedDate=Ee,e.MaskedDynamic=xe,e.MaskedEnum=De,e.MaskedFunction=Me,e.MaskedNumber=Be,e.MaskedPattern=_e,e.MaskedRange=Ae,e.MaskedRegExp=ye,e.PIPE_TYPE=Pe,e.createMask=pe,e.createPipe=Oe,e.default=he,e.pipe=Te,Object.defineProperty(e,"__esModule",{value:!0})}))}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,n){!function(t,n){var i=function(t,e,n){"use strict";var i,r;if(function(){var e,n={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(e in r=t.lazySizesConfig||t.lazysizesConfig||{},n)e in r||(r[e]=n[e])}(),!e||!e.getElementsByClassName)return{init:function(){},cfg:r,noSupport:!0};var u=e.documentElement,a=t.HTMLPictureElement,s=t.addEventListener.bind(t),o=t.setTimeout,l=t.requestAnimationFrame||o,c=t.requestIdleCallback,h=/^picture$/i,f=["load","error","lazyincluded","_lazyloaded"],d={},p=Array.prototype.forEach,v=function(t,e){return d[e]||(d[e]=new RegExp("(\\s|^)"+e+"(\\s|$)")),d[e].test(t.getAttribute("class")||"")&&d[e]},g=function(t,e){v(t,e)||t.setAttribute("class",(t.getAttribute("class")||"").trim()+" "+e)},k=function(t,e){var n;(n=v(t,e))&&t.setAttribute("class",(t.getAttribute("class")||"").replace(n," "))},m=function(t,e,n){var i=n?"addEventListener":"removeEventListener";n&&m(t,e),f.forEach((function(n){t[i](n,e)}))},y=function(t,n,r,u,a){var s=e.createEvent("Event");return r||(r={}),r.instance=i,s.initEvent(n,!u,!a),s.detail=r,t.dispatchEvent(s),s},_=function(e,n){var i;!a&&(i=t.picturefill||r.pf)?(n&&n.src&&!e.getAttribute("srcset")&&e.setAttribute("srcset",n.src),i({reevaluate:!0,elements:[e]})):n&&n.src&&(e.src=n.src)},b=function(t,e){return(getComputedStyle(t,null)||{})[e]},A=function(t,e,n){for(n=n||t.offsetWidth;n<r.minSize&&e&&!t._lazysizesWidth;)n=e.offsetWidth,e=e.parentNode;return n},E=(dt=[],pt=[],vt=dt,gt=function(){var t=vt;for(vt=dt.length?pt:dt,ht=!0,ft=!1;t.length;)t.shift()();ht=!1},kt=function(t,n){ht&&!n?t.apply(this,arguments):(vt.push(t),ft||(ft=!0,(e.hidden?o:l)(gt)))},kt._lsFlush=gt,kt),C=function(t,e){return e?function(){E(t)}:function(){var e=this,n=arguments;E((function(){t.apply(e,n)}))}},S=function(t){var e,i,r=function(){e=null,t()},u=function(){var t=n.now()-i;t<99?o(u,99-t):(c||r)(r)};return function(){i=n.now(),e||(e=o(u,99))}},w=(H=/^img$/i,Y=/^iframe$/i,$="onscroll"in t&&!/(gle|ing)bot/.test(navigator.userAgent),G=0,Z=0,K=-1,Q=function(t){Z--,(!t||Z<0||!t.target)&&(Z=0)},X=function(t){return null==W&&(W="hidden"==b(e.body,"visibility")),W||!("hidden"==b(t.parentNode,"visibility")&&"hidden"==b(t,"visibility"))},J=function(t,n){var i,r=t,a=X(t);for(L-=n,U+=n,N-=n,q+=n;a&&(r=r.offsetParent)&&r!=e.body&&r!=u;)(a=(b(r,"opacity")||1)>0)&&"visible"!=b(r,"overflow")&&(i=r.getBoundingClientRect(),a=q>i.left&&N<i.right&&U>i.top-1&&L<i.bottom+1);return a},tt=function(){var t,n,a,s,o,l,c,h,f,d,p,v,g=i.elements;if((I=r.loadMode)&&Z<8&&(t=g.length)){for(n=0,K++;n<t;n++)if(g[n]&&!g[n]._lazyRace)if(!$||i.prematureUnveil&&i.prematureUnveil(g[n]))st(g[n]);else if((h=g[n].getAttribute("data-expand"))&&(l=1*h)||(l=G),d||(d=!r.expand||r.expand<1?u.clientHeight>500&&u.clientWidth>500?500:370:r.expand,i._defEx=d,p=d*r.expFactor,v=r.hFac,W=null,G<p&&Z<1&&K>2&&I>2&&!e.hidden?(G=p,K=0):G=I>1&&K>1&&Z<6?d:0),f!==l&&(V=innerWidth+l*v,R=innerHeight+l,c=-1*l,f=l),a=g[n].getBoundingClientRect(),(U=a.bottom)>=c&&(L=a.top)<=R&&(q=a.right)>=c*v&&(N=a.left)<=V&&(U||q||N||L)&&(r.loadHidden||X(g[n]))&&(T&&Z<3&&!h&&(I<3||K<4)||J(g[n],l))){if(st(g[n]),o=!0,Z>9)break}else!o&&T&&!s&&Z<4&&K<4&&I>2&&(O[0]||r.preloadAfterLoad)&&(O[0]||!h&&(U||q||N||L||"auto"!=g[n].getAttribute(r.sizesAttr)))&&(s=O[0]||g[n]);s&&!o&&st(s)}},et=function(t){var e,i=0,u=r.throttleDelay,a=r.ricTimeout,s=function(){e=!1,i=n.now(),t()},l=c&&a>49?function(){c(s,{timeout:a}),a!==r.ricTimeout&&(a=r.ricTimeout)}:C((function(){o(s)}),!0);return function(t){var r;(t=!0===t)&&(a=33),e||(e=!0,(r=u-(n.now()-i))<0&&(r=0),t||r<9?l():o(l,r))}}(tt),nt=function(t){var e=t.target;e._lazyCache?delete e._lazyCache:(Q(t),g(e,r.loadedClass),k(e,r.loadingClass),m(e,rt),y(e,"lazyloaded"))},it=C(nt),rt=function(t){it({target:t.target})},ut=function(t){var e,n=t.getAttribute(r.srcsetAttr);(e=r.customMedia[t.getAttribute("data-media")||t.getAttribute("media")])&&t.setAttribute("media",e),n&&t.setAttribute("srcset",n)},at=C((function(t,e,n,i,u){var a,s,l,c,f,d;(f=y(t,"lazybeforeunveil",e)).defaultPrevented||(i&&(n?g(t,r.autosizesClass):t.setAttribute("sizes",i)),s=t.getAttribute(r.srcsetAttr),a=t.getAttribute(r.srcAttr),u&&(c=(l=t.parentNode)&&h.test(l.nodeName||"")),d=e.firesLoad||"src"in t&&(s||a||c),f={target:t},g(t,r.loadingClass),d&&(clearTimeout(z),z=o(Q,2500),m(t,rt,!0)),c&&p.call(l.getElementsByTagName("source"),ut),s?t.setAttribute("srcset",s):a&&!c&&(Y.test(t.nodeName)?function(t,e){try{t.contentWindow.location.replace(e)}catch(n){t.src=e}}(t,a):t.src=a),u&&(s||c)&&_(t,{src:a})),t._lazyRace&&delete t._lazyRace,k(t,r.lazyClass),E((function(){var e=t.complete&&t.naturalWidth>1;d&&!e||(e&&g(t,"ls-is-cached"),nt(f),t._lazyCache=!0,o((function(){"_lazyCache"in t&&delete t._lazyCache}),9)),"lazy"==t.loading&&Z--}),!0)})),st=function(t){if(!t._lazyRace){var e,n=H.test(t.nodeName),i=n&&(t.getAttribute(r.sizesAttr)||t.getAttribute("sizes")),u="auto"==i;(!u&&T||!n||!t.getAttribute("src")&&!t.srcset||t.complete||v(t,r.errorClass)||!v(t,r.lazyClass))&&(e=y(t,"lazyunveilread").detail,u&&F.updateElem(t,!0,t.offsetWidth),t._lazyRace=!0,Z++,at(t,e,u,i,n))}},ot=S((function(){r.loadMode=3,et()})),lt=function(){3==r.loadMode&&(r.loadMode=2),ot()},ct=function(){T||(n.now()-j<999?o(ct,999):(T=!0,r.loadMode=3,et(),s("scroll",lt,!0)))},{_:function(){j=n.now(),i.elements=e.getElementsByClassName(r.lazyClass),O=e.getElementsByClassName(r.lazyClass+" "+r.preloadClass),s("scroll",et,!0),s("resize",et,!0),s("pageshow",(function(t){if(t.persisted){var n=e.querySelectorAll("."+r.loadingClass);n.length&&n.forEach&&l((function(){n.forEach((function(t){t.complete&&st(t)}))}))}})),t.MutationObserver?new MutationObserver(et).observe(u,{childList:!0,subtree:!0,attributes:!0}):(u.addEventListener("DOMNodeInserted",et,!0),u.addEventListener("DOMAttrModified",et,!0),setInterval(et,999)),s("hashchange",et,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach((function(t){e.addEventListener(t,et,!0)})),/d$|^c/.test(e.readyState)?ct():(s("load",ct),e.addEventListener("DOMContentLoaded",et),o(ct,2e4)),i.elements.length?(tt(),E._lsFlush()):et()},checkElems:et,unveil:st,_aLSL:lt}),F=(M=C((function(t,e,n,i){var r,u,a;if(t._lazysizesWidth=i,i+="px",t.setAttribute("sizes",i),h.test(e.nodeName||""))for(u=0,a=(r=e.getElementsByTagName("source")).length;u<a;u++)r[u].setAttribute("sizes",i);n.detail.dataAttr||_(t,n.detail)})),x=function(t,e,n){var i,r=t.parentNode;r&&(n=A(t,r,n),(i=y(t,"lazybeforesizes",{width:n,dataAttr:!!e})).defaultPrevented||(n=i.detail.width)&&n!==t._lazysizesWidth&&M(t,r,i,n))},P=S((function(){var t,e=B.length;if(e)for(t=0;t<e;t++)x(B[t])})),{_:function(){B=e.getElementsByClassName(r.autosizesClass),s("resize",P)},checkElems:P,updateElem:x}),D=function(){!D.i&&e.getElementsByClassName&&(D.i=!0,F._(),w._())};var B,M,x,P;var O,T,z,I,j,V,R,L,N,q,U,W,H,Y,$,G,Z,K,Q,X,J,tt,et,nt,it,rt,ut,at,st,ot,lt,ct;var ht,ft,dt,pt,vt,gt,kt;return o((function(){r.init&&D()})),i={cfg:r,autoSizer:F,loader:w,init:D,uP:_,aC:g,rC:k,hC:v,fire:y,gW:A,rAF:E}}(t,t.document,Date);t.lazySizes=i,"object"==typeof e&&e.exports&&(e.exports=i)}("undefined"!=typeof window?window:{})},{}],3:[function(t,e,n){!function(n,i){if(n){var r=function(){i(n.lazySizes),n.removeEventListener("lazyunveilread",r,!0)};i=i.bind(null,n,n.document),"object"==typeof e&&e.exports?i(t("lazysizes")):"function"==typeof define&&define.amd?define(["lazysizes"],i):n.lazySizes?r():n.addEventListener("lazyunveilread",r,!0)}}("undefined"!=typeof window?window:0,(function(t,e,n){"use strict";if(t.addEventListener){var i=/\s+(\d+)(w|h)\s+(\d+)(w|h)/,r=/parent-fit["']*\s*:\s*["']*(contain|cover|width)/,u=/parent-container["']*\s*:\s*["']*(.+?)(?=(\s|$|,|'|"|;))/,a=/^picture$/i,s=n.cfg,o={getParent:function(e,n){var i=e,r=e.parentNode;return n&&"prev"!=n||!r||!a.test(r.nodeName||"")||(r=r.parentNode),"self"!=n&&(i="prev"==n?e.previousElementSibling:n&&(r.closest||t.jQuery)&&(r.closest?r.closest(n):jQuery(r).closest(n)[0])||r),i},getFit:function(t){var e,n,i=getComputedStyle(t,null)||{},a=i.content||i.fontFamily,s={fit:t._lazysizesParentFit||t.getAttribute("data-parent-fit")};return!s.fit&&a&&(e=a.match(r))&&(s.fit=e[1]),s.fit?(!(n=t._lazysizesParentContainer||t.getAttribute("data-parent-container"))&&a&&(e=a.match(u))&&(n=e[1]),s.parent=o.getParent(t,n)):s.fit=i.objectFit,s},getImageRatio:function(e){var n,r,u,o,l,c,h,f=e.parentNode,d=f&&a.test(f.nodeName||"")?f.querySelectorAll("source, img"):[e];for(n=0;n<d.length;n++)if(r=(e=d[n]).getAttribute(s.srcsetAttr)||e.getAttribute("srcset")||e.getAttribute("data-pfsrcset")||e.getAttribute("data-risrcset")||"",u=e._lsMedia||e.getAttribute("media"),u=s.customMedia[e.getAttribute("data-media")||u]||u,r&&(!u||(t.matchMedia&&matchMedia(u)||{}).matches)){(o=parseFloat(e.getAttribute("data-aspectratio")))||((l=r.match(i))?"w"==l[2]?(c=l[1],h=l[3]):(c=l[3],h=l[1]):(c=e.getAttribute("width"),h=e.getAttribute("height")),o=c/h);break}return o},calculateSize:function(t,e){var n,i,r,u=this.getFit(t),a=u.fit,s=u.parent;return"width"==a||("contain"==a||"cover"==a)&&(i=this.getImageRatio(t))?(s?e=s.clientWidth:s=t,r=e,"width"==a?r=e:(n=e/s.clientHeight)&&("cover"==a&&n<i||"contain"==a&&n>i)&&(r=e*(i/n)),r):e}};n.parentFit=o,e.addEventListener("lazybeforesizes",(function(t){if(!t.defaultPrevented&&t.detail.instance==n){var e=t.target;t.detail.width=o.calculateSize(e,t.detail.width)}}))}}))},{lazysizes:2}],4:[function(t,e,n){"use strict";t("lazysizes"),t("lazysizes/plugins/parent-fit/ls.parent-fit");var i,r,u,a,s,o=(i=t("imask"))&&i.__esModule?i:{default:i};Array.from||(Array.from=(r=Object.prototype.toString,u=function(t){return"function"==typeof t||"[object Function]"===r.call(t)},a=Math.pow(2,53)-1,s=function(t){var e=function(t){var e=Number(t);return isNaN(e)?0:0!==e&&isFinite(e)?(e>0?1:-1)*Math.floor(Math.abs(e)):e}(t);return Math.min(Math.max(e,0),a)},function(t){var e=this,n=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var i,r=arguments.length>1?arguments[1]:void 0;if(void 0!==r){if(!u(r))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(i=arguments[2])}for(var a,o=s(n.length),l=u(e)?Object(new e(o)):new Array(o),c=0;c<o;)a=n[c],l[c]=r?void 0===i?r(a,c):r.call(i,a,c):a,c+=1;return l.length=o,l})),"NodeList"in window&&!NodeList.prototype.forEach&&(console.info("polyfill for IE11"),NodeList.prototype.forEach=function(t,e){e=e||window;for(var n=0;n<this.length;n++)t.call(e,this[n],n,this)}),Number.isNaN=Number.isNaN||function(t){return"number"==typeof t&&isNaN(t)};var l,c=(l=document.body.querySelectorAll("*"),Array.from(l).filter((function(t){return"fixed"===getComputedStyle(t).position}))),h=document.querySelectorAll("#js-input-tel"),f={mask:"+{38}(000)000-00-00"};h.forEach((function(t){(0,o.default)(t,f)}));document.querySelector(".burger__toggle");var d=document.querySelector(".burger"),p=document.querySelector(".page-header"),v=document.querySelector(".page-header__mob-group"),g=screen.width-document.documentElement.clientWidth,k=(document.querySelector(".page-header__close-btn"),function(){document.body.classList.remove("scroll-off"),document.body.style.paddingRight="",c.forEach((function(t){t.style.paddingRight=""}))}),m=function(){document.body.classList.add("scroll-off"),document.body.style.paddingRight="".concat(g,"px"),c.forEach((function(t){t.style.paddingRight="".concat(g,"px")}))};if(d.addEventListener("click",(function(t){p.classList.toggle("is-visible"),m()})),v.addEventListener("click",(function(t){("A"===t.target.tagName||t.target.closest(".page-header__close-btn"))&&(t.target.closest(".page-header__close-btn")?(p.classList.toggle("is-visible"),k()):setTimeout((function(){k(),p.classList.toggle("is-visible")}),500))})),document.querySelector(".product-desc__title-wrap")){var y=document.querySelector(".product-desc__title-wrap"),_=document.querySelector(".product-desc__txt"),b=function(){document.documentElement.clientWidth<=600&&(y.dataset.tab=!0,y.addEventListener("click",A))},A=function(){y.classList.toggle("is-active"),_.classList.toggle("visible")};b(),window.addEventListener("resize",(function(t){y.dataset.tab?y.dataset.tab&&document.documentElement.clientWidth>=600&&(y.removeAttribute("data-tab"),y.classList.remove("is-active"),y.removeEventListener("click",A),_.classList.remove("visible")):b()}))}var E,C=document.querySelectorAll("#modal-btn"),S=document.querySelectorAll(".modal__close-btn");window.addEventListener("resize",(function(t){g=screen.width-document.documentElement.clientWidth})),C.forEach((function(t){t.addEventListener("click",(function(e){e.preventDefault(),m();var n=t.dataset.modal;(E=document.getElementById("".concat(n))).classList.add("open")}))})),S.forEach((function(t){t.addEventListener("click",(function(t){k(),E.classList.remove("open"),E=null}))}));var w=new Swiper(".slider-thumbs",{spaceBetween:10,slidesPerView:4,breakpoints:{900:{slidesPerView:5,spaceBetween:25}},freeMode:!0,loopedSlides:5,watchSlidesVisibility:!0,watchSlidesProgress:!0}),F=(new Swiper(".slider-top",{spaceBetween:10,loop:!0,loopedSlides:5,navigation:{nextEl:".swiper-button-next1",prevEl:".swiper-button-prev1"},thumbs:{swiper:w}}),new Swiper(".slider-thumbs2",{spaceBetween:10,slidesPerView:4,breakpoints:{900:{slidesPerView:7}},freeMode:!0,loopedSlides:5,watchSlidesVisibility:!0,watchSlidesProgress:!0}));new Swiper(".slider-top2",{spaceBetween:10,loop:!0,loopedSlides:5,navigation:{nextEl:".swiper-button-next2",prevEl:".swiper-button-prev2"},thumbs:{swiper:F}}),new Swiper(".reviews-swiper-container",{spaceBetween:30,slidesPerView:1,centeredSlides:!0,loop:!0,breakpoints:{1200:{spaceBetween:30,slidesPerView:3,slidesPerGroup:3,centeredSlides:!1,loop:!1},1100:{spaceBetween:5,slidesPerView:3,slidesPerGroup:3,centeredSlides:!1,loop:!1},800:{spaceBetween:10,slidesPerView:2,slidesPerGroup:2,centeredSlides:!1,loop:!1}},pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next3",prevEl:".swiper-button-prev3"}})},{imask:1,lazysizes:2,"lazysizes/plugins/parent-fit/ls.parent-fit":3}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5taW4uanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiZ2xvYmFsIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJJTWFzayIsInRoaXMiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZuIiwiY2hlY2siLCJpdCIsIk1hdGgiLCJnbG9iYWxfMSIsIkZ1bmN0aW9uIiwiZmFpbHMiLCJleGVjIiwiZXJyb3IiLCJkZXNjcmlwdG9ycyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlIiwiViIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInRvU3RyaW5nIiwic3BsaXQiLCJpbmRleGVkT2JqZWN0Iiwic2xpY2UiLCJjbGFzc29mUmF3IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsInRvSW5kZXhlZE9iamVjdCIsImlzT2JqZWN0IiwidG9QcmltaXRpdmUiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJ2YWwiLCJ2YWx1ZU9mIiwiaGFzT3duUHJvcGVydHkiLCJoYXMiLCJrZXkiLCJkb2N1bWVudCQxIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiaWU4RG9tRGVmaW5lIiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTyIsIlAiLCJhbk9iamVjdCIsIlN0cmluZyIsIm5hdGl2ZURlZmluZVByb3BlcnR5Iiwib2JqZWN0RGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5Iiwib2JqZWN0Iiwic2V0R2xvYmFsIiwic2hhcmVkU3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInNldCIsImhhcyQxIiwiV2Vha01hcCIsIm5hdGl2ZVdlYWtNYXAiLCJ0ZXN0Iiwic2hhcmVkIiwicHVzaCIsInZlcnNpb24iLCJtb2RlIiwiY29weXJpZ2h0IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwia2V5cyIsImhpZGRlbktleXMiLCJXZWFrTWFwJDEiLCJzdG9yZSQxIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJTVEFURSIsInVpZCIsImludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiVFlQRSIsInN0YXRlIiwidHlwZSIsInJlZGVmaW5lIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJvcHRpb25zIiwidW5zYWZlIiwic2ltcGxlIiwibm9UYXJnZXRHZXQiLCJzb3VyY2UiLCJqb2luIiwicHJvdG90eXBlIiwicGF0aCIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwiZ2V0QnVpbHRJbiIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImNlaWwiLCJmbG9vciIsInRvSW50ZWdlciIsImFyZ3VtZW50IiwiaXNOYU4iLCJtaW4iLCJ0b0xlbmd0aCIsIm1heCIsIm1pbiQxIiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5kZXgiLCJpbnRlZ2VyIiwidG9BYnNvbHV0ZUluZGV4IiwiaW5kZXhPZiIsImluY2x1ZGVzIiwib2JqZWN0S2V5c0ludGVybmFsIiwibmFtZXMiLCJyZXN1bHQiLCJlbnVtQnVnS2V5cyIsImhpZGRlbktleXMkMSIsImNvbmNhdCIsIm9iamVjdEdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwib3duS2V5cyIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJ0YXJnZXQiLCJyZXBsYWNlbWVudCIsImlzRm9yY2VkIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImlzRm9yY2VkXzEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSIsIl9leHBvcnQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsImZvcmNlZCIsInNoYW0iLCJvYmplY3RLZXlzIiwidG9PYmplY3QiLCJuYXRpdmVBc3NpZ24iLCJhc3NpZ24iLCJvYmplY3RBc3NpZ24iLCJiIiwiQSIsIkIiLCJzeW1ib2wiLCJTeW1ib2wiLCJmb3JFYWNoIiwiY2hyIiwiVCIsImFyZ3VtZW50c0xlbmd0aCIsIlMiLCJqIiwic3RyaW5nUmVwZWF0IiwicmVwZWF0IiwiY291bnQiLCJzdHIiLCJJbmZpbml0eSIsIlJhbmdlRXJyb3IiLCJjZWlsJDEiLCJjcmVhdGVNZXRob2QkMSIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsInN0cmluZ1BhZCIsInN0YXJ0IiwiZW5kIiwiZW5naW5lVXNlckFnZW50Iiwic3RyaW5nUGFkV2Via2l0QnVnIiwiJHBhZEVuZCIsInByb3RvIiwicGFkRW5kIiwiJHBhZFN0YXJ0IiwiX3R5cGVvZiIsIm9iaiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9zZXRQcm90b3R5cGVPZiIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9zdXBlclByb3BCYXNlIiwicHJvcGVydHkiLCJfZ2V0IiwicmVjZWl2ZXIiLCJSZWZsZWN0IiwiYmFzZSIsImRlc2MiLCJzZXQkMSIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9zZXQiLCJpc1N0cmljdCIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJuZXh0IiwiZG9uZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJpc1N0cmluZyIsInBhZFN0YXJ0IiwiRElSRUNUSU9OIiwiZm9yY2VEaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJlc2NhcGVSZWdFeHAiLCJBY3Rpb25EZXRhaWxzIiwiY3Vyc29yUG9zIiwib2xkVmFsdWUiLCJvbGRTZWxlY3Rpb24iLCJzdGFydENoYW5nZVBvcyIsInN1YnN0ciIsImluc2VydGVkQ291bnQiLCJyZW1vdmVkQ291bnQiLCJzdWJzdHJpbmciLCJDaGFuZ2VEZXRhaWxzIiwiZGV0YWlscyIsImluc2VydGVkIiwicmF3SW5zZXJ0ZWQiLCJza2lwIiwidGFpbFNoaWZ0IiwiQ29udGludW91c1RhaWxEZXRhaWxzIiwiZnJvbSIsInN0b3AiLCJ0YWlsIiwibWFza2VkIiwiYXBwZW5kIiwiYWdncmVnYXRlIiwiX2FwcGVuZFBsYWNlaG9sZGVyIiwicG9zIiwic2hpZnRDaGFyIiwib3B0cyIsIklucHV0TWFzayIsIk1hc2tlZCIsIl92YWx1ZSIsIl91cGRhdGUiLCJERUZBVUxUUyIsImlzSW5pdGlhbGl6ZWQiLCJ3aXRoVmFsdWVSZWZyZXNoIiwiYmluZCIsInJlc2V0IiwiZG9Db21taXQiLCJmcm9tUG9zIiwidG9Qb3MiLCJleHRyYWN0SW5wdXQiLCJhcHBlbmRUbyIsImNoIiwiZmxhZ3MiLCJkb1ByZXBhcmUiLCJjaGVja1RhaWwiLCJjb25zaXN0ZW50U3RhdGUiLCJfYXBwZW5kQ2hhclJhdyIsImNvbnNpc3RlbnRUYWlsIiwiYXBwZW5kZWQiLCJkb1ZhbGlkYXRlIiwiYmVmb3JlVGFpbFN0YXRlIiwib3ZlcndyaXRlIiwic2hpZnRCZWZvcmUiLCJ0YWlsRGV0YWlscyIsImFwcGVuZFRhaWwiLCJfYmVmb3JlVGFpbFN0YXRlIiwiY2kiLCJfYXBwZW5kQ2hhciIsIl9yZWZyZXNoaW5nIiwicmF3SW5wdXQiLCJyYXdJbnB1dFZhbHVlIiwicmV0IiwiX2lzb2xhdGVkIiwicHJlcGFyZSIsInZhbGlkYXRlIiwicGFyZW50IiwiY29tbWl0IiwiZm9ybWF0IiwicGFyc2UiLCJkZWxldGVDb3VudCIsInJlbW92ZURpcmVjdGlvbiIsInRhaWxQb3MiLCJleHRyYWN0VGFpbCIsIm5lYXJlc3RJbnB1dFBvcyIsInJlbW92ZSIsInJlc29sdmUiLCJkb1BhcnNlIiwiZG9Gb3JtYXQiLCJyYXciLCJtYXNrZWRDbGFzcyIsIm1hc2siLCJSZWdFeHAiLCJNYXNrZWRSZWdFeHAiLCJNYXNrZWRQYXR0ZXJuIiwiRGF0ZSIsIk1hc2tlZERhdGUiLCJOdW1iZXIiLCJNYXNrZWROdW1iZXIiLCJNYXNrZWREeW5hbWljIiwiTWFza2VkRnVuY3Rpb24iLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZU1hc2siLCJNYXNrZWRDbGFzcyIsInYiLCJERUZBVUxUX0lOUFVUX0RFRklOSVRJT05TIiwiMCIsIioiLCJQYXR0ZXJuSW5wdXREZWZpbml0aW9uIiwiYmxvY2tPcHRzIiwiX2lzRmlsbGVkIiwiaXNPcHRpb25hbCIsImxhenkiLCJwbGFjZWhvbGRlckNoYXIiLCJCb29sZWFuIiwiX3RoaXMkbWFza2VkIiwiYXBwbHkiLCJfdGhpcyRtYXNrZWQyIiwiX3RoaXMkbWFza2VkMyIsIm1pblBvcyIsIm1heFBvcyIsImJvdW5kUG9zIiwiaXNDb21wbGV0ZSIsIl90aGlzJG1hc2tlZDQiLCJfdGhpcyRwYXJlbnQiLCJ1bm1hc2tlZFZhbHVlIiwiUGF0dGVybkZpeGVkRGVmaW5pdGlvbiIsIl9pc1Jhd0lucHV0IiwiY2hhciIsImlzUmVzb2x2ZWQiLCJpc1VubWFza2luZyIsIkNodW5rc1RhaWxEZXRhaWxzIiwiY2h1bmtzIiwibWFwIiwidGFpbENodW5rIiwibGFzdENodW5rIiwiZXh0ZW5kTGFzdCIsImV4dGVuZCIsImZpcnN0VGFpbENodW5rIiwic2hpZnQiLCJibG9ja0luZGV4IiwiY2h1bmsiLCJsYXN0QmxvY2tJdGVyIiwiX21hcFBvc1RvQmxvY2siLCJjaHVua0Jsb2NrIiwiX3N0b3BzIiwiX2Jsb2NrcyIsInJlbWFpbkNoYXJzIiwiY2h1bmtTaGlmdFBvcyIsInNwbGljZSIsImNzdGF0ZSIsIl9NYXNrZWQiLCJzZWFyY2giLCJkZWZpbml0aW9ucyIsIl9yZWJ1aWxkTWFzayIsIl90aGlzIiwiZGVmcyIsIl9tYXNrZWRCbG9ja3MiLCJwYXR0ZXJuIiwidW5tYXNraW5nQmxvY2siLCJvcHRpb25hbEJsb2NrIiwiYmxvY2tzIiwiYk5hbWVzIiwiZmlsdGVyIiwiYk5hbWUiLCJzb3J0IiwibWFza2VkQmxvY2siLCJfaXNJbnB1dCIsIlNUT1BfQ0hBUiIsIkVTQ0FQRV9DSEFSIiwiZGVmIiwiYmxvY2tJdGVyIiwiYmkiLCJfYmxvY2siLCJibG9ja0RldGFpbHMiLCJfdGhpczIiLCJjaHVua1RhaWwiLCJfZm9yRWFjaEJsb2Nrc0luUmFuZ2UiLCJiRnJvbVBvcyIsImJUb1BvcyIsImJsb2NrQ2h1bmsiLCJfZmluZFN0b3BCZWZvcmUiLCJfYmxvY2tTdGFydFBvcyIsIl8iLCJzdG9wQmVmb3JlIiwic2kiLCJ0b0Jsb2NrSW5kZXgiLCJfdGhpczMiLCJzdGFydEJsb2NrSXRlciIsInN0YXJ0QmxvY2tJbmRleCIsImVuZEJsb2NrSW5kZXgiLCJhcmdzIiwiYkRldGFpbHMiLCJhY2NWYWwiLCJfYmxvY2syIiwiYmxvY2tTdGFydFBvcyIsIm9mZnNldCIsInJlZHVjZSIsImZyb21CbG9ja0l0ZXIiLCJ0b0Jsb2NrSXRlciIsImlzU2FtZUJsb2NrIiwiZnJvbUJsb2NrU3RhcnRQb3MiLCJmcm9tQmxvY2tFbmRQb3MiLCJyZW1vdmVEZXRhaWxzIiwiYmVnaW5CbG9ja0RhdGEiLCJiZWdpbkJsb2NrT2Zmc2V0IiwiYmVnaW5CbG9ja0luZGV4IiwiYmVnaW5CbG9jayIsImJlZ2luQmxvY2tDdXJzb3JQb3MiLCJjdXJzb3JBdFJpZ2h0IiwiY3Vyc29yQXRMZWZ0Iiwic2VhcmNoQmxvY2tJbmRleCIsImJsb2NrSW5kZXhBdExlZnQiLCJibG9ja0F0TGVmdCIsImJsb2NrSW5wdXRQb3MiLCJmaXJzdElucHV0QXRSaWdodCIsImJsb2NrQXRSaWdodCIsIl9ibG9ja0lucHV0UG9zIiwiX2JpIiwiX2Jsb2NrMyIsIl9ibG9ja0lucHV0UG9zMiIsImZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQiLCJfYmkyIiwiZmlsbGVkQmxvY2siLCJfYmxvY2tJbnB1dFBvczMiLCJmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4IiwiZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXgiLCJfYmkzIiwiX2Jsb2NrNCIsIl9ibG9ja0lucHV0UG9zNCIsIl9iaTQiLCJfYmxvY2s1IiwiX2Jsb2NrSW5wdXRQb3M1IiwiYmxvY2tBbGlnbmVkUG9zIiwiaXNJbnB1dCIsIl9iaTUiLCJfYmxvY2s2IiwiX2Jsb2NrSW5wdXRQb3M2IiwiZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4IiwiZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcyIsIl9iaTYiLCJfYmxvY2s3IiwiX2Jsb2NrSW5wdXRQb3M3IiwiX2JpNyIsIl9ibG9jazgiLCJfYmxvY2tJbnB1dFBvczgiLCJfYmk4IiwiX2Jsb2NrOSIsIl9ibG9ja0lucHV0UG9zOSIsImFsaWduZWRQb3MiLCJuYW1lIiwibWFza2VkQmxvY2tzIiwiX3RoaXM0IiwiaW5kaWNlcyIsImdpIiwibWFza2VkU3RhdGUiLCJldmVyeSIsImJsb2NrIiwiSW5wdXREZWZpbml0aW9uIiwiRml4ZWREZWZpbml0aW9uIiwiTWFza2VkUmFuZ2UiLCJfTWFza2VkUGF0dGVybiIsInRvIiwiZnJvbVN0ciIsInRvU3RyIiwic2FtZUNoYXJzQ291bnQiLCJtaW5zdHIiLCJtYXhzdHIiLCJfcmVmMiIsIm1hdGNoIiwicGxhY2Vob2xkZXIiLCJudW0iLCJhdXRvZml4IiwicHJlcFN0ciIsIm5leHRWYWwiLCJfdGhpcyRib3VuZGFyaWVzIiwiYm91bmRhcmllcyIsIl90aGlzJGJvdW5kYXJpZXMyIiwiX2dldDIiLCJmaXJzdE5vblplcm8iLCJfbWF0Y2hGcm9tIiwiX3RoaXMkYm91bmRhcmllczMiLCJfdGhpcyRib3VuZGFyaWVzNCIsIl9sZW4iLCJfa2V5IiwiR0VUX0RFRkFVTFRfQkxPQ0tTIiwiWSIsImdldEZ1bGxZZWFyIiwibSIsImdldE1vbnRoIiwiZCIsImdldERhdGUiLCJiayIsImRhdGUiLCJpc0RhdGVFeGlzdCIsInR5cGVkVmFsdWUiLCJfc3RyJHNwbGl0MiIsImRheSIsIm1vbnRoIiwieWVhciIsIk1hc2tFbGVtZW50Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJfdW5zYWZlU2VsZWN0IiwiaGFuZGxlcnMiLCJfdW5zYWZlU2VsZWN0aW9uU3RhcnQiLCJfdW5zYWZlU2VsZWN0aW9uRW5kIiwiSFRNTE1hc2tFbGVtZW50IiwiX01hc2tFbGVtZW50IiwiX2hhbmRsZXJzIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJldmVudCIsIl90b2dnbGVFdmVudEhhbmRsZXIiLCJFVkVOVFNfTUFQIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0Um9vdE5vZGUiLCJyb290RWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJzZWxlY3Rpb25DaGFuZ2UiLCJkcm9wIiwiY2xpY2siLCJmb2N1cyIsIkhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCIsIl9IVE1MTWFza0VsZW1lbnQiLCJjcmVhdGVSYW5nZSIsInJhbmdlIiwic2V0U3RhcnQiLCJmaXJzdENoaWxkIiwic2V0RW5kIiwibGFzdENoaWxkIiwicm9vdCIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiYW5jaG9yT2Zmc2V0IiwidGV4dENvbnRlbnQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInRhZ05hbWUiLCJfbGlzdGVuZXJzIiwiX3VubWFza2VkVmFsdWUiLCJfc2F2ZVNlbGVjdGlvbiIsIl9vbklucHV0IiwiX29uQ2hhbmdlIiwiX29uRHJvcCIsIl9vbkZvY3VzIiwiX29uQ2xpY2siLCJhbGlnbkN1cnNvciIsImFsaWduQ3Vyc29yRnJpZW5kbHkiLCJfYmluZEV2ZW50cyIsInVwZGF0ZVZhbHVlIiwiYmluZEV2ZW50cyIsInVuYmluZEV2ZW50cyIsImV2IiwibGlzdGVuZXJzIiwibCIsIl9zZWxlY3Rpb24iLCJuZXdVbm1hc2tlZFZhbHVlIiwibmV3VmFsdWUiLCJpc0NoYW5nZWQiLCJfZmlyZUNoYW5nZUV2ZW50cyIsInJlc3RPcHRzIiwidXBkYXRlTWFzayIsIm1hc2tFcXVhbHMiLCJ1cGRhdGVPcHRzIiwib2JqZWN0SW5jbHVkZXMiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiZGF0ZUIiLCJnZXRUaW1lIiwicmVnZXhwQSIsInJlZ2V4cEIiLCJ1cGRhdGVPcHRpb25zIiwidXBkYXRlQ29udHJvbCIsIl9kZWxheVVwZGF0ZUN1cnNvciIsIl9hYm9ydFVwZGF0ZUN1cnNvciIsIl9jaGFuZ2luZ0N1cnNvclBvcyIsIl9jdXJzb3JDaGFuZ2luZyIsInNldFRpbWVvdXQiLCJfZmlyZUV2ZW50IiwiX2lucHV0RXZlbnQiLCJjbGVhclRpbWVvdXQiLCJoSW5kZXgiLCJvbGRSYXdWYWx1ZSIsInJlbW92ZWQiLCJ1cGRhdGVDdXJzb3IiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIl91bmJpbmRFdmVudHMiLCJpc0FjdGl2ZSIsInNlbGVjdCIsIk1hc2tlZEVudW0iLCJlbnVtIiwic29tZSIsIl91cGRhdGVSZWdFeHBzIiwiYWxsb3dOZWdhdGl2ZSIsInNjYWxlIiwicmFkaXgiLCJfbnVtYmVyUmVnRXhwSW5wdXQiLCJfbnVtYmVyUmVnRXhwIiwiX21hcFRvUmFkaXhSZWdFeHAiLCJtYXBUb1JhZGl4IiwiX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCIsInRob3VzYW5kc1NlcGFyYXRvciIsInBhcnRzIiwiX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMiLCJleHRlbmRPblNlcGFyYXRvcnMiLCJfc2VwYXJhdG9yc0NvdW50IiwiX3RoaXMkX2FkanVzdFJhbmdlV2l0IiwiX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMiLCJfdGhpcyRfYWRqdXN0UmFuZ2VXaXQyIiwicHJldkJlZm9yZVRhaWxWYWx1ZSIsInByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50IiwiX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSIsImFwcGVuZERldGFpbHMiLCJfaW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyIsImJlZm9yZVRhaWxWYWx1ZSIsImJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQiLCJzZWFyY2hGcm9tIiwic2VwYXJhdG9yUG9zIiwic2VwYXJhdG9yQXJvdW5kRnJvbVBvcyIsIl9maW5kU2VwYXJhdG9yQXJvdW5kIiwic2VwYXJhdG9yQXJvdW5kVG9Qb3MiLCJfdGhpcyRfYWRqdXN0UmFuZ2VXaXQzIiwiX3RoaXMkX2FkanVzdFJhbmdlV2l0NCIsInZhbHVlQmVmb3JlUG9zIiwidmFsdWVBZnRlclBvcyIsInNlcGFyYXRvckF0TGVmdFBvcyIsInNlcGFyYXRvckF0TGVmdEVuZFBvcyIsInNlcGFyYXRvckF0UmlnaHRQb3MiLCJ2YWxpZCIsIm51bWJlciIsInZhbGlkbnVtIiwiZm9ybWF0dGVkIiwibm9ybWFsaXplWmVyb3MiLCJfbm9ybWFsaXplWmVyb3MiLCJwYWRGcmFjdGlvbmFsWmVyb3MiLCJfcGFkRnJhY3Rpb25hbFplcm9zIiwic2lnbiIsInplcm9zIiwic2lnbmVkIiwiY3VycmVudE1hc2siLCJjb21waWxlZE1hc2tzIiwiX3RoaXMkY3VycmVudE1hc2siLCJfYXBwbHlEaXNwYXRjaCIsInByZXZWYWx1ZUJlZm9yZVRhaWwiLCJpbnB1dFZhbHVlIiwiaW5zZXJ0VmFsdWUiLCJfcmF3SW5wdXRWYWx1ZSIsInRhaWxWYWx1ZSIsInByZXZNYXNrIiwicHJldk1hc2tTdGF0ZSIsImRvRGlzcGF0Y2giLCJkaXNwYXRjaCIsIl90aGlzJGN1cnJlbnRNYXNrMiIsIl90aGlzJGN1cnJlbnRNYXNrMyIsIl90aGlzJGN1cnJlbnRNYXNrNCIsIl90aGlzJGN1cnJlbnRNYXNrNSIsIl9nZXQzIiwiX2xlbjIiLCJfa2V5MiIsIl90aGlzJGN1cnJlbnRNYXNrNiIsIl9nZXQ0IiwiX2xlbjMiLCJfa2V5MyIsImN1cnJlbnRNYXNrUmVmIiwibWkiLCJpbnB1dHMiLCJ3ZWlnaHQiLCJpMSIsImkyIiwiUElQRV9UWVBFIiwiTUFTS0VEIiwiVU5NQVNLRUQiLCJUWVBFRCIsImNyZWF0ZVBpcGUiLCJydW5Jc29sYXRlZCIsInBpcGUiLCJwaXBlQXJncyIsImRlZmF1bHQiLCIyIiwibGF6eVNpemVzIiwibGF6eXNpemVzIiwibGF6eVNpemVzQ2ZnIiwicHJvcCIsImxhenlTaXplc0RlZmF1bHRzIiwibGF6eUNsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJwcmVsb2FkQ2xhc3MiLCJlcnJvckNsYXNzIiwiYXV0b3NpemVzQ2xhc3MiLCJzcmNBdHRyIiwic3Jjc2V0QXR0ciIsInNpemVzQXR0ciIsIm1pblNpemUiLCJjdXN0b21NZWRpYSIsImluaXQiLCJleHBGYWN0b3IiLCJoRmFjIiwibG9hZE1vZGUiLCJsb2FkSGlkZGVuIiwicmljVGltZW91dCIsInRocm90dGxlRGVsYXkiLCJsYXp5U2l6ZXNDb25maWciLCJsYXp5c2l6ZXNDb25maWciLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2ZnIiwibm9TdXBwb3J0IiwiZG9jRWxlbSIsImRvY3VtZW50RWxlbWVudCIsInN1cHBvcnRQaWN0dXJlIiwiSFRNTFBpY3R1cmVFbGVtZW50IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdElkbGVDYWxsYmFjayIsInJlZ1BpY3R1cmUiLCJsb2FkRXZlbnRzIiwicmVnQ2xhc3NDYWNoZSIsImhhc0NsYXNzIiwiZWxlIiwiY2xzIiwiYWRkQ2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJ0cmltIiwicmVtb3ZlQ2xhc3MiLCJyZWciLCJhZGRSZW1vdmVMb2FkRXZlbnRzIiwiZG9tIiwiYWRkIiwiYWN0aW9uIiwiZXZ0IiwidHJpZ2dlckV2ZW50IiwiZWxlbSIsImRldGFpbCIsIm5vQnViYmxlcyIsIm5vQ2FuY2VsYWJsZSIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInVwZGF0ZVBvbHlmaWxsIiwiZnVsbCIsInBvbHlmaWxsIiwicGljdHVyZWZpbGwiLCJwZiIsInNyYyIsInJlZXZhbHVhdGUiLCJlbGVtZW50cyIsImdldENTUyIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFdpZHRoIiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsIl9sYXp5c2l6ZXNXaWR0aCIsInBhcmVudE5vZGUiLCJyQUYiLCJmaXJzdEZucyIsInNlY29uZEZucyIsImZucyIsInJ1biIsInJ1bkZucyIsInJ1bm5pbmciLCJ3YWl0aW5nIiwicmFmQmF0Y2giLCJxdWV1ZSIsImhpZGRlbiIsIl9sc0ZsdXNoIiwickFGSXQiLCJ0aGF0IiwiZGVib3VuY2UiLCJmdW5jIiwidGltZW91dCIsInRpbWVzdGFtcCIsImxhdGVyIiwibGFzdCIsIm5vdyIsImxvYWRlciIsInJlZ0ltZyIsInJlZ0lmcmFtZSIsInN1cHBvcnRTY3JvbGwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjdXJyZW50RXhwYW5kIiwiaXNMb2FkaW5nIiwibG93UnVucyIsInJlc2V0UHJlbG9hZGluZyIsImlzVmlzaWJsZSIsImlzQm9keUhpZGRlbiIsImJvZHkiLCJpc05lc3RlZFZpc2libGUiLCJlbGVtRXhwYW5kIiwib3V0ZXJSZWN0IiwidmlzaWJsZSIsImVMdG9wIiwiZUxib3R0b20iLCJlTGxlZnQiLCJlTHJpZ2h0Iiwib2Zmc2V0UGFyZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiY2hlY2tFbGVtZW50cyIsImVMbGVuIiwicmVjdCIsImF1dG9Mb2FkRWxlbSIsImxvYWRlZFNvbWV0aGluZyIsImVsZW1OZWdhdGl2ZUV4cGFuZCIsImVsZW1FeHBhbmRWYWwiLCJiZWZvcmVFeHBhbmRWYWwiLCJkZWZhdWx0RXhwYW5kIiwicHJlbG9hZEV4cGFuZCIsImxhenlsb2FkRWxlbXMiLCJfbGF6eVJhY2UiLCJwcmVtYXR1cmVVbnZlaWwiLCJ1bnZlaWxFbGVtZW50IiwiZXhwYW5kIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJfZGVmRXgiLCJlTHZXIiwiaW5uZXJXaWR0aCIsImVsdkgiLCJpbm5lckhlaWdodCIsImlzQ29tcGxldGVkIiwicHJlbG9hZEVsZW1zIiwicHJlbG9hZEFmdGVyTG9hZCIsInRocm90dGxlZENoZWNrRWxlbWVudHMiLCJsYXN0VGltZSIsImdEZWxheSIsInJJQ1RpbWVvdXQiLCJpZGxlQ2FsbGJhY2siLCJpc1ByaW9yaXR5IiwiZGVsYXkiLCJ0aHJvdHRsZSIsInN3aXRjaExvYWRpbmdDbGFzcyIsIl9sYXp5Q2FjaGUiLCJyYWZTd2l0Y2hMb2FkaW5nQ2xhc3MiLCJyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyIsImhhbmRsZVNvdXJjZXMiLCJzb3VyY2VTcmNzZXQiLCJsYXp5VW52ZWlsIiwiaXNBdXRvIiwic2l6ZXMiLCJpc0ltZyIsInNyY3NldCIsImlzUGljdHVyZSIsImZpcmVzTG9hZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJub2RlTmFtZSIsInJlc2V0UHJlbG9hZGluZ1RpbWVyIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjb250ZW50V2luZG93IiwibG9jYXRpb24iLCJjaGFuZ2VJZnJhbWVTcmMiLCJpc0xvYWRlZCIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwibG9hZGluZyIsImF1dG9TaXplciIsInVwZGF0ZUVsZW0iLCJhZnRlclNjcm9sbCIsImFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciIsIm9ubG9hZCIsInN0YXJ0ZWQiLCJwZXJzaXN0ZWQiLCJsb2FkaW5nRWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW1nIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYXR0cmlidXRlcyIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsImNoZWNrRWxlbXMiLCJ1bnZlaWwiLCJfYUxTTCIsInNpemVFbGVtZW50Iiwic291cmNlcyIsImxlbiIsImRhdGFBdHRyIiwiZ2V0U2l6ZUVsZW1lbnQiLCJkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzIiwiYXV0b3NpemVzRWxlbXMiLCJ1UCIsImFDIiwickMiLCJoQyIsImZpcmUiLCJnVyIsIjMiLCJnbG9iYWxJbnN0YWxsIiwicmVnRGVzY3JpcHRvcnMiLCJyZWdDc3NGaXQiLCJyZWdDc3NPYmplY3QiLCJwYXJlbnRGaXQiLCJnZXRQYXJlbnQiLCJlbGVtZW50IiwicGFyZW50U2VsIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImNsb3Nlc3QiLCJqUXVlcnkiLCJnZXRGaXQiLCJ0bXBNYXRjaCIsInBhcmVudE9iaiIsImNzcyIsImNvbnRlbnQiLCJmb250RmFtaWx5IiwiZml0IiwiX2xhenlzaXplc1BhcmVudEZpdCIsImdldEF0dHJpYnV0ZSIsIl9sYXp5c2l6ZXNQYXJlbnRDb250YWluZXIiLCJvYmplY3RGaXQiLCJnZXRJbWFnZVJhdGlvIiwibWVkaWEiLCJyYXRpbyIsImhlaWdodCIsIl9sc01lZGlhIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJwYXJzZUZsb2F0IiwiY2FsY3VsYXRlU2l6ZSIsImRpc3BsYXlSYXRpbyIsImltYWdlUmF0aW8iLCJyZXRXaWR0aCIsImZpdE9iaiIsImZpdEVsZW0iLCI0IiwiaXNDYWxsYWJsZSIsIm1heFNhZmVJbnRlZ2VyIiwiX2ltYXNrIiwiX19lc01vZHVsZSIsInBvdyIsImlzRmluaXRlIiwiYWJzIiwiYXJyYXlMaWtlIiwiQyIsIml0ZW1zIiwibWFwRm4iLCJrVmFsdWUiLCJrIiwiTm9kZUxpc3QiLCJpbmZvIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwiYWxsIiwiZml4ZWRFbGVtZW50cyIsInBvc2l0aW9uIiwiaW5wdXRUZWxFbGVtZW50cyIsIm1hc2tPcHRpb25zIiwiaW5wdXRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImJ1cmdlciIsImhlYWRlciIsIm1vYkJhciIsInNjcm9sbFdpZHRoIiwic2NyZWVuIiwiYWRkU2Nyb2xsIiwiY2xhc3NMaXN0IiwicGFkZGluZ1JpZ2h0Iiwic3RvcGVkU2Nyb2xsIiwidG9nZ2xlIiwidGh1bWIiLCJ0YWIiLCJkYXRhc2V0IiwidG9nZ2xlVGFiIiwicmVtb3ZlQXR0cmlidXRlIiwibW9kYWxPdmVybGF5IiwibW9kYWxCdG4iLCJfY2xvc2VCdG4iLCJvcGVuQnRuIiwib3ZlcmxheSIsIm1vZGFsIiwiZ2V0RWxlbWVudEJ5SWQiLCJidG4iLCJ0aHVtYnMiLCJTd2lwZXIiLCJzcGFjZUJldHdlZW4iLCJzbGlkZXNQZXJWaWV3IiwiYnJlYWtwb2ludHMiLCI5MDAiLCJmcmVlTW9kZSIsImxvb3BlZFNsaWRlcyIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ0aHVtYnMyIiwibG9vcCIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJzd2lwZXIiLCJjZW50ZXJlZFNsaWRlcyIsIjEyMDAiLCJzbGlkZXNQZXJHcm91cCIsIjExMDAiLCI4MDAiLCJwYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiaW1hc2siLCJsYXp5c2l6ZXMvcGx1Z2lucy9wYXJlbnQtZml0L2xzLnBhcmVudC1maXQiXSwibWFwcGluZ3MiOiJDQUFZLFNBQVNBLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsU0FBU0MsRUFBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLElBQUlFLEVBQUUsbUJBQW1CQyxTQUFTQSxRQUFRLElBQUlGLEdBQUdDLEVBQUUsT0FBT0EsRUFBRUYsR0FBRSxHQUFJLEdBQUdJLEVBQUUsT0FBT0EsRUFBRUosR0FBRSxHQUFJLElBQUlLLEVBQUUsSUFBSUMsTUFBTSx1QkFBdUJOLEVBQUUsS0FBSyxNQUFNSyxFQUFFRSxLQUFLLG1CQUFtQkYsRUFBRSxJQUFJRyxFQUFFWCxFQUFFRyxHQUFHLENBQUNTLFFBQVEsSUFBSWIsRUFBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxTQUFRLFNBQVNkLEdBQW9CLE9BQU9JLEVBQWxCSCxFQUFFSSxHQUFHLEdBQUdMLElBQWVBLEtBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsT0FBT0QsRUFBRUcsR0FBR1MsUUFBUSxJQUFJLElBQUlMLEVBQUUsbUJBQW1CRCxTQUFTQSxRQUFRSCxFQUFFLEVBQUVBLEVBQUVGLEVBQUVhLE9BQU9YLElBQUlELEVBQUVELEVBQUVFLElBQUksT0FBT0QsRUFBN2IsQ0FBNGMsQ0FBQ2EsRUFBRSxDQUFDLFNBQVNULEVBQVFV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QVEsdUJBQ1JDLE9BQVEsMkJBSVYsQ0FBQ1MsTUFBUSxFQUFFL1QsVUFBWSxFQUFFZ1UsNkNBQTZDLEtBQUssR0FBRyxDQUFDIiwiZmlsZSI6ImNvbW1vbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXsoZnVuY3Rpb24gKCl7XG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG5cdChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuSU1hc2sgPSB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cdHZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0XHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG5cdH1cblxuXHR2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xuXHR9OyAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxuXG5cblx0dmFyIGdsb2JhbF8xID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8IGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fCBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fCBjaGVjayh0eXBlb2YgY29tbW9uanNHbG9iYWwgPT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpIHx8IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuXHRGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5cdHZhciBmYWlscyA9IGZ1bmN0aW9uIChleGVjKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0ICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHR9O1xuXG5cdC8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcblxuXG5cdHZhciBkZXNjcmlwdG9ycyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwge1xuXHQgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiA3O1xuXHQgICAgfVxuXHQgIH0pWzFdICE9IDc7XG5cdH0pO1xuXG5cdHZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgLy8gTmFzaG9ybiB+IEpESzggYnVnXG5cblx0dmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHtcblx0ICAxOiAyXG5cdH0sIDEpOyAvLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG5cdC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcblxuXHR2YXIgZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuXHQgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuXHQgIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xuXHR9IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG5cblx0dmFyIG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlID0ge1xuXHRcdGY6IGZcblx0fTtcblxuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcblx0ICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcblx0ICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuXHQgICAgdmFsdWU6IHZhbHVlXG5cdCAgfTtcblx0fTtcblxuXHR2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxuXHR2YXIgY2xhc3NvZlJhdyA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG5cdH07XG5cblx0dmFyIHNwbGl0ID0gJycuc3BsaXQ7IC8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5cblx0dmFyIGluZGV4ZWRPYmplY3QgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG5cdCAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuXHQgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcblx0ICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xuXHR9KSA/IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiBjbGFzc29mUmF3KGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG5cdH0gOiBPYmplY3Q7XG5cblx0Ly8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5cdHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG5cdC8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG5cblxuXG5cblx0dmFyIHRvSW5kZXhlZE9iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiBpbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcblx0fTtcblxuXHR2YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xuXHR9O1xuXG5cdC8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG5cdC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5cdC8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG5cdC8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5cblxuXHR2YXIgdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcblx0ICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuXHQgIHZhciBmbiwgdmFsO1xuXHQgIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuXHQgIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuXHQgIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcblx0ICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG5cdH07XG5cblx0dmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0dmFyIGhhcyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG5cdCAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG5cdH07XG5cblx0dmFyIGRvY3VtZW50JDEgPSBnbG9iYWxfMS5kb2N1bWVudDsgLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG5cblx0dmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50JDEpICYmIGlzT2JqZWN0KGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCk7XG5cblx0dmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiBFWElTVFMgPyBkb2N1bWVudCQxLmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG5cdH07XG5cblx0Ly8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxuXG5cblx0dmFyIGllOERvbURlZmluZSA9ICFkZXNjcmlwdG9ycyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG5cdCAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIDc7XG5cdCAgICB9XG5cdCAgfSkuYSAhPSA3O1xuXHR9KTtcblxuXHR2YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5cblx0dmFyIGYkMSA9IGRlc2NyaXB0b3JzID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcblx0ICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuXHQgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBpZiAoaWU4RG9tRGVmaW5lKSB0cnkge1xuXHQgICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcblx0ICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgLyogZW1wdHkgKi9cblx0ICB9XG5cdCAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcblx0fTtcblxuXHR2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0ge1xuXHRcdGY6IGYkMVxuXHR9O1xuXG5cdHZhciBhbk9iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmICghaXNPYmplY3QoaXQpKSB7XG5cdCAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuXHQgIH1cblxuXHQgIHJldHVybiBpdDtcblx0fTtcblxuXHR2YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7IC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcblxuXHR2YXIgZiQyID0gZGVzY3JpcHRvcnMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcblx0ICBhbk9iamVjdChPKTtcblx0ICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG5cdCAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG5cdCAgaWYgKGllOERvbURlZmluZSkgdHJ5IHtcblx0ICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcblx0ICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgLyogZW1wdHkgKi9cblx0ICB9XG5cdCAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuXHQgIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuXHQgIHJldHVybiBPO1xuXHR9O1xuXG5cdHZhciBvYmplY3REZWZpbmVQcm9wZXJ0eSA9IHtcblx0XHRmOiBmJDJcblx0fTtcblxuXHR2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gZGVzY3JpcHRvcnMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG5cdCAgcmV0dXJuIG9iamVjdERlZmluZVByb3BlcnR5LmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuXHR9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuXHR2YXIgc2V0R2xvYmFsID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0ICB0cnkge1xuXHQgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbF8xLCBrZXksIHZhbHVlKTtcblx0ICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgZ2xvYmFsXzFba2V5XSA9IHZhbHVlO1xuXHQgIH1cblxuXHQgIHJldHVybiB2YWx1ZTtcblx0fTtcblxuXHR2YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG5cdHZhciBzdG9yZSA9IGdsb2JhbF8xW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXHR2YXIgc2hhcmVkU3RvcmUgPSBzdG9yZTtcblxuXHR2YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nOyAvLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuXG5cdGlmICh0eXBlb2Ygc2hhcmVkU3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG5cdCAgc2hhcmVkU3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG5cdCAgfTtcblx0fVxuXG5cdHZhciBpbnNwZWN0U291cmNlID0gc2hhcmVkU3RvcmUuaW5zcGVjdFNvdXJjZTtcblxuXHR2YXIgV2Vha01hcCA9IGdsb2JhbF8xLldlYWtNYXA7XG5cdHZhciBuYXRpdmVXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuXG5cdHZhciBzaGFyZWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdCAgcmV0dXJuIHNoYXJlZFN0b3JlW2tleV0gfHwgKHNoYXJlZFN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG5cdH0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcblx0ICB2ZXJzaW9uOiAnMy42LjQnLFxuXHQgIG1vZGU6ICAnZ2xvYmFsJyxcblx0ICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xuXHR9KTtcblx0fSk7XG5cblx0dmFyIGlkID0gMDtcblx0dmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5cdHZhciB1aWQgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcblx0fTtcblxuXHR2YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5cdHZhciBzaGFyZWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xuXHR9O1xuXG5cdHZhciBoaWRkZW5LZXlzID0ge307XG5cblx0dmFyIFdlYWtNYXAkMSA9IGdsb2JhbF8xLldlYWtNYXA7XG5cdHZhciBzZXQsIGdldCwgaGFzJDE7XG5cblx0dmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaGFzJDEoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xuXHR9O1xuXG5cdHZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuXHQgIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcblx0ICAgIHZhciBzdGF0ZTtcblxuXHQgICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuXHQgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBzdGF0ZTtcblx0ICB9O1xuXHR9O1xuXG5cdGlmIChuYXRpdmVXZWFrTWFwKSB7XG5cdCAgdmFyIHN0b3JlJDEgPSBuZXcgV2Vha01hcCQxKCk7XG5cdCAgdmFyIHdtZ2V0ID0gc3RvcmUkMS5nZXQ7XG5cdCAgdmFyIHdtaGFzID0gc3RvcmUkMS5oYXM7XG5cdCAgdmFyIHdtc2V0ID0gc3RvcmUkMS5zZXQ7XG5cblx0ICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG5cdCAgICB3bXNldC5jYWxsKHN0b3JlJDEsIGl0LCBtZXRhZGF0YSk7XG5cdCAgICByZXR1cm4gbWV0YWRhdGE7XG5cdCAgfTtcblxuXHQgIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUkMSwgaXQpIHx8IHt9O1xuXHQgIH07XG5cblx0ICBoYXMkMSA9IGZ1bmN0aW9uIChpdCkge1xuXHQgICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUkMSwgaXQpO1xuXHQgIH07XG5cdH0gZWxzZSB7XG5cdCAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuXHQgIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcblxuXHQgIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcblx0ICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcblx0ICAgIHJldHVybiBtZXRhZGF0YTtcblx0ICB9O1xuXG5cdCAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgICByZXR1cm4gaGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcblx0ICB9O1xuXG5cdCAgaGFzJDEgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICAgIHJldHVybiBoYXMoaXQsIFNUQVRFKTtcblx0ICB9O1xuXHR9XG5cblx0dmFyIGludGVybmFsU3RhdGUgPSB7XG5cdCAgc2V0OiBzZXQsXG5cdCAgZ2V0OiBnZXQsXG5cdCAgaGFzOiBoYXMkMSxcblx0ICBlbmZvcmNlOiBlbmZvcmNlLFxuXHQgIGdldHRlckZvcjogZ2V0dGVyRm9yXG5cdH07XG5cblx0dmFyIHJlZGVmaW5lID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuXHR2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGUuZ2V0O1xuXHR2YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlLmVuZm9yY2U7XG5cdHZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblx0KG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcblx0ICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcblx0ICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG5cdCAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuXG5cdCAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcblx0ICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG5cdCAgfVxuXG5cdCAgaWYgKE8gPT09IGdsb2JhbF8xKSB7XG5cdCAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcblx0ICAgIHJldHVybjtcblx0ICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcblx0ICAgIGRlbGV0ZSBPW2tleV07XG5cdCAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG5cdCAgICBzaW1wbGUgPSB0cnVlO1xuXHQgIH1cblxuXHQgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO2Vsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpOyAvLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcblx0fSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0ICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xuXHR9KTtcblx0fSk7XG5cblx0dmFyIHBhdGggPSBnbG9iYWxfMTtcblxuXHR2YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG5cdH07XG5cblx0dmFyIGdldEJ1aWx0SW4gPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcblx0ICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsXzFbbmFtZXNwYWNlXSkgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsXzFbbmFtZXNwYWNlXSAmJiBnbG9iYWxfMVtuYW1lc3BhY2VdW21ldGhvZF07XG5cdH07XG5cblx0dmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cdHZhciBmbG9vciA9IE1hdGguZmxvb3I7IC8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcblxuXHR2YXIgdG9JbnRlZ2VyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG5cdCAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG5cdH07XG5cblx0dmFyIG1pbiA9IE1hdGgubWluOyAvLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxuXG5cdHZhciB0b0xlbmd0aCA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuXHQgIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG5cdH07XG5cblx0dmFyIG1heCA9IE1hdGgubWF4O1xuXHR2YXIgbWluJDEgPSBNYXRoLm1pbjsgLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG5cdC8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cblx0Ly8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cblxuXHR2YXIgdG9BYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcblx0ICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG5cdCAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluJDEoaW50ZWdlciwgbGVuZ3RoKTtcblx0fTtcblxuXHQvLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxuXG5cblx0dmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuXHQgIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcblx0ICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcblx0ICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG5cdCAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuXHQgICAgdmFyIHZhbHVlOyAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG5cdCAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG5cblx0ICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG5cdCAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuXG5cdCAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7IC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3Rcblx0ICAgIH0gZWxzZSBmb3IgKDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcblx0ICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcblx0ICB9O1xuXHR9O1xuXG5cdHZhciBhcnJheUluY2x1ZGVzID0ge1xuXHQgIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuXHQgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuXHQgIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG5cdCAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcblx0ICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuXHQgIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcblx0fTtcblxuXHR2YXIgaW5kZXhPZiA9IGFycmF5SW5jbHVkZXMuaW5kZXhPZjtcblxuXG5cblx0dmFyIG9iamVjdEtleXNJbnRlcm5hbCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG5cdCAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcblx0ICB2YXIgaSA9IDA7XG5cdCAgdmFyIHJlc3VsdCA9IFtdO1xuXHQgIHZhciBrZXk7XG5cblx0ICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTsgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuXG5cblx0ICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuXHQgICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcblx0dmFyIGVudW1CdWdLZXlzID0gWydjb25zdHJ1Y3RvcicsICdoYXNPd25Qcm9wZXJ0eScsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXTtcblxuXHR2YXIgaGlkZGVuS2V5cyQxID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7IC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG5cdC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5cblx0dmFyIGYkMyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuXHQgIHJldHVybiBvYmplY3RLZXlzSW50ZXJuYWwoTywgaGlkZGVuS2V5cyQxKTtcblx0fTtcblxuXHR2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyA9IHtcblx0XHRmOiBmJDNcblx0fTtcblxuXHR2YXIgZiQ0ID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXHR2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzID0ge1xuXHRcdGY6IGYkNFxuXHR9O1xuXG5cdC8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcblxuXG5cdHZhciBvd25LZXlzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuXHQgIHZhciBrZXlzID0gb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcy5mKGFuT2JqZWN0KGl0KSk7XG5cdCAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scy5mO1xuXHQgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG5cdH07XG5cblx0dmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0ICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcblx0ICB2YXIgZGVmaW5lUHJvcGVydHkgPSBvYmplY3REZWZpbmVQcm9wZXJ0eS5mO1xuXHQgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZjtcblxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIGtleSA9IGtleXNbaV07XG5cdCAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcblx0ICB9XG5cdH07XG5cblx0dmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxuXHR2YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG5cdCAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuXHQgIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWUgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZSA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbikgOiAhIWRldGVjdGlvbjtcblx0fTtcblxuXHR2YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHQgIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG5cdH07XG5cblx0dmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG5cdHZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG5cdHZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXHR2YXIgaXNGb3JjZWRfMSA9IGlzRm9yY2VkO1xuXG5cdHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mO1xuXG5cblxuXG5cblxuXG5cblxuXG5cdC8qXG5cdCAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3Rcblx0ICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG5cdCAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcblx0ICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuXHQgIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuXHQgIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG5cdCAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG5cdCAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuXHQgIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcblx0ICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuXHQgIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHQgIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG5cdCovXG5cblxuXHR2YXIgX2V4cG9ydCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcblx0ICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG5cdCAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuXHQgIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG5cdCAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcblxuXHQgIGlmIChHTE9CQUwpIHtcblx0ICAgIHRhcmdldCA9IGdsb2JhbF8xO1xuXHQgIH0gZWxzZSBpZiAoU1RBVElDKSB7XG5cdCAgICB0YXJnZXQgPSBnbG9iYWxfMVtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdGFyZ2V0ID0gKGdsb2JhbF8xW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcblx0ICB9XG5cblx0ICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcblx0ICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG5cblx0ICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG5cdCAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSh0YXJnZXQsIGtleSk7XG5cdCAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuXHQgICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG5cblx0ICAgIEZPUkNFRCA9IGlzRm9yY2VkXzEoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTsgLy8gY29udGFpbmVkIGluIHRhcmdldFxuXG5cdCAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG5cdCAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcblx0ICAgIH0gLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuXG5cblx0ICAgIGlmIChvcHRpb25zLnNoYW0gfHwgdGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkge1xuXHQgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG5cdCAgICB9IC8vIGV4dGVuZCBnbG9iYWxcblxuXG5cdCAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuXHQgIH1cblx0fTtcblxuXHQvLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuXG5cblx0dmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcblx0ICByZXR1cm4gb2JqZWN0S2V5c0ludGVybmFsKE8sIGVudW1CdWdLZXlzKTtcblx0fTtcblxuXHQvLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxuXG5cblx0dmFyIHRvT2JqZWN0ID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG5cdCAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG5cdH07XG5cblx0dmFyIG5hdGl2ZUFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cdHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsgLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5cblx0dmFyIG9iamVjdEFzc2lnbiA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuXHQgIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG5cdCAgaWYgKGRlc2NyaXB0b3JzICYmIG5hdGl2ZUFzc2lnbih7XG5cdCAgICBiOiAxXG5cdCAgfSwgbmF0aXZlQXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcblx0ICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG5cdCAgICAgICAgdmFsdWU6IDMsXG5cdCAgICAgICAgZW51bWVyYWJsZTogZmFsc2Vcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSksIHtcblx0ICAgIGI6IDJcblx0ICB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7IC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuXG5cdCAgdmFyIEEgPSB7fTtcblx0ICB2YXIgQiA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblxuXHQgIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcblx0ICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuXHQgIEFbc3ltYm9sXSA9IDc7XG5cdCAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikge1xuXHQgICAgQltjaHJdID0gY2hyO1xuXHQgIH0pO1xuXHQgIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xuXHR9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuXHQgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdCAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgdmFyIGluZGV4ID0gMTtcblx0ICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzLmY7XG5cdCAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUuZjtcblxuXHQgIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuXHQgICAgdmFyIFMgPSBpbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG5cdCAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuXHQgICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXHQgICAgdmFyIGogPSAwO1xuXHQgICAgdmFyIGtleTtcblxuXHQgICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcblx0ICAgICAga2V5ID0ga2V5c1tqKytdO1xuXHQgICAgICBpZiAoIWRlc2NyaXB0b3JzIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBUO1xuXHR9IDogbmF0aXZlQXNzaWduO1xuXG5cdC8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuXG5cblx0X2V4cG9ydCh7XG5cdCAgdGFyZ2V0OiAnT2JqZWN0Jyxcblx0ICBzdGF0OiB0cnVlLFxuXHQgIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gb2JqZWN0QXNzaWduXG5cdH0sIHtcblx0ICBhc3NpZ246IG9iamVjdEFzc2lnblxuXHR9KTtcblxuXHQvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxuXG5cblx0dmFyIHN0cmluZ1JlcGVhdCA9ICcnLnJlcGVhdCB8fCBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcblx0ICB2YXIgc3RyID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuXHQgIHZhciByZXN1bHQgPSAnJztcblx0ICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG5cdCAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG51bWJlciBvZiByZXBldGl0aW9ucycpO1xuXG5cdCAgZm9yICg7IG4gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuXG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxuXG5cblxuXG5cblxuXHR2YXIgY2VpbCQxID0gTWF0aC5jZWlsOyAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxuXG5cdHZhciBjcmVhdGVNZXRob2QkMSA9IGZ1bmN0aW9uIChJU19FTkQpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcblx0ICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcblx0ICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcblx0ICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuXHQgICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG5cdCAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuXHQgICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG5cdCAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuXHQgICAgc3RyaW5nRmlsbGVyID0gc3RyaW5nUmVwZWF0LmNhbGwoZmlsbFN0ciwgY2VpbCQxKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuXHQgICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG5cdCAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG5cdCAgfTtcblx0fTtcblxuXHR2YXIgc3RyaW5nUGFkID0ge1xuXHQgIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcblx0ICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG5cdCAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCQxKGZhbHNlKSxcblx0ICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuXHQgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG5cdCAgZW5kOiBjcmVhdGVNZXRob2QkMSh0cnVlKVxuXHR9O1xuXG5cdHZhciBlbmdpbmVVc2VyQWdlbnQgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuXHQgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdW5zYWZlLXJlZ2V4XG5cblxuXHR2YXIgc3RyaW5nUGFkV2Via2l0QnVnID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KGVuZ2luZVVzZXJBZ2VudCk7XG5cblx0dmFyICRwYWRFbmQgPSBzdHJpbmdQYWQuZW5kO1xuXG5cdCAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuXG5cblx0X2V4cG9ydCh7XG5cdCAgdGFyZ2V0OiAnU3RyaW5nJyxcblx0ICBwcm90bzogdHJ1ZSxcblx0ICBmb3JjZWQ6IHN0cmluZ1BhZFdlYmtpdEJ1Z1xuXHR9LCB7XG5cdCAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoXG5cdCAgLyogLCBmaWxsU3RyaW5nID0gJyAnICovXG5cdCAgKSB7XG5cdCAgICByZXR1cm4gJHBhZEVuZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcblx0ICB9XG5cdH0pO1xuXG5cdHZhciAkcGFkU3RhcnQgPSBzdHJpbmdQYWQuc3RhcnQ7XG5cblx0IC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuXG5cblx0X2V4cG9ydCh7XG5cdCAgdGFyZ2V0OiAnU3RyaW5nJyxcblx0ICBwcm90bzogdHJ1ZSxcblx0ICBmb3JjZWQ6IHN0cmluZ1BhZFdlYmtpdEJ1Z1xuXHR9LCB7XG5cdCAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aFxuXHQgIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqL1xuXHQgICkge1xuXHQgICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcblx0ICB9XG5cdH0pO1xuXG5cdC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kXG5cdC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG5cblxuXHRfZXhwb3J0KHtcblx0ICB0YXJnZXQ6ICdTdHJpbmcnLFxuXHQgIHByb3RvOiB0cnVlXG5cdH0sIHtcblx0ICByZXBlYXQ6IHN0cmluZ1JlcGVhdFxuXHR9KTtcblxuXHQvLyBgZ2xvYmFsVGhpc2Agb2JqZWN0XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxuXG5cblx0X2V4cG9ydCh7XG5cdCAgZ2xvYmFsOiB0cnVlXG5cdH0sIHtcblx0ICBnbG9iYWxUaGlzOiBnbG9iYWxfMVxuXHR9KTtcblxuXHRmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuXHQgIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuXHQgIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuXHQgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcblx0ICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG5cdCAgICB9O1xuXHQgIH0gZWxzZSB7XG5cdCAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIF90eXBlb2Yob2JqKTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcblx0ICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcblx0ICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcblx0ICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcblx0ICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuXHQgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuXHQgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcblx0ICByZXR1cm4gQ29uc3RydWN0b3I7XG5cdH1cblxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG5cdCAgaWYgKGtleSBpbiBvYmopIHtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuXHQgICAgICB2YWx1ZTogdmFsdWUsXG5cdCAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0ICAgICAgd3JpdGFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmpba2V5XSA9IHZhbHVlO1xuXHQgIH1cblxuXHQgIHJldHVybiBvYmo7XG5cdH1cblxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcblx0ICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG5cdCAgfVxuXG5cdCAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG5cdCAgICBjb25zdHJ1Y3Rvcjoge1xuXHQgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG5cdCAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH1cblx0ICB9KTtcblx0ICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG5cdCAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcblx0ICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG5cdCAgfTtcblx0ICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcblx0ICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcblx0ICAgIG8uX19wcm90b19fID0gcDtcblx0ICAgIHJldHVybiBvO1xuXHQgIH07XG5cblx0ICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xuXHR9XG5cblx0ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuXHQgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXHQgIHZhciB0YXJnZXQgPSB7fTtcblx0ICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cdCAgdmFyIGtleSwgaTtcblxuXHQgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuXHQgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcblx0ICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRhcmdldDtcblx0fVxuXG5cdGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG5cdCAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cblx0ICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cblx0ICB2YXIga2V5LCBpO1xuXG5cdCAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0ICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuXHQgICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuXHQgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuXHQgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcblx0ICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG5cdCAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHNlbGY7XG5cdH1cblxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG5cdCAgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG5cdCAgICByZXR1cm4gY2FsbDtcblx0ICB9XG5cblx0ICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcblx0ICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuXHQgICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG5cdCAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcblx0ICB9XG5cblx0ICByZXR1cm4gb2JqZWN0O1xuXHR9XG5cblx0ZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuXHQgIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuXHQgICAgX2dldCA9IFJlZmxlY3QuZ2V0O1xuXHQgIH0gZWxzZSB7XG5cdCAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuXHQgICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG5cdCAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuXHQgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG5cdCAgICAgIGlmIChkZXNjLmdldCkge1xuXHQgICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0JDEodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG5cdCAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3Quc2V0KSB7XG5cdCAgICBzZXQkMSA9IFJlZmxlY3Quc2V0O1xuXHQgIH0gZWxzZSB7XG5cdCAgICBzZXQkMSA9IGZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcblx0ICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcblxuXHQgICAgICB2YXIgZGVzYztcblxuXHQgICAgICBpZiAoYmFzZSkge1xuXHQgICAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcblxuXHQgICAgICAgIGlmIChkZXNjLnNldCkge1xuXHQgICAgICAgICAgZGVzYy5zZXQuY2FsbChyZWNlaXZlciwgdmFsdWUpO1xuXHQgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfSBlbHNlIGlmICghZGVzYy53cml0YWJsZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlY2VpdmVyLCBwcm9wZXJ0eSk7XG5cblx0ICAgICAgaWYgKGRlc2MpIHtcblx0ICAgICAgICBpZiAoIWRlc2Mud3JpdGFibGUpIHtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBkZXNjLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgZGVzYyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgX2RlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgdmFsdWUpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9O1xuXHQgIH1cblxuXHQgIHJldHVybiBzZXQkMSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3NldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIsIGlzU3RyaWN0KSB7XG5cdCAgdmFyIHMgPSBzZXQkMSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcblxuXHQgIGlmICghcyAmJiBpc1N0cmljdCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gc2V0IHByb3BlcnR5Jyk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG5cdCAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcblx0ICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xuXHR9XG5cblx0ZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuXHQgIGlmICghKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cblx0ICB2YXIgX2FyciA9IFtdO1xuXHQgIHZhciBfbiA9IHRydWU7XG5cdCAgdmFyIF9kID0gZmFsc2U7XG5cdCAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG5cdCAgdHJ5IHtcblx0ICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcblx0ICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuXHQgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG5cdCAgICB9XG5cdCAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICBfZCA9IHRydWU7XG5cdCAgICBfZSA9IGVycjtcblx0ICB9IGZpbmFsbHkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gX2Fycjtcblx0fVxuXG5cdGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG5cdCAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG5cdH1cblxuXHQvKiogQ2hlY2tzIGlmIHZhbHVlIGlzIHN0cmluZyAqL1xuXHRmdW5jdGlvbiBpc1N0cmluZyhzdHIpIHtcblx0ICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nO1xuXHR9XG5cdC8qKlxyXG5cdCAgRGlyZWN0aW9uXHJcblx0ICBAcHJvcCB7c3RyaW5nfSBOT05FXHJcblx0ICBAcHJvcCB7c3RyaW5nfSBMRUZUXHJcblx0ICBAcHJvcCB7c3RyaW5nfSBGT1JDRV9MRUZUXHJcblx0ICBAcHJvcCB7c3RyaW5nfSBSSUdIVFxyXG5cdCAgQHByb3Age3N0cmluZ30gRk9SQ0VfUklHSFRcclxuXHQqL1xuXG5cdHZhciBESVJFQ1RJT04gPSB7XG5cdCAgTk9ORTogJ05PTkUnLFxuXHQgIExFRlQ6ICdMRUZUJyxcblx0ICBGT1JDRV9MRUZUOiAnRk9SQ0VfTEVGVCcsXG5cdCAgUklHSFQ6ICdSSUdIVCcsXG5cdCAgRk9SQ0VfUklHSFQ6ICdGT1JDRV9SSUdIVCdcblx0fTtcblx0LyoqICovXG5cblx0ZnVuY3Rpb24gZm9yY2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG5cdCAgc3dpdGNoIChkaXJlY3Rpb24pIHtcblx0ICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XG5cdCAgICAgIHJldHVybiBESVJFQ1RJT04uRk9SQ0VfTEVGVDtcblxuXHQgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG5cdCAgICAgIHJldHVybiBESVJFQ1RJT04uRk9SQ0VfUklHSFQ7XG5cblx0ICAgIGRlZmF1bHQ6XG5cdCAgICAgIHJldHVybiBkaXJlY3Rpb247XG5cdCAgfVxuXHR9XG5cdC8qKiBFc2NhcGVzIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb250cm9sIGNoYXJzICovXG5cblx0ZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xuXHQgIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFtcXF0vXFxcXF0pL2csICdcXFxcJDEnKTtcblx0fSAvLyBjbG9uZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXBvYmVyZXpraW4vZmFzdC1kZWVwLWVxdWFsIHdpdGggc21hbGwgY2hhbmdlc1xuXG5cdGZ1bmN0aW9uIG9iamVjdEluY2x1ZGVzKGIsIGEpIHtcblx0ICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cdCAgdmFyIGFyckEgPSBBcnJheS5pc0FycmF5KGEpLFxuXHQgICAgICBhcnJCID0gQXJyYXkuaXNBcnJheShiKSxcblx0ICAgICAgaTtcblxuXHQgIGlmIChhcnJBICYmIGFyckIpIHtcblx0ICAgIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoIW9iamVjdEluY2x1ZGVzKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblxuXHQgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcblxuXHQgIGlmIChhICYmIGIgJiYgX3R5cGVvZihhKSA9PT0gJ29iamVjdCcgJiYgX3R5cGVvZihiKSA9PT0gJ29iamVjdCcpIHtcblx0ICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlLFxuXHQgICAgICAgIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG5cdCAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblx0ICAgIGlmIChkYXRlQSAhPSBkYXRlQikgcmV0dXJuIGZhbHNlO1xuXHQgICAgdmFyIHJlZ2V4cEEgPSBhIGluc3RhbmNlb2YgUmVnRXhwLFxuXHQgICAgICAgIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuXHQgICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cdCAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGEpOyAvLyBpZiAoa2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG5cdCAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXG5cdCAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoIW9iamVjdEluY2x1ZGVzKGJba2V5c1tpXV0sIGFba2V5c1tpXV0pKSByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH0gZWxzZSBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8qKiBTZWxlY3Rpb24gcmFuZ2UgKi9cblxuXHQvKiogUHJvdmlkZXMgZGV0YWlscyBvZiBjaGFuZ2luZyBpbnB1dCAqL1xuXG5cdHZhciBBY3Rpb25EZXRhaWxzID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqIEN1cnJlbnQgaW5wdXQgdmFsdWUgKi9cblxuXHQgIC8qKiBDdXJyZW50IGN1cnNvciBwb3NpdGlvbiAqL1xuXG5cdCAgLyoqIE9sZCBpbnB1dCB2YWx1ZSAqL1xuXG5cdCAgLyoqIE9sZCBzZWxlY3Rpb24gKi9cblx0ICBmdW5jdGlvbiBBY3Rpb25EZXRhaWxzKHZhbHVlLCBjdXJzb3JQb3MsIG9sZFZhbHVlLCBvbGRTZWxlY3Rpb24pIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY3Rpb25EZXRhaWxzKTtcblxuXHQgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgdGhpcy5jdXJzb3JQb3MgPSBjdXJzb3JQb3M7XG5cdCAgICB0aGlzLm9sZFZhbHVlID0gb2xkVmFsdWU7XG5cdCAgICB0aGlzLm9sZFNlbGVjdGlvbiA9IG9sZFNlbGVjdGlvbjsgLy8gZG91YmxlIGNoZWNrIGlmIGxlZnQgcGFydCB3YXMgY2hhbmdlZCAoYXV0b2ZpbGxpbmcsIG90aGVyIG5vbi1zdGFuZGFyZCBpbnB1dCB0cmlnZ2VycylcblxuXHQgICAgd2hpbGUgKHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5zdGFydENoYW5nZVBvcykgIT09IHRoaXMub2xkVmFsdWUuc2xpY2UoMCwgdGhpcy5zdGFydENoYW5nZVBvcykpIHtcblx0ICAgICAgLS10aGlzLm9sZFNlbGVjdGlvbi5zdGFydDtcblx0ICAgIH1cblx0ICB9XG5cdCAgLyoqXHJcblx0ICAgIFN0YXJ0IGNoYW5naW5nIHBvc2l0aW9uXHJcblx0ICAgIEByZWFkb25seVxyXG5cdCAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKEFjdGlvbkRldGFpbHMsIFt7XG5cdCAgICBrZXk6IFwic3RhcnRDaGFuZ2VQb3NcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5jdXJzb3JQb3MsIHRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0KTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEluc2VydGVkIHN5bWJvbHMgY291bnRcclxuXHQgICAgICBAcmVhZG9ubHlcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpbnNlcnRlZENvdW50XCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zIC0gdGhpcy5zdGFydENoYW5nZVBvcztcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEluc2VydGVkIHN5bWJvbHNcclxuXHQgICAgICBAcmVhZG9ubHlcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpbnNlcnRlZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLmluc2VydGVkQ291bnQpO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgUmVtb3ZlZCBzeW1ib2xzIGNvdW50XHJcblx0ICAgICAgQHJlYWRvbmx5XHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlZENvdW50XCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgLy8gTWF0aC5tYXggZm9yIG9wcG9zaXRlIG9wZXJhdGlvblxuXHQgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5vbGRTZWxlY3Rpb24uZW5kIC0gdGhpcy5zdGFydENoYW5nZVBvcyB8fCAvLyBmb3IgRGVsZXRlXG5cdCAgICAgIHRoaXMub2xkVmFsdWUubGVuZ3RoIC0gdGhpcy52YWx1ZS5sZW5ndGgsIDApO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgUmVtb3ZlZCBzeW1ib2xzXHJcblx0ICAgICAgQHJlYWRvbmx5XHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm9sZFZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLnJlbW92ZWRDb3VudCk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBVbmNoYW5nZWQgaGVhZCBzeW1ib2xzXHJcblx0ICAgICAgQHJlYWRvbmx5XHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaGVhZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cmluZygwLCB0aGlzLnN0YXJ0Q2hhbmdlUG9zKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIFVuY2hhbmdlZCB0YWlsIHN5bWJvbHNcclxuXHQgICAgICBAcmVhZG9ubHlcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0YWlsXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyaW5nKHRoaXMuc3RhcnRDaGFuZ2VQb3MgKyB0aGlzLmluc2VydGVkQ291bnQpO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgUmVtb3ZlIGRpcmVjdGlvblxyXG5cdCAgICAgIEByZWFkb25seVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlbW92ZURpcmVjdGlvblwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGlmICghdGhpcy5yZW1vdmVkQ291bnQgfHwgdGhpcy5pbnNlcnRlZENvdW50KSByZXR1cm4gRElSRUNUSU9OLk5PTkU7IC8vIGFsaWduIHJpZ2h0IGlmIGRlbGV0ZSBhdCByaWdodCBvciBpZiByYW5nZSByZW1vdmVkIChldmVudCB3aXRoIGJhY2tzcGFjZSlcblxuXHQgICAgICByZXR1cm4gdGhpcy5vbGRTZWxlY3Rpb24uZW5kID09PSB0aGlzLmN1cnNvclBvcyB8fCB0aGlzLm9sZFNlbGVjdGlvbi5zdGFydCA9PT0gdGhpcy5jdXJzb3JQb3MgPyBESVJFQ1RJT04uUklHSFQgOiBESVJFQ1RJT04uTEVGVDtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gQWN0aW9uRGV0YWlscztcblx0fSgpO1xuXG5cdC8qKlxyXG5cdCAgUHJvdmlkZXMgZGV0YWlscyBvZiBjaGFuZ2luZyBtb2RlbCB2YWx1ZVxyXG5cdCAgQHBhcmFtIHtPYmplY3R9IFtkZXRhaWxzXVxyXG5cdCAgQHBhcmFtIHtzdHJpbmd9IFtkZXRhaWxzLmluc2VydGVkXSAtIEluc2VydGVkIHN5bWJvbHNcclxuXHQgIEBwYXJhbSB7Ym9vbGVhbn0gW2RldGFpbHMuc2tpcF0gLSBDYW4gc2tpcCBjaGFyc1xyXG5cdCAgQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWxzLnJlbW92ZUNvdW50XSAtIFJlbW92ZWQgc3ltYm9scyBjb3VudFxyXG5cdCAgQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWxzLnRhaWxTaGlmdF0gLSBBZGRpdGlvbmFsIG9mZnNldCBpZiBhbnkgY2hhbmdlcyBvY2N1cnJlZCBiZWZvcmUgdGFpbFxyXG5cdCovXG5cdHZhciBDaGFuZ2VEZXRhaWxzID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqIEluc2VydGVkIHN5bWJvbHMgKi9cblxuXHQgIC8qKiBDYW4gc2tpcCBjaGFycyAqL1xuXG5cdCAgLyoqIEFkZGl0aW9uYWwgb2Zmc2V0IGlmIGFueSBjaGFuZ2VzIG9jY3VycmVkIGJlZm9yZSB0YWlsICovXG5cblx0ICAvKiogUmF3IGluc2VydGVkIGlzIHVzZWQgYnkgZHluYW1pYyBtYXNrICovXG5cdCAgZnVuY3Rpb24gQ2hhbmdlRGV0YWlscyhkZXRhaWxzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbmdlRGV0YWlscyk7XG5cblx0ICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuXHQgICAgICBpbnNlcnRlZDogJycsXG5cdCAgICAgIHJhd0luc2VydGVkOiAnJyxcblx0ICAgICAgc2tpcDogZmFsc2UsXG5cdCAgICAgIHRhaWxTaGlmdDogMFxuXHQgICAgfSwgZGV0YWlscyk7XG5cdCAgfVxuXHQgIC8qKlxyXG5cdCAgICBBZ2dyZWdhdGUgY2hhbmdlc1xyXG5cdCAgICBAcmV0dXJucyB7Q2hhbmdlRGV0YWlsc30gYHRoaXNgXHJcblx0ICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoQ2hhbmdlRGV0YWlscywgW3tcblx0ICAgIGtleTogXCJhZ2dyZWdhdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhZ2dyZWdhdGUoZGV0YWlscykge1xuXHQgICAgICB0aGlzLnJhd0luc2VydGVkICs9IGRldGFpbHMucmF3SW5zZXJ0ZWQ7XG5cdCAgICAgIHRoaXMuc2tpcCA9IHRoaXMuc2tpcCB8fCBkZXRhaWxzLnNraXA7XG5cdCAgICAgIHRoaXMuaW5zZXJ0ZWQgKz0gZGV0YWlscy5pbnNlcnRlZDtcblx0ICAgICAgdGhpcy50YWlsU2hpZnQgKz0gZGV0YWlscy50YWlsU2hpZnQ7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgLyoqIFRvdGFsIG9mZnNldCBjb25zaWRlcmluZyBhbGwgY2hhbmdlcyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm9mZnNldFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRhaWxTaGlmdCArIHRoaXMuaW5zZXJ0ZWQubGVuZ3RoO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBDaGFuZ2VEZXRhaWxzO1xuXHR9KCk7XG5cblx0LyoqIFByb3ZpZGVzIGRldGFpbHMgb2YgY29udGludW91cyBleHRyYWN0ZWQgdGFpbCAqL1xuXHR2YXIgQ29udGludW91c1RhaWxEZXRhaWxzID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqIFRhaWwgdmFsdWUgYXMgc3RyaW5nICovXG5cblx0ICAvKiogVGFpbCBzdGFydCBwb3NpdGlvbiAqL1xuXG5cdCAgLyoqIFN0YXJ0IHBvc2l0aW9uICovXG5cdCAgZnVuY3Rpb24gQ29udGludW91c1RhaWxEZXRhaWxzKCkge1xuXHQgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcblx0ICAgIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXHQgICAgdmFyIHN0b3AgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRpbnVvdXNUYWlsRGV0YWlscyk7XG5cblx0ICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgIHRoaXMuZnJvbSA9IGZyb207XG5cdCAgICB0aGlzLnN0b3AgPSBzdG9wO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhDb250aW51b3VzVGFpbERldGFpbHMsIFt7XG5cdCAgICBrZXk6IFwidG9TdHJpbmdcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImV4dGVuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZCh0YWlsKSB7XG5cdCAgICAgIHRoaXMudmFsdWUgKz0gU3RyaW5nKHRhaWwpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRUb1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRvKG1hc2tlZCkge1xuXHQgICAgICByZXR1cm4gbWFza2VkLmFwcGVuZCh0aGlzLnRvU3RyaW5nKCksIHtcblx0ICAgICAgICB0YWlsOiB0cnVlXG5cdCAgICAgIH0pLmFnZ3JlZ2F0ZShtYXNrZWQuX2FwcGVuZFBsYWNlaG9sZGVyKCkpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzaGlmdEJlZm9yZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0QmVmb3JlKHBvcykge1xuXHQgICAgICBpZiAodGhpcy5mcm9tID49IHBvcyB8fCAhdGhpcy52YWx1ZS5sZW5ndGgpIHJldHVybiAnJztcblx0ICAgICAgdmFyIHNoaWZ0Q2hhciA9IHRoaXMudmFsdWVbMF07XG5cdCAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnNsaWNlKDEpO1xuXHQgICAgICByZXR1cm4gc2hpZnRDaGFyO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzdGF0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG5cdCAgICAgICAgZnJvbTogdGhpcy5mcm9tLFxuXHQgICAgICAgIHN0b3A6IHRoaXMuc3RvcFxuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XG5cdCAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3RhdGUpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBDb250aW51b3VzVGFpbERldGFpbHM7XG5cdH0oKTtcblxuXHQvKipcclxuXHQgKiBBcHBsaWVzIG1hc2sgb24gZWxlbWVudC5cclxuXHQgKiBAY29uc3RydWN0b3JcclxuXHQgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR8SFRNTFRleHRBcmVhRWxlbWVudHxNYXNrRWxlbWVudH0gZWwgLSBFbGVtZW50IHRvIGFwcGx5IG1hc2tcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIEN1c3RvbSBtYXNrIG9wdGlvbnNcclxuXHQgKiBAcmV0dXJuIHtJbnB1dE1hc2t9XHJcblx0ICovXG5cdGZ1bmN0aW9uIElNYXNrKGVsKSB7XG5cdCAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgIC8vIGN1cnJlbnRseSBhdmFpbGFibGUgb25seSBmb3IgaW5wdXQtbGlrZSBlbGVtZW50c1xuXHQgIHJldHVybiBuZXcgSU1hc2suSW5wdXRNYXNrKGVsLCBvcHRzKTtcblx0fVxuXG5cdC8qKiBTdXBwb3J0ZWQgbWFzayB0eXBlICovXG5cblx0LyoqIFByb3ZpZGVzIGNvbW1vbiBtYXNraW5nIHN0dWZmICovXG5cdHZhciBNYXNrZWQgPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uICgpIHtcblx0ICAvLyAkU2hhcGU8TWFza2VkT3B0aW9ucz47IFRPRE8gYWZ0ZXIgZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80NzczXG5cblx0ICAvKiogQHR5cGUge01hc2t9ICovXG5cblx0ICAvKiogKi9cblx0ICAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXG5cblx0ICAvKiogVHJhbnNmb3JtcyB2YWx1ZSBiZWZvcmUgbWFzayBwcm9jZXNzaW5nICovXG5cblx0ICAvKiogVmFsaWRhdGVzIGlmIHZhbHVlIGlzIGFjY2VwdGFibGUgKi9cblxuXHQgIC8qKiBEb2VzIGFkZGl0aW9uYWwgcHJvY2Vzc2luZyBpbiB0aGUgZW5kIG9mIGVkaXRpbmcgKi9cblxuXHQgIC8qKiBGb3JtYXQgdHlwZWQgdmFsdWUgdG8gc3RyaW5nICovXG5cblx0ICAvKiogUGFyc2Ugc3RyZ2luIHRvIGdldCB0eXBlZCB2YWx1ZSAqL1xuXG5cdCAgLyoqIEVuYWJsZSBjaGFyYWN0ZXJzIG92ZXJ3cml0aW5nICovXG5cblx0ICAvKiogKi9cblx0ICBmdW5jdGlvbiBNYXNrZWQob3B0cykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZCk7XG5cblx0ICAgIHRoaXMuX3ZhbHVlID0gJyc7XG5cblx0ICAgIHRoaXMuX3VwZGF0ZShPYmplY3QuYXNzaWduKHt9LCBNYXNrZWQuREVGQVVMVFMsIHt9LCBvcHRzKSk7XG5cblx0ICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG5cdCAgfVxuXHQgIC8qKiBTZXRzIGFuZCBhcHBsaWVzIG5ldyBvcHRpb25zICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyhNYXNrZWQsIFt7XG5cdCAgICBrZXk6IFwidXBkYXRlT3B0aW9uc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuXHQgICAgICBpZiAoIU9iamVjdC5rZXlzKG9wdHMpLmxlbmd0aCkgcmV0dXJuO1xuXHQgICAgICB0aGlzLndpdGhWYWx1ZVJlZnJlc2godGhpcy5fdXBkYXRlLmJpbmQodGhpcywgb3B0cykpO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgU2V0cyBuZXcgb3B0aW9uc1xyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgICAvKiogTWFzayBzdGF0ZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlc2V0XCIsXG5cblx0ICAgIC8qKiBSZXNldHMgdmFsdWUgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgdGhpcy5fdmFsdWUgPSAnJztcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlc29sdmVcIixcblxuXHQgICAgLyoqIFJlc29sdmUgbmV3IHZhbHVlICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuXHQgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLCB7XG5cdCAgICAgICAgaW5wdXQ6IHRydWVcblx0ICAgICAgfSwgJycpO1xuXHQgICAgICB0aGlzLmRvQ29tbWl0KCk7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXG5cblx0ICAgIC8qKiBGaW5kcyBuZWFyZXN0IGlucHV0IHBvc2l0aW9uIGluIGRpcmVjdGlvbiAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIGRpcmVjdGlvbikge1xuXHQgICAgICByZXR1cm4gY3Vyc29yUG9zO1xuXHQgICAgfVxuXHQgICAgLyoqIEV4dHJhY3RzIHZhbHVlIGluIHJhbmdlIGNvbnNpZGVyaW5nIGZsYWdzICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdElucHV0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc2xpY2UoZnJvbVBvcywgdG9Qb3MpO1xuXHQgICAgfVxuXHQgICAgLyoqIEV4dHJhY3RzIHRhaWwgaW4gcmFuZ2UgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgcmV0dXJuIG5ldyBDb250aW51b3VzVGFpbERldGFpbHModGhpcy5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MpLCBmcm9tUG9zKTtcblx0ICAgIH1cblx0ICAgIC8qKiBBcHBlbmRzIHRhaWwgKi9cblx0ICAgIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVGFpbCh0YWlsKSB7XG5cdCAgICAgIGlmIChpc1N0cmluZyh0YWlsKSkgdGFpbCA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWwpKTtcblx0ICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XG5cdCAgICB9XG5cdCAgICAvKiogQXBwZW5kcyBjaGFyICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJSYXdcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgICAgICBjaCA9IHRoaXMuZG9QcmVwYXJlKGNoLCBmbGFncyk7XG5cdCAgICAgIGlmICghY2gpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICB0aGlzLl92YWx1ZSArPSBjaDtcblx0ICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKHtcblx0ICAgICAgICBpbnNlcnRlZDogY2gsXG5cdCAgICAgICAgcmF3SW5zZXJ0ZWQ6IGNoXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqIEFwcGVuZHMgY2hhciAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRDaGFyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZENoYXIoY2gpIHtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgdmFyIGNoZWNrVGFpbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuXHQgICAgICB2YXIgY29uc2lzdGVudFN0YXRlID0gdGhpcy5zdGF0ZTtcblxuXHQgICAgICB2YXIgZGV0YWlscyA9IHRoaXMuX2FwcGVuZENoYXJSYXcoY2gsIGZsYWdzKTtcblxuXHQgICAgICBpZiAoZGV0YWlscy5pbnNlcnRlZCkge1xuXHQgICAgICAgIHZhciBjb25zaXN0ZW50VGFpbDtcblx0ICAgICAgICB2YXIgYXBwZW5kZWQgPSB0aGlzLmRvVmFsaWRhdGUoZmxhZ3MpICE9PSBmYWxzZTtcblxuXHQgICAgICAgIGlmIChhcHBlbmRlZCAmJiBjaGVja1RhaWwgIT0gbnVsbCkge1xuXHQgICAgICAgICAgLy8gdmFsaWRhdGlvbiBvaywgY2hlY2sgdGFpbFxuXHQgICAgICAgICAgdmFyIGJlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XG5cblx0ICAgICAgICAgIGlmICh0aGlzLm92ZXJ3cml0ZSkge1xuXHQgICAgICAgICAgICBjb25zaXN0ZW50VGFpbCA9IGNoZWNrVGFpbC5zdGF0ZTtcblx0ICAgICAgICAgICAgY2hlY2tUYWlsLnNoaWZ0QmVmb3JlKHRoaXMudmFsdWUubGVuZ3RoKTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgdmFyIHRhaWxEZXRhaWxzID0gdGhpcy5hcHBlbmRUYWlsKGNoZWNrVGFpbCk7XG5cdCAgICAgICAgICBhcHBlbmRlZCA9IHRhaWxEZXRhaWxzLnJhd0luc2VydGVkID09PSBjaGVja1RhaWwudG9TdHJpbmcoKTsgLy8gaWYgb2ssIHJvbGxiYWNrIHN0YXRlIGFmdGVyIHRhaWxcblxuXHQgICAgICAgICAgaWYgKGFwcGVuZGVkICYmIHRhaWxEZXRhaWxzLmluc2VydGVkKSB0aGlzLnN0YXRlID0gYmVmb3JlVGFpbFN0YXRlO1xuXHQgICAgICAgIH0gLy8gcmV2ZXJ0IGFsbCBpZiBzb21ldGhpbmcgd2VudCB3cm9uZ1xuXG5cblx0ICAgICAgICBpZiAoIWFwcGVuZGVkKSB7XG5cdCAgICAgICAgICBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgICAgIHRoaXMuc3RhdGUgPSBjb25zaXN0ZW50U3RhdGU7XG5cdCAgICAgICAgICBpZiAoY2hlY2tUYWlsICYmIGNvbnNpc3RlbnRUYWlsKSBjaGVja1RhaWwuc3RhdGUgPSBjb25zaXN0ZW50VGFpbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gZGV0YWlscztcblx0ICAgIH1cblx0ICAgIC8qKiBBcHBlbmRzIG9wdGlvbmFsIHBsYWNlaG9sZGVyIGF0IGVuZCAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICB9XG5cdCAgICAvKiogQXBwZW5kcyBzeW1ib2xzIGNvbnNpZGVyaW5nIGZsYWdzICovXG5cdCAgICAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYXBwZW5kXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kKHN0ciwgZmxhZ3MsIHRhaWwpIHtcblx0ICAgICAgaWYgKCFpc1N0cmluZyhzdHIpKSB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIHNob3VsZCBiZSBzdHJpbmcnKTtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICB2YXIgY2hlY2tUYWlsID0gaXNTdHJpbmcodGFpbCkgPyBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsKSkgOiB0YWlsO1xuXHQgICAgICBpZiAoZmxhZ3MudGFpbCkgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XG5cblx0ICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IHN0ci5sZW5ndGg7ICsrY2kpIHtcblx0ICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLl9hcHBlbmRDaGFyKHN0cltjaV0sIGZsYWdzLCBjaGVja1RhaWwpKTtcblx0ICAgICAgfSAvLyBhcHBlbmQgdGFpbCBidXQgYWdncmVnYXRlIG9ubHkgdGFpbFNoaWZ0XG5cblxuXHQgICAgICBpZiAoY2hlY2tUYWlsICE9IG51bGwpIHtcblx0ICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSB0aGlzLmFwcGVuZFRhaWwoY2hlY2tUYWlsKS50YWlsU2hpZnQ7IC8vIFRPRE8gaXQncyBhIGdvb2QgaWRlYSB0byBjbGVhciBzdGF0ZSBhZnRlciBhcHBlbmRpbmcgZW5kc1xuXHQgICAgICAgIC8vIGJ1dCBpdCBjYXVzZXMgYnVncyB3aGVuIG9uZSBhcHBlbmQgY2FsbHMgYW5vdGhlciAod2hlbiBkeW5hbWljIGRpc3BhdGNoIHNldCByYXdJbnB1dFZhbHVlKVxuXHQgICAgICAgIC8vIHRoaXMuX3Jlc2V0QmVmb3JlVGFpbFN0YXRlKCk7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gZGV0YWlscztcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlbW92ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy52YWx1ZS5zbGljZSgwLCBmcm9tUG9zKSArIHRoaXMudmFsdWUuc2xpY2UodG9Qb3MpO1xuXHQgICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgIH1cblx0ICAgIC8qKiBDYWxscyBmdW5jdGlvbiBhbmQgcmVhcHBsaWVzIGN1cnJlbnQgdmFsdWUgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ3aXRoVmFsdWVSZWZyZXNoXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gd2l0aFZhbHVlUmVmcmVzaChmbikge1xuXHQgICAgICBpZiAodGhpcy5fcmVmcmVzaGluZyB8fCAhdGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm4gZm4oKTtcblx0ICAgICAgdGhpcy5fcmVmcmVzaGluZyA9IHRydWU7XG5cdCAgICAgIHZhciByYXdJbnB1dCA9IHRoaXMucmF3SW5wdXRWYWx1ZTtcblx0ICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcblx0ICAgICAgdmFyIHJldCA9IGZuKCk7XG5cdCAgICAgIHRoaXMucmF3SW5wdXRWYWx1ZSA9IHJhd0lucHV0OyAvLyBhcHBlbmQgbG9zdCB0cmFpbGluZyBjaGFycyBhdCBlbmRcblxuXHQgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gdmFsdWUgJiYgdmFsdWUuaW5kZXhPZih0aGlzLnZhbHVlKSA9PT0gMCkge1xuXHQgICAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLnNsaWNlKHRoaXMudmFsdWUubGVuZ3RoKSwge30sICcnKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGRlbGV0ZSB0aGlzLl9yZWZyZXNoaW5nO1xuXHQgICAgICByZXR1cm4gcmV0O1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicnVuSXNvbGF0ZWRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBydW5Jc29sYXRlZChmbikge1xuXHQgICAgICBpZiAodGhpcy5faXNvbGF0ZWQgfHwgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZuKHRoaXMpO1xuXHQgICAgICB0aGlzLl9pc29sYXRlZCA9IHRydWU7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cdCAgICAgIHZhciByZXQgPSBmbih0aGlzKTtcblx0ICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHQgICAgICBkZWxldGUgdGhpcy5faXNvbGF0ZWQ7XG5cdCAgICAgIHJldHVybiByZXQ7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBQcmVwYXJlcyBzdHJpbmcgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZ1xyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ByZXBhcmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ByZXBhcmUoc3RyKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgICAgIHJldHVybiB0aGlzLnByZXBhcmUgPyB0aGlzLnByZXBhcmUoc3RyLCB0aGlzLCBmbGFncykgOiBzdHI7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBWYWxpZGF0ZXMgaWYgdmFsdWUgaXMgYWNjZXB0YWJsZVxyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZShmbGFncykge1xuXHQgICAgICByZXR1cm4gKCF0aGlzLnZhbGlkYXRlIHx8IHRoaXMudmFsaWRhdGUodGhpcy52YWx1ZSwgdGhpcywgZmxhZ3MpKSAmJiAoIXRoaXMucGFyZW50IHx8IHRoaXMucGFyZW50LmRvVmFsaWRhdGUoZmxhZ3MpKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIERvZXMgYWRkaXRpb25hbCBwcm9jZXNzaW5nIGluIHRoZSBlbmQgb2YgZWRpdGluZ1xyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0NvbW1pdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuXHQgICAgICBpZiAodGhpcy5jb21taXQpIHRoaXMuY29tbWl0KHRoaXMudmFsdWUsIHRoaXMpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9Gb3JtYXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb0Zvcm1hdCh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPyB0aGlzLmZvcm1hdCh2YWx1ZSwgdGhpcykgOiB2YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvUGFyc2VcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1BhcnNlKHN0cikge1xuXHQgICAgICByZXR1cm4gdGhpcy5wYXJzZSA/IHRoaXMucGFyc2Uoc3RyLCB0aGlzKSA6IHN0cjtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInNwbGljZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGluc2VydGVkLCByZW1vdmVEaXJlY3Rpb24pIHtcblx0ICAgICAgdmFyIHRhaWxQb3MgPSBzdGFydCArIGRlbGV0ZUNvdW50O1xuXHQgICAgICB2YXIgdGFpbCA9IHRoaXMuZXh0cmFjdFRhaWwodGFpbFBvcyk7XG5cdCAgICAgIHZhciBzdGFydENoYW5nZVBvcyA9IHRoaXMubmVhcmVzdElucHV0UG9zKHN0YXJ0LCByZW1vdmVEaXJlY3Rpb24pO1xuXHQgICAgICB2YXIgY2hhbmdlRGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKHtcblx0ICAgICAgICB0YWlsU2hpZnQ6IHN0YXJ0Q2hhbmdlUG9zIC0gc3RhcnQgLy8gYWRqdXN0IHRhaWxTaGlmdCBpZiBzdGFydCB3YXMgYWxpZ25lZFxuXG5cdCAgICAgIH0pLmFnZ3JlZ2F0ZSh0aGlzLnJlbW92ZShzdGFydENoYW5nZVBvcykpLmFnZ3JlZ2F0ZSh0aGlzLmFwcGVuZChpbnNlcnRlZCwge1xuXHQgICAgICAgIGlucHV0OiB0cnVlXG5cdCAgICAgIH0sIHRhaWwpKTtcblx0ICAgICAgcmV0dXJuIGNoYW5nZURldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBfdmFsdWU6IHRoaXMudmFsdWVcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IHN0YXRlLl92YWx1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgdGhpcy5yZXNvbHZlKHZhbHVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgdGhpcy5hcHBlbmQodmFsdWUsIHt9LCAnJyk7XG5cdCAgICAgIHRoaXMuZG9Db21taXQoKTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInR5cGVkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5kb1BhcnNlKHRoaXMudmFsdWUpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmRvRm9ybWF0KHZhbHVlKTtcblx0ICAgIH1cblx0ICAgIC8qKiBWYWx1ZSB0aGF0IGluY2x1ZGVzIHJhdyB1c2VyIGlucHV0ICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmF3SW5wdXRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmV4dHJhY3RJbnB1dCgwLCB0aGlzLnZhbHVlLmxlbmd0aCwge1xuXHQgICAgICAgIHJhdzogdHJ1ZVxuXHQgICAgICB9KTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLCB7XG5cdCAgICAgICAgcmF3OiB0cnVlXG5cdCAgICAgIH0sICcnKTtcblx0ICAgICAgdGhpcy5kb0NvbW1pdCgpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrZWQ7XG5cdH0oKTtcblx0TWFza2VkLkRFRkFVTFRTID0ge1xuXHQgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KHYpIHtcblx0ICAgIHJldHVybiB2O1xuXHQgIH0sXG5cdCAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHYpIHtcblx0ICAgIHJldHVybiB2O1xuXHQgIH1cblx0fTtcblx0SU1hc2suTWFza2VkID0gTWFza2VkO1xuXG5cdC8qKiBHZXQgTWFza2VkIGNsYXNzIGJ5IG1hc2sgdHlwZSAqL1xuXG5cdGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2spIHtcblx0ICBpZiAobWFzayA9PSBudWxsKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ21hc2sgcHJvcGVydHkgc2hvdWxkIGJlIGRlZmluZWQnKTtcblx0ICB9IC8vICRGbG93Rml4TWVcblxuXG5cdCAgaWYgKG1hc2sgaW5zdGFuY2VvZiBSZWdFeHApIHJldHVybiBJTWFzay5NYXNrZWRSZWdFeHA7IC8vICRGbG93Rml4TWVcblxuXHQgIGlmIChpc1N0cmluZyhtYXNrKSkgcmV0dXJuIElNYXNrLk1hc2tlZFBhdHRlcm47IC8vICRGbG93Rml4TWVcblxuXHQgIGlmIChtYXNrIGluc3RhbmNlb2YgRGF0ZSB8fCBtYXNrID09PSBEYXRlKSByZXR1cm4gSU1hc2suTWFza2VkRGF0ZTsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgaWYgKG1hc2sgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdHlwZW9mIG1hc2sgPT09ICdudW1iZXInIHx8IG1hc2sgPT09IE51bWJlcikgcmV0dXJuIElNYXNrLk1hc2tlZE51bWJlcjsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgaWYgKEFycmF5LmlzQXJyYXkobWFzaykgfHwgbWFzayA9PT0gQXJyYXkpIHJldHVybiBJTWFzay5NYXNrZWREeW5hbWljOyAvLyAkRmxvd0ZpeE1lXG5cblx0ICBpZiAoSU1hc2suTWFza2VkICYmIG1hc2sucHJvdG90eXBlIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzazsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgaWYgKG1hc2sgaW5zdGFuY2VvZiBGdW5jdGlvbikgcmV0dXJuIElNYXNrLk1hc2tlZEZ1bmN0aW9uOyAvLyAkRmxvd0ZpeE1lXG5cblx0ICBpZiAobWFzayBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgcmV0dXJuIG1hc2suY29uc3RydWN0b3I7XG5cdCAgY29uc29sZS53YXJuKCdNYXNrIG5vdCBmb3VuZCBmb3IgbWFzaycsIG1hc2spOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblx0ICAvLyAkRmxvd0ZpeE1lXG5cblx0ICByZXR1cm4gSU1hc2suTWFza2VkO1xuXHR9XG5cdC8qKiBDcmVhdGVzIG5ldyB7QGxpbmsgTWFza2VkfSBkZXBlbmRpbmcgb24gbWFzayB0eXBlICovXG5cblx0ZnVuY3Rpb24gY3JlYXRlTWFzayhvcHRzKSB7XG5cdCAgLy8gJEZsb3dGaXhNZVxuXHQgIGlmIChJTWFzay5NYXNrZWQgJiYgb3B0cyBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgcmV0dXJuIG9wdHM7XG5cdCAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpO1xuXHQgIHZhciBtYXNrID0gb3B0cy5tYXNrOyAvLyAkRmxvd0ZpeE1lXG5cblx0ICBpZiAoSU1hc2suTWFza2VkICYmIG1hc2sgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpIHJldHVybiBtYXNrO1xuXHQgIHZhciBNYXNrZWRDbGFzcyA9IG1hc2tlZENsYXNzKG1hc2spO1xuXHQgIGlmICghTWFza2VkQ2xhc3MpIHRocm93IG5ldyBFcnJvcignTWFza2VkIGNsYXNzIGlzIG5vdCBmb3VuZCBmb3IgcHJvdmlkZWQgbWFzaywgYXBwcm9wcmlhdGUgbW9kdWxlIG5lZWRzIHRvIGJlIGltcG9ydCBtYW51YWxseSBiZWZvcmUgY3JlYXRpbmcgbWFzay4nKTtcblx0ICByZXR1cm4gbmV3IE1hc2tlZENsYXNzKG9wdHMpO1xuXHR9XG5cdElNYXNrLmNyZWF0ZU1hc2sgPSBjcmVhdGVNYXNrO1xuXG5cdHZhciBERUZBVUxUX0lOUFVUX0RFRklOSVRJT05TID0ge1xuXHQgICcwJzogL1xcZC8sXG5cdCAgJ2EnOiAvW1xcdTAwNDEtXFx1MDA1QVxcdTAwNjEtXFx1MDA3QVxcdTAwQUFcXHUwMEI1XFx1MDBCQVxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMFxcdTA4QTItXFx1MDhBQ1xcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdGXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzNEXFx1MEM1OFxcdTBDNTlcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ2MFxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFDXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlDMS1cXHUxOUM3XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OTdcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3OEVcXHVBNzkwLVxcdUE3OTNcXHVBN0EwLVxcdUE3QUFcXHVBN0Y4LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTgwLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ10vLFxuXHQgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyMDc1MDcwXG5cdCAgJyonOiAvLi9cblx0fTtcblx0LyoqICovXG5cblx0dmFyIFBhdHRlcm5JbnB1dERlZmluaXRpb24gPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uICgpIHtcblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqICovXG5cdCAgZnVuY3Rpb24gUGF0dGVybklucHV0RGVmaW5pdGlvbihvcHRzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF0dGVybklucHV0RGVmaW5pdGlvbik7XG5cblx0ICAgIHZhciBtYXNrID0gb3B0cy5tYXNrLFxuXHQgICAgICAgIGJsb2NrT3B0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRzLCBbXCJtYXNrXCJdKTtcblxuXHQgICAgdGhpcy5tYXNrZWQgPSBjcmVhdGVNYXNrKHtcblx0ICAgICAgbWFzazogbWFza1xuXHQgICAgfSk7XG5cdCAgICBPYmplY3QuYXNzaWduKHRoaXMsIGJsb2NrT3B0cyk7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKFBhdHRlcm5JbnB1dERlZmluaXRpb24sIFt7XG5cdCAgICBrZXk6IFwicmVzZXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgdGhpcy5faXNGaWxsZWQgPSBmYWxzZTtcblx0ICAgICAgdGhpcy5tYXNrZWQucmVzZXQoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblxuXHQgICAgICBpZiAoZnJvbVBvcyA9PT0gMCAmJiB0b1BvcyA+PSAxKSB7XG5cdCAgICAgICAgdGhpcy5faXNGaWxsZWQgPSBmYWxzZTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5tYXNrZWQucmVtb3ZlKGZyb21Qb3MsIHRvUG9zKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kQ2hhclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyKHN0cikge1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgICAgICBpZiAodGhpcy5faXNGaWxsZWQpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLm1hc2tlZC5zdGF0ZTsgLy8gc2ltdWxhdGUgaW5wdXRcblxuXHQgICAgICB2YXIgZGV0YWlscyA9IHRoaXMubWFza2VkLl9hcHBlbmRDaGFyKHN0ciwgZmxhZ3MpO1xuXG5cdCAgICAgIGlmIChkZXRhaWxzLmluc2VydGVkICYmIHRoaXMuZG9WYWxpZGF0ZShmbGFncykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgZGV0YWlscy5pbnNlcnRlZCA9IGRldGFpbHMucmF3SW5zZXJ0ZWQgPSAnJztcblx0ICAgICAgICB0aGlzLm1hc2tlZC5zdGF0ZSA9IHN0YXRlO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKCFkZXRhaWxzLmluc2VydGVkICYmICF0aGlzLmlzT3B0aW9uYWwgJiYgIXRoaXMubGF6eSAmJiAhZmxhZ3MuaW5wdXQpIHtcblx0ICAgICAgICBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5wbGFjZWhvbGRlckNoYXI7XG5cdCAgICAgIH1cblxuXHQgICAgICBkZXRhaWxzLnNraXAgPSAhZGV0YWlscy5pbnNlcnRlZCAmJiAhdGhpcy5pc09wdGlvbmFsO1xuXHQgICAgICB0aGlzLl9pc0ZpbGxlZCA9IEJvb2xlYW4oZGV0YWlscy5pbnNlcnRlZCk7XG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG5cdCAgICAgIHZhciBfdGhpcyRtYXNrZWQ7XG5cblx0ICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQgPSB0aGlzLm1hc2tlZCkuYXBwZW5kLmFwcGx5KF90aGlzJG1hc2tlZCwgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZFBsYWNlaG9sZGVyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZFBsYWNlaG9sZGVyKCkge1xuXHQgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICAgIGlmICh0aGlzLl9pc0ZpbGxlZCB8fCB0aGlzLmlzT3B0aW9uYWwpIHJldHVybiBkZXRhaWxzO1xuXHQgICAgICB0aGlzLl9pc0ZpbGxlZCA9IHRydWU7XG5cdCAgICAgIGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLnBsYWNlaG9sZGVyQ2hhcjtcblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImV4dHJhY3RUYWlsXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdFRhaWwoKSB7XG5cdCAgICAgIHZhciBfdGhpcyRtYXNrZWQyO1xuXG5cdCAgICAgIHJldHVybiAoX3RoaXMkbWFza2VkMiA9IHRoaXMubWFza2VkKS5leHRyYWN0VGFpbC5hcHBseShfdGhpcyRtYXNrZWQyLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVGFpbCgpIHtcblx0ICAgICAgdmFyIF90aGlzJG1hc2tlZDM7XG5cblx0ICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQzID0gdGhpcy5tYXNrZWQpLmFwcGVuZFRhaWwuYXBwbHkoX3RoaXMkbWFza2VkMywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdElucHV0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cdCAgICAgIHJldHVybiB0aGlzLm1hc2tlZC5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcykge1xuXHQgICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBESVJFQ1RJT04uTk9ORTtcblx0ICAgICAgdmFyIG1pblBvcyA9IDA7XG5cdCAgICAgIHZhciBtYXhQb3MgPSB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGJvdW5kUG9zID0gTWF0aC5taW4oTWF0aC5tYXgoY3Vyc29yUG9zLCBtaW5Qb3MpLCBtYXhQb3MpO1xuXG5cdCAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuXHQgICAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZSA/IGJvdW5kUG9zIDogbWluUG9zO1xuXG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlID8gYm91bmRQb3MgOiBtYXhQb3M7XG5cblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5OT05FOlxuXHQgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICByZXR1cm4gYm91bmRQb3M7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9WYWxpZGF0ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XG5cdCAgICAgIHZhciBfdGhpcyRtYXNrZWQ0LCBfdGhpcyRwYXJlbnQ7XG5cblx0ICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQ0ID0gdGhpcy5tYXNrZWQpLmRvVmFsaWRhdGUuYXBwbHkoX3RoaXMkbWFza2VkNCwgYXJndW1lbnRzKSAmJiAoIXRoaXMucGFyZW50IHx8IChfdGhpcyRwYXJlbnQgPSB0aGlzLnBhcmVudCkuZG9WYWxpZGF0ZS5hcHBseShfdGhpcyRwYXJlbnQsIGFyZ3VtZW50cykpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0NvbW1pdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuXHQgICAgICB0aGlzLm1hc2tlZC5kb0NvbW1pdCgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ2YWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm1hc2tlZC52YWx1ZSB8fCAodGhpcy5faXNGaWxsZWQgJiYgIXRoaXMuaXNPcHRpb25hbCA/IHRoaXMucGxhY2Vob2xkZXJDaGFyIDogJycpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImlzQ29tcGxldGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLm1hc2tlZC52YWx1ZSkgfHwgdGhpcy5pc09wdGlvbmFsO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzdGF0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgbWFza2VkOiB0aGlzLm1hc2tlZC5zdGF0ZSxcblx0ICAgICAgICBfaXNGaWxsZWQ6IHRoaXMuX2lzRmlsbGVkXG5cdCAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcblx0ICAgICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZS5tYXNrZWQ7XG5cdCAgICAgIHRoaXMuX2lzRmlsbGVkID0gc3RhdGUuX2lzRmlsbGVkO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBQYXR0ZXJuSW5wdXREZWZpbml0aW9uO1xuXHR9KCk7XG5cblx0dmFyIFBhdHRlcm5GaXhlZERlZmluaXRpb24gPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uICgpIHtcblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKiogKi9cblx0ICBmdW5jdGlvbiBQYXR0ZXJuRml4ZWREZWZpbml0aW9uKG9wdHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXR0ZXJuRml4ZWREZWZpbml0aW9uKTtcblxuXHQgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcblx0ICAgIHRoaXMuX3ZhbHVlID0gJyc7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKFBhdHRlcm5GaXhlZERlZmluaXRpb24sIFt7XG5cdCAgICBrZXk6IFwicmVzZXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgdGhpcy5faXNSYXdJbnB1dCA9IGZhbHNlO1xuXHQgICAgICB0aGlzLl92YWx1ZSA9ICcnO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuX3ZhbHVlLmxlbmd0aDtcblx0ICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl92YWx1ZS5zbGljZSgwLCBmcm9tUG9zKSArIHRoaXMuX3ZhbHVlLnNsaWNlKHRvUG9zKTtcblx0ICAgICAgaWYgKCF0aGlzLl92YWx1ZSkgdGhpcy5faXNSYXdJbnB1dCA9IGZhbHNlO1xuXHQgICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcykge1xuXHQgICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBESVJFQ1RJT04uTk9ORTtcblx0ICAgICAgdmFyIG1pblBvcyA9IDA7XG5cdCAgICAgIHZhciBtYXhQb3MgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XG5cblx0ICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX0xFRlQ6XG5cdCAgICAgICAgICByZXR1cm4gbWluUG9zO1xuXG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uTk9ORTpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9SSUdIVDpcblx0ICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgcmV0dXJuIG1heFBvcztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuX3ZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0ICAgICAgcmV0dXJuIGZsYWdzLnJhdyAmJiB0aGlzLl9pc1Jhd0lucHV0ICYmIHRoaXMuX3ZhbHVlLnNsaWNlKGZyb21Qb3MsIHRvUG9zKSB8fCAnJztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihzdHIpIHtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xuXHQgICAgICB2YXIgYXBwZW5kZWQgPSB0aGlzLmNoYXIgPT09IHN0clswXTtcblx0ICAgICAgdmFyIGlzUmVzb2x2ZWQgPSBhcHBlbmRlZCAmJiAodGhpcy5pc1VubWFza2luZyB8fCBmbGFncy5pbnB1dCB8fCBmbGFncy5yYXcpICYmICFmbGFncy50YWlsO1xuXHQgICAgICBpZiAoaXNSZXNvbHZlZCkgZGV0YWlscy5yYXdJbnNlcnRlZCA9IHRoaXMuY2hhcjtcblx0ICAgICAgdGhpcy5fdmFsdWUgPSBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5jaGFyO1xuXHQgICAgICB0aGlzLl9pc1Jhd0lucHV0ID0gaXNSZXNvbHZlZCAmJiAoZmxhZ3MucmF3IHx8IGZsYWdzLmlucHV0KTtcblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLmNoYXI7XG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICByZXR1cm4gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscygnJyk7XG5cdCAgICB9IC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVGFpbCh0YWlsKSB7XG5cdCAgICAgIGlmIChpc1N0cmluZyh0YWlsKSkgdGFpbCA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWwpKTtcblx0ICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZChzdHIsIGZsYWdzLCB0YWlsKSB7XG5cdCAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5fYXBwZW5kQ2hhcihzdHIsIGZsYWdzKTtcblxuXHQgICAgICBpZiAodGFpbCAhPSBudWxsKSB7XG5cdCAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5hcHBlbmRUYWlsKHRhaWwpLnRhaWxTaGlmdDtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0NvbW1pdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge31cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5pc1VubWFza2luZyA/IHRoaXMudmFsdWUgOiAnJztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzdGF0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgX3ZhbHVlOiB0aGlzLl92YWx1ZSxcblx0ICAgICAgICBfaXNSYXdJbnB1dDogdGhpcy5faXNSYXdJbnB1dFxuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XG5cdCAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3RhdGUpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBQYXR0ZXJuRml4ZWREZWZpbml0aW9uO1xuXHR9KCk7XG5cblx0dmFyIENodW5rc1RhaWxEZXRhaWxzID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqICovXG5cdCAgZnVuY3Rpb24gQ2h1bmtzVGFpbERldGFpbHMoKSB7XG5cdCAgICB2YXIgY2h1bmtzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblx0ICAgIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2h1bmtzVGFpbERldGFpbHMpO1xuXG5cdCAgICB0aGlzLmNodW5rcyA9IGNodW5rcztcblx0ICAgIHRoaXMuZnJvbSA9IGZyb207XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKENodW5rc1RhaWxEZXRhaWxzLCBbe1xuXHQgICAga2V5OiBcInRvU3RyaW5nXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmNodW5rcy5tYXAoU3RyaW5nKS5qb2luKCcnKTtcblx0ICAgIH0gLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImV4dGVuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZCh0YWlsQ2h1bmspIHtcblx0ICAgICAgaWYgKCFTdHJpbmcodGFpbENodW5rKSkgcmV0dXJuO1xuXHQgICAgICBpZiAoaXNTdHJpbmcodGFpbENodW5rKSkgdGFpbENodW5rID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbENodW5rKSk7XG5cdCAgICAgIHZhciBsYXN0Q2h1bmsgPSB0aGlzLmNodW5rc1t0aGlzLmNodW5rcy5sZW5ndGggLSAxXTtcblx0ICAgICAgdmFyIGV4dGVuZExhc3QgPSBsYXN0Q2h1bmsgJiYgKCAvLyBpZiBzdG9wcyBhcmUgc2FtZSBvciB0YWlsIGhhcyBubyBzdG9wXG5cdCAgICAgIGxhc3RDaHVuay5zdG9wID09PSB0YWlsQ2h1bmsuc3RvcCB8fCB0YWlsQ2h1bmsuc3RvcCA9PSBudWxsKSAmJiAvLyBpZiB0YWlsIGNodW5rIGdvZXMganVzdCBhZnRlciBsYXN0IGNodW5rXG5cdCAgICAgIHRhaWxDaHVuay5mcm9tID09PSBsYXN0Q2h1bmsuZnJvbSArIGxhc3RDaHVuay50b1N0cmluZygpLmxlbmd0aDtcblxuXHQgICAgICBpZiAodGFpbENodW5rIGluc3RhbmNlb2YgQ29udGludW91c1RhaWxEZXRhaWxzKSB7XG5cdCAgICAgICAgLy8gY2hlY2sgdGhlIGFiaWxpdHkgdG8gZXh0ZW5kIHByZXZpb3VzIGNodW5rXG5cdCAgICAgICAgaWYgKGV4dGVuZExhc3QpIHtcblx0ICAgICAgICAgIC8vIGV4dGVuZCBwcmV2aW91cyBjaHVua1xuXHQgICAgICAgICAgbGFzdENodW5rLmV4dGVuZCh0YWlsQ2h1bmsudG9TdHJpbmcoKSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIC8vIGFwcGVuZCBuZXcgY2h1bmtcblx0ICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2godGFpbENodW5rKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAodGFpbENodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMpIHtcblx0ICAgICAgICBpZiAodGFpbENodW5rLnN0b3AgPT0gbnVsbCkge1xuXHQgICAgICAgICAgLy8gdW53cmFwIGZsb2F0aW5nIGNodW5rcyB0byBwYXJlbnQsIGtlZXBpbmcgYGZyb21gIHBvc1xuXHQgICAgICAgICAgdmFyIGZpcnN0VGFpbENodW5rO1xuXG5cdCAgICAgICAgICB3aGlsZSAodGFpbENodW5rLmNodW5rcy5sZW5ndGggJiYgdGFpbENodW5rLmNodW5rc1swXS5zdG9wID09IG51bGwpIHtcblx0ICAgICAgICAgICAgZmlyc3RUYWlsQ2h1bmsgPSB0YWlsQ2h1bmsuY2h1bmtzLnNoaWZ0KCk7XG5cdCAgICAgICAgICAgIGZpcnN0VGFpbENodW5rLmZyb20gKz0gdGFpbENodW5rLmZyb207XG5cdCAgICAgICAgICAgIHRoaXMuZXh0ZW5kKGZpcnN0VGFpbENodW5rKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IC8vIGlmIHRhaWwgY2h1bmsgc3RpbGwgaGFzIHZhbHVlXG5cblxuXHQgICAgICAgIGlmICh0YWlsQ2h1bmsudG9TdHJpbmcoKSkge1xuXHQgICAgICAgICAgLy8gaWYgY2h1bmtzIGNvbnRhaW5zIHN0b3BzLCB0aGVuIHBvcHVwIHN0b3AgdG8gY29udGFpbmVyXG5cdCAgICAgICAgICB0YWlsQ2h1bmsuc3RvcCA9IHRhaWxDaHVuay5ibG9ja0luZGV4O1xuXHQgICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh0YWlsQ2h1bmspO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRUb1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRvKG1hc2tlZCkge1xuXHQgICAgICAvLyAkRmxvd0ZpeE1lXG5cdCAgICAgIGlmICghKG1hc2tlZCBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZFBhdHRlcm4pKSB7XG5cdCAgICAgICAgdmFyIHRhaWwgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKHRoaXMudG9TdHJpbmcoKSk7XG5cdCAgICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8obWFza2VkKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblxuXHQgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgdGhpcy5jaHVua3MubGVuZ3RoICYmICFkZXRhaWxzLnNraXA7ICsrY2kpIHtcblx0ICAgICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rc1tjaV07XG5cblx0ICAgICAgICB2YXIgbGFzdEJsb2NrSXRlciA9IG1hc2tlZC5fbWFwUG9zVG9CbG9jayhtYXNrZWQudmFsdWUubGVuZ3RoKTtcblxuXHQgICAgICAgIHZhciBzdG9wID0gY2h1bmsuc3RvcDtcblx0ICAgICAgICB2YXIgY2h1bmtCbG9jayA9IHZvaWQgMDtcblxuXHQgICAgICAgIGlmIChzdG9wICE9IG51bGwgJiYgKCAvLyBpZiBibG9jayBub3QgZm91bmQgb3Igc3RvcCBpcyBiZWhpbmQgbGFzdEJsb2NrXG5cdCAgICAgICAgIWxhc3RCbG9ja0l0ZXIgfHwgbGFzdEJsb2NrSXRlci5pbmRleCA8PSBzdG9wKSkge1xuXHQgICAgICAgICAgaWYgKGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgfHwgLy8gZm9yIGNvbnRpbnVvdXMgYmxvY2sgYWxzbyBjaGVjayBpZiBzdG9wIGlzIGV4aXN0XG5cdCAgICAgICAgICBtYXNrZWQuX3N0b3BzLmluZGV4T2Yoc3RvcCkgPj0gMCkge1xuXHQgICAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShtYXNrZWQuX2FwcGVuZFBsYWNlaG9sZGVyKHN0b3ApKTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgY2h1bmtCbG9jayA9IGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgJiYgbWFza2VkLl9ibG9ja3Nbc3RvcF07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGNodW5rQmxvY2spIHtcblx0ICAgICAgICAgIHZhciB0YWlsRGV0YWlscyA9IGNodW5rQmxvY2suYXBwZW5kVGFpbChjaHVuayk7XG5cdCAgICAgICAgICB0YWlsRGV0YWlscy5za2lwID0gZmFsc2U7IC8vIGFsd2F5cyBpZ25vcmUgc2tpcCwgaXQgd2lsbCBiZSBzZXQgb24gbGFzdFxuXG5cdCAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0YWlsRGV0YWlscyk7XG5cdCAgICAgICAgICBtYXNrZWQuX3ZhbHVlICs9IHRhaWxEZXRhaWxzLmluc2VydGVkOyAvLyBnZXQgbm90IGluc2VydGVkIGNoYXJzXG5cblx0ICAgICAgICAgIHZhciByZW1haW5DaGFycyA9IGNodW5rLnRvU3RyaW5nKCkuc2xpY2UodGFpbERldGFpbHMucmF3SW5zZXJ0ZWQubGVuZ3RoKTtcblx0ICAgICAgICAgIGlmIChyZW1haW5DaGFycykgZGV0YWlscy5hZ2dyZWdhdGUobWFza2VkLmFwcGVuZChyZW1haW5DaGFycywge1xuXHQgICAgICAgICAgICB0YWlsOiB0cnVlXG5cdCAgICAgICAgICB9KSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5hcHBlbmQoY2h1bmsudG9TdHJpbmcoKSwge1xuXHQgICAgICAgICAgICB0YWlsOiB0cnVlXG5cdCAgICAgICAgICB9KSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzaGlmdEJlZm9yZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0QmVmb3JlKHBvcykge1xuXHQgICAgICBpZiAodGhpcy5mcm9tID49IHBvcyB8fCAhdGhpcy5jaHVua3MubGVuZ3RoKSByZXR1cm4gJyc7XG5cdCAgICAgIHZhciBjaHVua1NoaWZ0UG9zID0gcG9zIC0gdGhpcy5mcm9tO1xuXHQgICAgICB2YXIgY2kgPSAwO1xuXG5cdCAgICAgIHdoaWxlIChjaSA8IHRoaXMuY2h1bmtzLmxlbmd0aCkge1xuXHQgICAgICAgIHZhciBjaHVuayA9IHRoaXMuY2h1bmtzW2NpXTtcblx0ICAgICAgICB2YXIgc2hpZnRDaGFyID0gY2h1bmsuc2hpZnRCZWZvcmUoY2h1bmtTaGlmdFBvcyk7XG5cblx0ICAgICAgICBpZiAoY2h1bmsudG9TdHJpbmcoKSkge1xuXHQgICAgICAgICAgLy8gY2h1bmsgc3RpbGwgY29udGFpbnMgdmFsdWVcblx0ICAgICAgICAgIC8vIGJ1dCBub3Qgc2hpZnRlZCAtIG1lYW5zIG5vIG1vcmUgYXZhaWxhYmxlIGNoYXJzIHRvIHNoaWZ0XG5cdCAgICAgICAgICBpZiAoIXNoaWZ0Q2hhcikgYnJlYWs7XG5cdCAgICAgICAgICArK2NpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBjbGVhbiBpZiBjaHVuayBoYXMgbm8gdmFsdWVcblx0ICAgICAgICAgIHRoaXMuY2h1bmtzLnNwbGljZShjaSwgMSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHNoaWZ0Q2hhcikgcmV0dXJuIHNoaWZ0Q2hhcjtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiAnJztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwic3RhdGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIGNodW5rczogdGhpcy5jaHVua3MubWFwKGZ1bmN0aW9uIChjKSB7XG5cdCAgICAgICAgICByZXR1cm4gYy5zdGF0ZTtcblx0ICAgICAgICB9KSxcblx0ICAgICAgICBmcm9tOiB0aGlzLmZyb20sXG5cdCAgICAgICAgc3RvcDogdGhpcy5zdG9wLFxuXHQgICAgICAgIGJsb2NrSW5kZXg6IHRoaXMuYmxvY2tJbmRleFxuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XG5cdCAgICAgIHZhciBjaHVua3MgPSBzdGF0ZS5jaHVua3MsXG5cdCAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzdGF0ZSwgW1wiY2h1bmtzXCJdKTtcblxuXHQgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKTtcblx0ICAgICAgdGhpcy5jaHVua3MgPSBjaHVua3MubWFwKGZ1bmN0aW9uIChjc3RhdGUpIHtcblx0ICAgICAgICB2YXIgY2h1bmsgPSBcImNodW5rc1wiIGluIGNzdGF0ZSA/IG5ldyBDaHVua3NUYWlsRGV0YWlscygpIDogbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscygpOyAvLyAkRmxvd0ZpeE1lIGFscmVhZHkgY2hlY2tlZCBhYm92ZVxuXG5cdCAgICAgICAgY2h1bmsuc3RhdGUgPSBjc3RhdGU7XG5cdCAgICAgICAgcmV0dXJuIGNodW5rO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gQ2h1bmtzVGFpbERldGFpbHM7XG5cdH0oKTtcblxuXHQvKiogTWFza2luZyBieSBSZWdFeHAgKi9cblxuXHR2YXIgTWFza2VkUmVnRXhwID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoX01hc2tlZCkge1xuXHQgIF9pbmhlcml0cyhNYXNrZWRSZWdFeHAsIF9NYXNrZWQpO1xuXG5cdCAgZnVuY3Rpb24gTWFza2VkUmVnRXhwKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZFJlZ0V4cCk7XG5cblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmVnRXhwKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkUmVnRXhwLCBbe1xuXHQgICAga2V5OiBcIl91cGRhdGVcIixcblxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKG9wdHMpIHtcblx0ICAgICAgaWYgKG9wdHMubWFzaykgb3B0cy52YWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHJldHVybiB2YWx1ZS5zZWFyY2gob3B0cy5tYXNrKSA+PSAwO1xuXHQgICAgICB9O1xuXG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFJlZ0V4cC5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkUmVnRXhwO1xuXHR9KE1hc2tlZCk7XG5cdElNYXNrLk1hc2tlZFJlZ0V4cCA9IE1hc2tlZFJlZ0V4cDtcblxuXHQvKipcclxuXHQgIFBhdHRlcm4gbWFza1xyXG5cdCAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuXHQgIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmJsb2Nrc1xyXG5cdCAgQHBhcmFtIHtPYmplY3R9IG9wdHMuZGVmaW5pdGlvbnNcclxuXHQgIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnBsYWNlaG9sZGVyQ2hhclxyXG5cdCAgQHBhcmFtIHtib29sZWFufSBvcHRzLmxhenlcclxuXHQqL1xuXHR2YXIgTWFza2VkUGF0dGVybiA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKF9NYXNrZWQpIHtcblx0ICBfaW5oZXJpdHMoTWFza2VkUGF0dGVybiwgX01hc2tlZCk7XG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqIFNpbmdsZSBjaGFyIGZvciBlbXB0eSBpbnB1dCAqL1xuXG5cdCAgLyoqIFNob3cgcGxhY2Vob2xkZXIgb25seSB3aGVuIG5lZWRlZCAqL1xuXHQgIGZ1bmN0aW9uIE1hc2tlZFBhdHRlcm4oKSB7XG5cdCAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRQYXR0ZXJuKTtcblxuXHQgICAgLy8gVE9ETyB0eXBlICRTaGFwZTxNYXNrZWRQYXR0ZXJuT3B0aW9ucz49e30gZG9lcyBub3Qgd29ya1xuXHQgICAgb3B0cy5kZWZpbml0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMsIG9wdHMuZGVmaW5pdGlvbnMpO1xuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuKS5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZFBhdHRlcm4uREVGQVVMVFMsIHt9LCBvcHRzKSkpO1xuXHQgIH1cblx0ICAvKipcclxuXHQgICAgQG92ZXJyaWRlXHJcblx0ICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcblx0ICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkUGF0dGVybiwgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZSgpIHtcblx0ICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXHQgICAgICBvcHRzLmRlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZpbml0aW9ucywgb3B0cy5kZWZpbml0aW9ucyk7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuXHQgICAgICB0aGlzLl9yZWJ1aWxkTWFzaygpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3JlYnVpbGRNYXNrXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYnVpbGRNYXNrKCkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBkZWZzID0gdGhpcy5kZWZpbml0aW9ucztcblx0ICAgICAgdGhpcy5fYmxvY2tzID0gW107XG5cdCAgICAgIHRoaXMuX3N0b3BzID0gW107XG5cdCAgICAgIHRoaXMuX21hc2tlZEJsb2NrcyA9IHt9O1xuXHQgICAgICB2YXIgcGF0dGVybiA9IHRoaXMubWFzaztcblx0ICAgICAgaWYgKCFwYXR0ZXJuIHx8ICFkZWZzKSByZXR1cm47XG5cdCAgICAgIHZhciB1bm1hc2tpbmdCbG9jayA9IGZhbHNlO1xuXHQgICAgICB2YXIgb3B0aW9uYWxCbG9jayA9IGZhbHNlO1xuXG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgIGlmICh0aGlzLmJsb2Nrcykge1xuXHQgICAgICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBwID0gcGF0dGVybi5zbGljZShpKTtcblx0ICAgICAgICAgICAgdmFyIGJOYW1lcyA9IE9iamVjdC5rZXlzKF90aGlzLmJsb2NrcykuZmlsdGVyKGZ1bmN0aW9uIChiTmFtZSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBwLmluZGV4T2YoYk5hbWUpID09PSAwO1xuXHQgICAgICAgICAgICB9KTsgLy8gb3JkZXIgYnkga2V5IGxlbmd0aFxuXG5cdCAgICAgICAgICAgIGJOYW1lcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG5cdCAgICAgICAgICAgIH0pOyAvLyB1c2UgYmxvY2sgbmFtZSB3aXRoIG1heCBsZW5ndGhcblxuXHQgICAgICAgICAgICB2YXIgYk5hbWUgPSBiTmFtZXNbMF07XG5cblx0ICAgICAgICAgICAgaWYgKGJOYW1lKSB7XG5cdCAgICAgICAgICAgICAgdmFyIG1hc2tlZEJsb2NrID0gY3JlYXRlTWFzayhPYmplY3QuYXNzaWduKHtcblx0ICAgICAgICAgICAgICAgIHBhcmVudDogX3RoaXMsXG5cdCAgICAgICAgICAgICAgICBsYXp5OiBfdGhpcy5sYXp5LFxuXHQgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDaGFyOiBfdGhpcy5wbGFjZWhvbGRlckNoYXIsXG5cdCAgICAgICAgICAgICAgICBvdmVyd3JpdGU6IF90aGlzLm92ZXJ3cml0ZVxuXHQgICAgICAgICAgICAgIH0sIF90aGlzLmJsb2Nrc1tiTmFtZV0pKTtcblxuXHQgICAgICAgICAgICAgIGlmIChtYXNrZWRCbG9jaykge1xuXHQgICAgICAgICAgICAgICAgX3RoaXMuX2Jsb2Nrcy5wdXNoKG1hc2tlZEJsb2NrKTsgLy8gc3RvcmUgYmxvY2sgaW5kZXhcblxuXG5cdCAgICAgICAgICAgICAgICBpZiAoIV90aGlzLl9tYXNrZWRCbG9ja3NbYk5hbWVdKSBfdGhpcy5fbWFza2VkQmxvY2tzW2JOYW1lXSA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICBfdGhpcy5fbWFza2VkQmxvY2tzW2JOYW1lXS5wdXNoKF90aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7XG5cdCAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgaSArPSBiTmFtZS5sZW5ndGggLSAxO1xuXHQgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0oKTtcblxuXHQgICAgICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGNoYXIgPSBwYXR0ZXJuW2ldO1xuXG5cdCAgICAgICAgdmFyIF9pc0lucHV0ID0gY2hhciBpbiBkZWZzO1xuXG5cdCAgICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uU1RPUF9DSEFSKSB7XG5cdCAgICAgICAgICB0aGlzLl9zdG9wcy5wdXNoKHRoaXMuX2Jsb2Nrcy5sZW5ndGgpO1xuXG5cdCAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY2hhciA9PT0gJ3snIHx8IGNoYXIgPT09ICd9Jykge1xuXHQgICAgICAgICAgdW5tYXNraW5nQmxvY2sgPSAhdW5tYXNraW5nQmxvY2s7XG5cdCAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY2hhciA9PT0gJ1snIHx8IGNoYXIgPT09ICddJykge1xuXHQgICAgICAgICAgb3B0aW9uYWxCbG9jayA9ICFvcHRpb25hbEJsb2NrO1xuXHQgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uRVNDQVBFX0NIQVIpIHtcblx0ICAgICAgICAgICsraTtcblx0ICAgICAgICAgIGNoYXIgPSBwYXR0ZXJuW2ldO1xuXHQgICAgICAgICAgaWYgKCFjaGFyKSBicmVhaztcblx0ICAgICAgICAgIF9pc0lucHV0ID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGRlZiA9IF9pc0lucHV0ID8gbmV3IFBhdHRlcm5JbnB1dERlZmluaXRpb24oe1xuXHQgICAgICAgICAgcGFyZW50OiB0aGlzLFxuXHQgICAgICAgICAgbGF6eTogdGhpcy5sYXp5LFxuXHQgICAgICAgICAgcGxhY2Vob2xkZXJDaGFyOiB0aGlzLnBsYWNlaG9sZGVyQ2hhcixcblx0ICAgICAgICAgIG1hc2s6IGRlZnNbY2hhcl0sXG5cdCAgICAgICAgICBpc09wdGlvbmFsOiBvcHRpb25hbEJsb2NrXG5cdCAgICAgICAgfSkgOiBuZXcgUGF0dGVybkZpeGVkRGVmaW5pdGlvbih7XG5cdCAgICAgICAgICBjaGFyOiBjaGFyLFxuXHQgICAgICAgICAgaXNVbm1hc2tpbmc6IHVubWFza2luZ0Jsb2NrXG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICB0aGlzLl9ibG9ja3MucHVzaChkZWYpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZXNldFwiLFxuXG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInJlc2V0XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cblx0ICAgICAgdGhpcy5fYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICByZXR1cm4gYi5yZXNldCgpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvQ29tbWl0XCIsXG5cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuXHQgICAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuXHQgICAgICAgIHJldHVybiBiLmRvQ29tbWl0KCk7XG5cdCAgICAgIH0pO1xuXG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJkb0NvbW1pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYXBwZW5kVGFpbFwiLFxuXG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUYWlsKHRhaWwpIHtcblx0ICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJhcHBlbmRUYWlsXCIsIHRoaXMpLmNhbGwodGhpcywgdGFpbCkuYWdncmVnYXRlKHRoaXMuX2FwcGVuZFBsYWNlaG9sZGVyKCkpO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJSYXdcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgICAgICBjaCA9IHRoaXMuZG9QcmVwYXJlKGNoLCBmbGFncyk7XG5cblx0ICAgICAgdmFyIGJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy52YWx1ZS5sZW5ndGgpO1xuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgaWYgKCFibG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xuXG5cdCAgICAgIGZvciAodmFyIGJpID0gYmxvY2tJdGVyLmluZGV4OzsgKytiaSkge1xuXHQgICAgICAgIHZhciBfYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xuXHQgICAgICAgIGlmICghX2Jsb2NrKSBicmVhaztcblxuXHQgICAgICAgIHZhciBibG9ja0RldGFpbHMgPSBfYmxvY2suX2FwcGVuZENoYXIoY2gsIGZsYWdzKTtcblxuXHQgICAgICAgIHZhciBza2lwID0gYmxvY2tEZXRhaWxzLnNraXA7XG5cdCAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoYmxvY2tEZXRhaWxzKTtcblx0ICAgICAgICBpZiAoc2tpcCB8fCBibG9ja0RldGFpbHMucmF3SW5zZXJ0ZWQpIGJyZWFrOyAvLyBnbyBuZXh0IGNoYXJcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdFRhaWxcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcblx0ICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHZhciBjaHVua1RhaWwgPSBuZXcgQ2h1bmtzVGFpbERldGFpbHMoKTtcblx0ICAgICAgaWYgKGZyb21Qb3MgPT09IHRvUG9zKSByZXR1cm4gY2h1bmtUYWlsO1xuXG5cdCAgICAgIHRoaXMuX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmdW5jdGlvbiAoYiwgYmksIGJGcm9tUG9zLCBiVG9Qb3MpIHtcblx0ICAgICAgICB2YXIgYmxvY2tDaHVuayA9IGIuZXh0cmFjdFRhaWwoYkZyb21Qb3MsIGJUb1Bvcyk7XG5cdCAgICAgICAgYmxvY2tDaHVuay5zdG9wID0gX3RoaXMyLl9maW5kU3RvcEJlZm9yZShiaSk7XG5cdCAgICAgICAgYmxvY2tDaHVuay5mcm9tID0gX3RoaXMyLl9ibG9ja1N0YXJ0UG9zKGJpKTtcblx0ICAgICAgICBpZiAoYmxvY2tDaHVuayBpbnN0YW5jZW9mIENodW5rc1RhaWxEZXRhaWxzKSBibG9ja0NodW5rLmJsb2NrSW5kZXggPSBiaTtcblx0ICAgICAgICBjaHVua1RhaWwuZXh0ZW5kKGJsb2NrQ2h1bmspO1xuXHQgICAgICB9KTtcblxuXHQgICAgICByZXR1cm4gY2h1bmtUYWlsO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdElucHV0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0ICAgICAgaWYgKGZyb21Qb3MgPT09IHRvUG9zKSByZXR1cm4gJyc7XG5cdCAgICAgIHZhciBpbnB1dCA9ICcnO1xuXG5cdCAgICAgIHRoaXMuX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmdW5jdGlvbiAoYiwgXywgZnJvbVBvcywgdG9Qb3MpIHtcblx0ICAgICAgICBpbnB1dCArPSBiLmV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpO1xuXHQgICAgICB9KTtcblxuXHQgICAgICByZXR1cm4gaW5wdXQ7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9maW5kU3RvcEJlZm9yZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU3RvcEJlZm9yZShibG9ja0luZGV4KSB7XG5cdCAgICAgIHZhciBzdG9wQmVmb3JlO1xuXG5cdCAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCB0aGlzLl9zdG9wcy5sZW5ndGg7ICsrc2kpIHtcblx0ICAgICAgICB2YXIgc3RvcCA9IHRoaXMuX3N0b3BzW3NpXTtcblx0ICAgICAgICBpZiAoc3RvcCA8PSBibG9ja0luZGV4KSBzdG9wQmVmb3JlID0gc3RvcDtlbHNlIGJyZWFrO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHN0b3BCZWZvcmU7XG5cdCAgICB9XG5cdCAgICAvKiogQXBwZW5kcyBwbGFjZWhvbGRlciBkZXBlbmRpbmcgb24gbGF6aW5lc3MgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kUGxhY2Vob2xkZXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIodG9CbG9ja0luZGV4KSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgaWYgKHRoaXMubGF6eSAmJiB0b0Jsb2NrSW5kZXggPT0gbnVsbCkgcmV0dXJuIGRldGFpbHM7XG5cblx0ICAgICAgdmFyIHN0YXJ0QmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0aGlzLnZhbHVlLmxlbmd0aCk7XG5cblx0ICAgICAgaWYgKCFzdGFydEJsb2NrSXRlcikgcmV0dXJuIGRldGFpbHM7XG5cdCAgICAgIHZhciBzdGFydEJsb2NrSW5kZXggPSBzdGFydEJsb2NrSXRlci5pbmRleDtcblx0ICAgICAgdmFyIGVuZEJsb2NrSW5kZXggPSB0b0Jsb2NrSW5kZXggIT0gbnVsbCA/IHRvQmxvY2tJbmRleCA6IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7XG5cblx0ICAgICAgdGhpcy5fYmxvY2tzLnNsaWNlKHN0YXJ0QmxvY2tJbmRleCwgZW5kQmxvY2tJbmRleCkuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuXHQgICAgICAgIGlmICghYi5sYXp5IHx8IHRvQmxvY2tJbmRleCAhPSBudWxsKSB7XG5cdCAgICAgICAgICAvLyAkRmxvd0ZpeE1lIGBfYmxvY2tzYCBtYXkgbm90IGJlIHByZXNlbnRcblx0ICAgICAgICAgIHZhciBhcmdzID0gYi5fYmxvY2tzICE9IG51bGwgPyBbYi5fYmxvY2tzLmxlbmd0aF0gOiBbXTtcblxuXHQgICAgICAgICAgdmFyIGJEZXRhaWxzID0gYi5fYXBwZW5kUGxhY2Vob2xkZXIuYXBwbHkoYiwgYXJncyk7XG5cblx0ICAgICAgICAgIF90aGlzMy5fdmFsdWUgKz0gYkRldGFpbHMuaW5zZXJ0ZWQ7XG5cdCAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShiRGV0YWlscyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblxuXHQgICAgICByZXR1cm4gZGV0YWlscztcblx0ICAgIH1cblx0ICAgIC8qKiBGaW5kcyBibG9jayBpbiBwb3MgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfbWFwUG9zVG9CbG9ja1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYXBQb3NUb0Jsb2NrKHBvcykge1xuXHQgICAgICB2YXIgYWNjVmFsID0gJyc7XG5cblx0ICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcblx0ICAgICAgICB2YXIgX2Jsb2NrMiA9IHRoaXMuX2Jsb2Nrc1tiaV07XG5cdCAgICAgICAgdmFyIGJsb2NrU3RhcnRQb3MgPSBhY2NWYWwubGVuZ3RoO1xuXHQgICAgICAgIGFjY1ZhbCArPSBfYmxvY2syLnZhbHVlO1xuXG5cdCAgICAgICAgaWYgKHBvcyA8PSBhY2NWYWwubGVuZ3RoKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICBpbmRleDogYmksXG5cdCAgICAgICAgICAgIG9mZnNldDogcG9zIC0gYmxvY2tTdGFydFBvc1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9ibG9ja1N0YXJ0UG9zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2Jsb2NrU3RhcnRQb3MoYmxvY2tJbmRleCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fYmxvY2tzLnNsaWNlKDAsIGJsb2NrSW5kZXgpLnJlZHVjZShmdW5jdGlvbiAocG9zLCBiKSB7XG5cdCAgICAgICAgcmV0dXJuIHBvcyArPSBiLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgfSwgMCk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfZm9yRWFjaEJsb2Nrc0luUmFuZ2VcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcykge1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICB2YXIgZm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblxuXHQgICAgICB2YXIgZnJvbUJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2soZnJvbVBvcyk7XG5cblx0ICAgICAgaWYgKGZyb21CbG9ja0l0ZXIpIHtcblx0ICAgICAgICB2YXIgdG9CbG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRvUG9zKTsgLy8gcHJvY2VzcyBmaXJzdCBibG9ja1xuXG5cblx0ICAgICAgICB2YXIgaXNTYW1lQmxvY2sgPSB0b0Jsb2NrSXRlciAmJiBmcm9tQmxvY2tJdGVyLmluZGV4ID09PSB0b0Jsb2NrSXRlci5pbmRleDtcblx0ICAgICAgICB2YXIgZnJvbUJsb2NrU3RhcnRQb3MgPSBmcm9tQmxvY2tJdGVyLm9mZnNldDtcblx0ICAgICAgICB2YXIgZnJvbUJsb2NrRW5kUG9zID0gdG9CbG9ja0l0ZXIgJiYgaXNTYW1lQmxvY2sgPyB0b0Jsb2NrSXRlci5vZmZzZXQgOiB0aGlzLl9ibG9ja3NbZnJvbUJsb2NrSXRlci5pbmRleF0udmFsdWUubGVuZ3RoO1xuXHQgICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1tmcm9tQmxvY2tJdGVyLmluZGV4XSwgZnJvbUJsb2NrSXRlci5pbmRleCwgZnJvbUJsb2NrU3RhcnRQb3MsIGZyb21CbG9ja0VuZFBvcyk7XG5cblx0ICAgICAgICBpZiAodG9CbG9ja0l0ZXIgJiYgIWlzU2FtZUJsb2NrKSB7XG5cdCAgICAgICAgICAvLyBwcm9jZXNzIGludGVybWVkaWF0ZSBibG9ja3Ncblx0ICAgICAgICAgIGZvciAodmFyIGJpID0gZnJvbUJsb2NrSXRlci5pbmRleCArIDE7IGJpIDwgdG9CbG9ja0l0ZXIuaW5kZXg7ICsrYmkpIHtcblx0ICAgICAgICAgICAgZm4odGhpcy5fYmxvY2tzW2JpXSwgYmksIDAsIHRoaXMuX2Jsb2Nrc1tiaV0udmFsdWUubGVuZ3RoKTtcblx0ICAgICAgICAgIH0gLy8gcHJvY2VzcyBsYXN0IGJsb2NrXG5cblxuXHQgICAgICAgICAgZm4odGhpcy5fYmxvY2tzW3RvQmxvY2tJdGVyLmluZGV4XSwgdG9CbG9ja0l0ZXIuaW5kZXgsIDAsIHRvQmxvY2tJdGVyLm9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXG5cdCAgICAgIHZhciByZW1vdmVEZXRhaWxzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInJlbW92ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIGZyb21Qb3MsIHRvUG9zKTtcblxuXHQgICAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgZnVuY3Rpb24gKGIsIF8sIGJGcm9tUG9zLCBiVG9Qb3MpIHtcblx0ICAgICAgICByZW1vdmVEZXRhaWxzLmFnZ3JlZ2F0ZShiLnJlbW92ZShiRnJvbVBvcywgYlRvUG9zKSk7XG5cdCAgICAgIH0pO1xuXG5cdCAgICAgIHJldHVybiByZW1vdmVEZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcykge1xuXHQgICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBESVJFQ1RJT04uTk9ORTtcblx0ICAgICAgLy8gVE9ETyByZWZhY3RvciAtIGV4dHJhY3QgYWxpZ25ibG9ja1xuXHQgICAgICB2YXIgYmVnaW5CbG9ja0RhdGEgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKGN1cnNvclBvcykgfHwge1xuXHQgICAgICAgIGluZGV4OiAwLFxuXHQgICAgICAgIG9mZnNldDogMFxuXHQgICAgICB9O1xuXHQgICAgICB2YXIgYmVnaW5CbG9ja09mZnNldCA9IGJlZ2luQmxvY2tEYXRhLm9mZnNldCxcblx0ICAgICAgICAgIGJlZ2luQmxvY2tJbmRleCA9IGJlZ2luQmxvY2tEYXRhLmluZGV4O1xuXHQgICAgICB2YXIgYmVnaW5CbG9jayA9IHRoaXMuX2Jsb2Nrc1tiZWdpbkJsb2NrSW5kZXhdO1xuXHQgICAgICBpZiAoIWJlZ2luQmxvY2spIHJldHVybiBjdXJzb3JQb3M7XG5cdCAgICAgIHZhciBiZWdpbkJsb2NrQ3Vyc29yUG9zID0gYmVnaW5CbG9ja09mZnNldDsgLy8gaWYgcG9zaXRpb24gaW5zaWRlIGJsb2NrIC0gdHJ5IHRvIGFkanVzdCBpdFxuXG5cdCAgICAgIGlmIChiZWdpbkJsb2NrQ3Vyc29yUG9zICE9PSAwICYmIGJlZ2luQmxvY2tDdXJzb3JQb3MgPCBiZWdpbkJsb2NrLnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgIGJlZ2luQmxvY2tDdXJzb3JQb3MgPSBiZWdpbkJsb2NrLm5lYXJlc3RJbnB1dFBvcyhiZWdpbkJsb2NrT2Zmc2V0LCBmb3JjZURpcmVjdGlvbihkaXJlY3Rpb24pKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBjdXJzb3JBdFJpZ2h0ID0gYmVnaW5CbG9ja0N1cnNvclBvcyA9PT0gYmVnaW5CbG9jay52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHZhciBjdXJzb3JBdExlZnQgPSBiZWdpbkJsb2NrQ3Vyc29yUG9zID09PSAwOyAvLyAgY3Vyc29yIGlzIElOU0lERSBmaXJzdCBibG9jayAobm90IGF0IGJvdW5kcylcblxuXHQgICAgICBpZiAoIWN1cnNvckF0TGVmdCAmJiAhY3Vyc29yQXRSaWdodCkgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmVnaW5CbG9ja0luZGV4KSArIGJlZ2luQmxvY2tDdXJzb3JQb3M7XG5cdCAgICAgIHZhciBzZWFyY2hCbG9ja0luZGV4ID0gY3Vyc29yQXRSaWdodCA/IGJlZ2luQmxvY2tJbmRleCArIDEgOiBiZWdpbkJsb2NrSW5kZXg7XG5cblx0ICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLk5PTkUpIHtcblx0ICAgICAgICAvLyBOT05FIGRpcmVjdGlvbiB1c2VkIHRvIGNhbGN1bGF0ZSBzdGFydCBpbnB1dCBwb3NpdGlvbiBpZiBubyBjaGFycyB3ZXJlIHJlbW92ZWRcblx0ICAgICAgICAvLyBGT1IgTk9ORTpcblx0ICAgICAgICAvLyAtXG5cdCAgICAgICAgLy8gaW5wdXR8YW55XG5cdCAgICAgICAgLy8gLT5cblx0ICAgICAgICAvLyAgYW55fGlucHV0XG5cdCAgICAgICAgLy8gPC1cblx0ICAgICAgICAvLyAgZmlsbGVkLWlucHV0fGFueVxuXHQgICAgICAgIC8vIGNoZWNrIGlmIGZpcnN0IGJsb2NrIGF0IGxlZnQgaXMgaW5wdXRcblx0ICAgICAgICBpZiAoc2VhcmNoQmxvY2tJbmRleCA+IDApIHtcblx0ICAgICAgICAgIHZhciBibG9ja0luZGV4QXRMZWZ0ID0gc2VhcmNoQmxvY2tJbmRleCAtIDE7XG5cdCAgICAgICAgICB2YXIgYmxvY2tBdExlZnQgPSB0aGlzLl9ibG9ja3NbYmxvY2tJbmRleEF0TGVmdF07XG5cdCAgICAgICAgICB2YXIgYmxvY2tJbnB1dFBvcyA9IGJsb2NrQXRMZWZ0Lm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uTk9ORSk7IC8vIGlzIGlucHV0XG5cblx0ICAgICAgICAgIGlmICghYmxvY2tBdExlZnQudmFsdWUubGVuZ3RoIHx8IGJsb2NrSW5wdXRQb3MgIT09IGJsb2NrQXRMZWZ0LnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhzZWFyY2hCbG9ja0luZGV4KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IC8vIC0+XG5cblxuXHQgICAgICAgIHZhciBmaXJzdElucHV0QXRSaWdodCA9IHNlYXJjaEJsb2NrSW5kZXg7XG5cblx0ICAgICAgICBmb3IgKHZhciBiaSA9IGZpcnN0SW5wdXRBdFJpZ2h0OyBiaSA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcblx0ICAgICAgICAgIHZhciBibG9ja0F0UmlnaHQgPSB0aGlzLl9ibG9ja3NbYmldO1xuXG5cdCAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3MgPSBibG9ja0F0UmlnaHQubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcblxuXHQgICAgICAgICAgaWYgKCFibG9ja0F0UmlnaHQudmFsdWUubGVuZ3RoIHx8IF9ibG9ja0lucHV0UG9zICE9PSBibG9ja0F0UmlnaHQudmFsdWUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJpKSArIF9ibG9ja0lucHV0UG9zO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gLy8gPC1cblx0ICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi1maXhlZCBzeW1ib2xcblxuXG5cdCAgICAgICAgZm9yICh2YXIgX2JpID0gc2VhcmNoQmxvY2tJbmRleCAtIDE7IF9iaSA+PSAwOyAtLV9iaSkge1xuXHQgICAgICAgICAgdmFyIF9ibG9jazMgPSB0aGlzLl9ibG9ja3NbX2JpXTtcblxuXHQgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zMiA9IF9ibG9jazMubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTsgLy8gaXMgaW5wdXRcblxuXG5cdCAgICAgICAgICBpZiAoIV9ibG9jazMudmFsdWUubGVuZ3RoIHx8IF9ibG9ja0lucHV0UG9zMiAhPT0gX2Jsb2NrMy52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoX2JpKSArIF9ibG9jazMudmFsdWUubGVuZ3RoO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBjdXJzb3JQb3M7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCB8fCBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9MRUZUKSB7XG5cdCAgICAgICAgLy8gLVxuXHQgICAgICAgIC8vICBhbnl8ZmlsbGVkLWlucHV0XG5cdCAgICAgICAgLy8gPC1cblx0ICAgICAgICAvLyAgYW55fGZpcnN0IG5vdCBlbXB0eSBpcyBub3QtbGVuLWFsaWduZWRcblx0ICAgICAgICAvLyAgbm90LTAtYWxpZ25lZHxhbnlcblx0ICAgICAgICAvLyAtPlxuXHQgICAgICAgIC8vICBhbnl8bm90LWxlbi1hbGlnbmVkIG9yIGVuZFxuXHQgICAgICAgIC8vIGNoZWNrIGlmIGZpcnN0IGJsb2NrIGF0IHJpZ2h0IGlzIGZpbGxlZCBpbnB1dFxuXHQgICAgICAgIHZhciBmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0O1xuXG5cdCAgICAgICAgZm9yICh2YXIgX2JpMiA9IHNlYXJjaEJsb2NrSW5kZXg7IF9iaTIgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK19iaTIpIHtcblx0ICAgICAgICAgIGlmICh0aGlzLl9ibG9ja3NbX2JpMl0udmFsdWUpIHtcblx0ICAgICAgICAgICAgZmlyc3RGaWxsZWRCbG9ja0luZGV4QXRSaWdodCA9IF9iaTI7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0ICE9IG51bGwpIHtcblx0ICAgICAgICAgIHZhciBmaWxsZWRCbG9jayA9IHRoaXMuX2Jsb2Nrc1tmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0XTtcblxuXHQgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zMyA9IGZpbGxlZEJsb2NrLm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uUklHSFQpO1xuXG5cdCAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3MzID09PSAwICYmIGZpbGxlZEJsb2NrLnVubWFza2VkVmFsdWUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIC8vIGZpbGxlZCBibG9jayBpcyBpbnB1dFxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0KSArIF9ibG9ja0lucHV0UG9zMztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IC8vIDwtXG5cdCAgICAgICAgLy8gZmluZCB0aGlzIHZhcnNcblxuXG5cdCAgICAgICAgdmFyIGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ID0gLTE7XG5cdCAgICAgICAgdmFyIGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXg7IC8vIFRPRE8gY29uc2lkZXIgbmVzdGVkIGVtcHR5IGlucHV0c1xuXG5cdCAgICAgICAgZm9yICh2YXIgX2JpMyA9IHNlYXJjaEJsb2NrSW5kZXggLSAxOyBfYmkzID49IDA7IC0tX2JpMykge1xuXHQgICAgICAgICAgdmFyIF9ibG9jazQgPSB0aGlzLl9ibG9ja3NbX2JpM107XG5cblx0ICAgICAgICAgIHZhciBfYmxvY2tJbnB1dFBvczQgPSBfYmxvY2s0Lm5lYXJlc3RJbnB1dFBvcyhfYmxvY2s0LnZhbHVlLmxlbmd0aCwgRElSRUNUSU9OLkZPUkNFX0xFRlQpO1xuXG5cdCAgICAgICAgICBpZiAoIV9ibG9jazQudmFsdWUgfHwgX2Jsb2NrSW5wdXRQb3M0ICE9PSAwKSBmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4ID0gX2JpMztcblxuXHQgICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zNCAhPT0gMCkge1xuXHQgICAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M0ICE9PSBfYmxvY2s0LnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgIC8vIGFsaWduZWQgaW5zaWRlIGJsb2NrIC0gcmV0dXJuIGltbWVkaWF0ZWx5XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoX2JpMykgKyBfYmxvY2tJbnB1dFBvczQ7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgLy8gZm91bmQgZmlsbGVkXG5cdCAgICAgICAgICAgICAgZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXggPSBfYmkzO1xuXHQgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkxFRlQpIHtcblx0ICAgICAgICAgIC8vIHRyeSBmaW5kIGZpcnN0IGVtcHR5IGlucHV0IGJlZm9yZSBzdGFydCBzZWFyY2hpbmcgcG9zaXRpb24gb25seSB3aGVuIG5vdCBmb3JjZWRcblx0ICAgICAgICAgIGZvciAodmFyIF9iaTQgPSBmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCArIDE7IF9iaTQgPD0gTWF0aC5taW4oc2VhcmNoQmxvY2tJbmRleCwgdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEpOyArK19iaTQpIHtcblx0ICAgICAgICAgICAgdmFyIF9ibG9jazUgPSB0aGlzLl9ibG9ja3NbX2JpNF07XG5cblx0ICAgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNSA9IF9ibG9jazUubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcblxuXHQgICAgICAgICAgICB2YXIgYmxvY2tBbGlnbmVkUG9zID0gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk0KSArIF9ibG9ja0lucHV0UG9zNTtcblxuXHQgICAgICAgICAgICBpZiAoYmxvY2tBbGlnbmVkUG9zID4gY3Vyc29yUG9zKSBicmVhazsgLy8gaWYgYmxvY2sgaXMgbm90IGxhenkgaW5wdXRcblxuXHQgICAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M1ICE9PSBfYmxvY2s1LnZhbHVlLmxlbmd0aCkgcmV0dXJuIGJsb2NrQWxpZ25lZFBvcztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IC8vIHByb2Nlc3Mgb3ZlcmZsb3dcblxuXG5cdCAgICAgICAgaWYgKGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ID49IDApIHtcblx0ICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4KSArIHRoaXMuX2Jsb2Nrc1tmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleF0udmFsdWUubGVuZ3RoO1xuXHQgICAgICAgIH0gLy8gZm9yIGxhenkgaWYgaGFzIGFsaWduZWQgbGVmdCBpbnNpZGUgZml4ZWQgYW5kIGhhcyBjYW1lIHRvIHRoZSBzdGFydCAtIHVzZSBzdGFydCBwb3NpdGlvblxuXG5cblx0ICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfTEVGVCB8fCB0aGlzLmxhenkgJiYgIXRoaXMuZXh0cmFjdElucHV0KCkgJiYgIWlzSW5wdXQodGhpcy5fYmxvY2tzW3NlYXJjaEJsb2NrSW5kZXhdKSkge1xuXHQgICAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXggIT0gbnVsbCkge1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleCk7XG5cdCAgICAgICAgfSAvLyBmaW5kIGZpcnN0IGlucHV0XG5cblxuXHQgICAgICAgIGZvciAodmFyIF9iaTUgPSBzZWFyY2hCbG9ja0luZGV4OyBfYmk1IDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytfYmk1KSB7XG5cdCAgICAgICAgICB2YXIgX2Jsb2NrNiA9IHRoaXMuX2Jsb2Nrc1tfYmk1XTtcblxuXHQgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNiA9IF9ibG9jazYubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTsgLy8gaXMgaW5wdXRcblxuXG5cdCAgICAgICAgICBpZiAoIV9ibG9jazYudmFsdWUubGVuZ3RoIHx8IF9ibG9ja0lucHV0UG9zNiAhPT0gX2Jsb2NrNi52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoX2JpNSkgKyBfYmxvY2tJbnB1dFBvczY7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uUklHSFQgfHwgZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfUklHSFQpIHtcblx0ICAgICAgICAvLyAtPlxuXHQgICAgICAgIC8vICBhbnl8bm90LWxlbi1hbGlnbmVkIGFuZCBmaWxsZWRcblx0ICAgICAgICAvLyAgYW55fG5vdC1sZW4tYWxpZ25lZFxuXHQgICAgICAgIC8vIDwtXG5cdCAgICAgICAgLy8gIG5vdC0wLWFsaWduZWQgb3Igc3RhcnR8YW55XG5cdCAgICAgICAgdmFyIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleDtcblx0ICAgICAgICB2YXIgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcztcblxuXHQgICAgICAgIGZvciAodmFyIF9iaTYgPSBzZWFyY2hCbG9ja0luZGV4OyBfYmk2IDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytfYmk2KSB7XG5cdCAgICAgICAgICB2YXIgX2Jsb2NrNyA9IHRoaXMuX2Jsb2Nrc1tfYmk2XTtcblxuXHQgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNyA9IF9ibG9jazcubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcblxuXHQgICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zNyAhPT0gX2Jsb2NrNy52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcyA9IHRoaXMuX2Jsb2NrU3RhcnRQb3MoX2JpNikgKyBfYmxvY2tJbnB1dFBvczc7XG5cdCAgICAgICAgICAgIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleCA9IF9iaTY7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXggIT0gbnVsbCAmJiBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zICE9IG51bGwpIHtcblx0ICAgICAgICAgIGZvciAodmFyIF9iaTcgPSBmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXg7IF9iaTcgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK19iaTcpIHtcblx0ICAgICAgICAgICAgdmFyIF9ibG9jazggPSB0aGlzLl9ibG9ja3NbX2JpN107XG5cblx0ICAgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zOCA9IF9ibG9jazgubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5GT1JDRV9SSUdIVCk7XG5cblx0ICAgICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zOCAhPT0gX2Jsb2NrOC52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk3KSArIF9ibG9ja0lucHV0UG9zODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfUklHSFQgPyB0aGlzLnZhbHVlLmxlbmd0aCA6IGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3M7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZm9yICh2YXIgX2JpOCA9IE1hdGgubWluKHNlYXJjaEJsb2NrSW5kZXgsIHRoaXMuX2Jsb2Nrcy5sZW5ndGggLSAxKTsgX2JpOCA+PSAwOyAtLV9iaTgpIHtcblx0ICAgICAgICAgIHZhciBfYmxvY2s5ID0gdGhpcy5fYmxvY2tzW19iaThdO1xuXG5cdCAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M5ID0gX2Jsb2NrOS5uZWFyZXN0SW5wdXRQb3MoX2Jsb2NrOS52YWx1ZS5sZW5ndGgsIERJUkVDVElPTi5MRUZUKTtcblxuXHQgICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zOSAhPT0gMCkge1xuXHQgICAgICAgICAgICB2YXIgYWxpZ25lZFBvcyA9IHRoaXMuX2Jsb2NrU3RhcnRQb3MoX2JpOCkgKyBfYmxvY2tJbnB1dFBvczk7XG5cblx0ICAgICAgICAgICAgaWYgKGFsaWduZWRQb3MgPj0gY3Vyc29yUG9zKSByZXR1cm4gYWxpZ25lZFBvcztcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGN1cnNvclBvcztcblx0ICAgIH1cblx0ICAgIC8qKiBHZXQgYmxvY2sgYnkgbmFtZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm1hc2tlZEJsb2NrXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbWFza2VkQmxvY2sobmFtZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5tYXNrZWRCbG9ja3MobmFtZSlbMF07XG5cdCAgICB9XG5cdCAgICAvKiogR2V0IGFsbCBibG9ja3MgYnkgbmFtZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm1hc2tlZEJsb2Nrc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG1hc2tlZEJsb2NrcyhuYW1lKSB7XG5cdCAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBpbmRpY2VzID0gdGhpcy5fbWFza2VkQmxvY2tzW25hbWVdO1xuXHQgICAgICBpZiAoIWluZGljZXMpIHJldHVybiBbXTtcblx0ICAgICAgcmV0dXJuIGluZGljZXMubWFwKGZ1bmN0aW9uIChnaSkge1xuXHQgICAgICAgIHJldHVybiBfdGhpczQuX2Jsb2Nrc1tnaV07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzdGF0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwic3RhdGVcIiwgdGhpcyksIHtcblx0ICAgICAgICBfYmxvY2tzOiB0aGlzLl9ibG9ja3MubWFwKGZ1bmN0aW9uIChiKSB7XG5cdCAgICAgICAgICByZXR1cm4gYi5zdGF0ZTtcblx0ICAgICAgICB9KVxuXHQgICAgICB9KTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICB2YXIgX2Jsb2NrcyA9IHN0YXRlLl9ibG9ja3MsXG5cdCAgICAgICAgICBtYXNrZWRTdGF0ZSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzdGF0ZSwgW1wiX2Jsb2Nrc1wiXSk7XG5cblx0ICAgICAgdGhpcy5fYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIsIGJpKSB7XG5cdCAgICAgICAgcmV0dXJuIGIuc3RhdGUgPSBfYmxvY2tzW2JpXTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInN0YXRlXCIsIG1hc2tlZFN0YXRlLCB0aGlzLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MuZXZlcnkoZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICByZXR1cm4gYi5pc0NvbXBsZXRlO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIGIpIHtcblx0ICAgICAgICByZXR1cm4gc3RyICs9IGIudW5tYXNrZWRWYWx1ZTtcblx0ICAgICAgfSwgJycpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ2YWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIC8vIFRPRE8gcmV0dXJuIF92YWx1ZSB3aGVuIG5vdCBpbiBjaGFuZ2U/XG5cdCAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIGIpIHtcblx0ICAgICAgICByZXR1cm4gc3RyICs9IGIudmFsdWU7XG5cdCAgICAgIH0sICcnKTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwidmFsdWVcIiwgdmFsdWUsIHRoaXMsIHRydWUpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrZWRQYXR0ZXJuO1xuXHR9KE1hc2tlZCk7XG5cdE1hc2tlZFBhdHRlcm4uREVGQVVMVFMgPSB7XG5cdCAgbGF6eTogdHJ1ZSxcblx0ICBwbGFjZWhvbGRlckNoYXI6ICdfJ1xuXHR9O1xuXHRNYXNrZWRQYXR0ZXJuLlNUT1BfQ0hBUiA9ICdgJztcblx0TWFza2VkUGF0dGVybi5FU0NBUEVfQ0hBUiA9ICdcXFxcJztcblx0TWFza2VkUGF0dGVybi5JbnB1dERlZmluaXRpb24gPSBQYXR0ZXJuSW5wdXREZWZpbml0aW9uO1xuXHRNYXNrZWRQYXR0ZXJuLkZpeGVkRGVmaW5pdGlvbiA9IFBhdHRlcm5GaXhlZERlZmluaXRpb247XG5cblx0ZnVuY3Rpb24gaXNJbnB1dChibG9jaykge1xuXHQgIGlmICghYmxvY2spIHJldHVybiBmYWxzZTtcblx0ICB2YXIgdmFsdWUgPSBibG9jay52YWx1ZTtcblx0ICByZXR1cm4gIXZhbHVlIHx8IGJsb2NrLm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uTk9ORSkgIT09IHZhbHVlLmxlbmd0aDtcblx0fVxuXG5cdElNYXNrLk1hc2tlZFBhdHRlcm4gPSBNYXNrZWRQYXR0ZXJuO1xuXG5cdC8qKiBQYXR0ZXJuIHdoaWNoIGFjY2VwdHMgcmFuZ2VzICovXG5cblx0dmFyIE1hc2tlZFJhbmdlID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoX01hc2tlZFBhdHRlcm4pIHtcblx0ICBfaW5oZXJpdHMoTWFza2VkUmFuZ2UsIF9NYXNrZWRQYXR0ZXJuKTtcblxuXHQgIGZ1bmN0aW9uIE1hc2tlZFJhbmdlKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZFJhbmdlKTtcblxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWRSYW5nZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKE1hc2tlZFJhbmdlLCBbe1xuXHQgICAga2V5OiBcIl91cGRhdGVcIixcblxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIC8vIFRPRE8gdHlwZVxuXHQgICAgICBvcHRzID0gT2JqZWN0LmFzc2lnbih7XG5cdCAgICAgICAgdG86IHRoaXMudG8gfHwgMCxcblx0ICAgICAgICBmcm9tOiB0aGlzLmZyb20gfHwgMFxuXHQgICAgICB9LCBvcHRzKTtcblx0ICAgICAgdmFyIG1heExlbmd0aCA9IFN0cmluZyhvcHRzLnRvKS5sZW5ndGg7XG5cdCAgICAgIGlmIChvcHRzLm1heExlbmd0aCAhPSBudWxsKSBtYXhMZW5ndGggPSBNYXRoLm1heChtYXhMZW5ndGgsIG9wdHMubWF4TGVuZ3RoKTtcblx0ICAgICAgb3B0cy5tYXhMZW5ndGggPSBtYXhMZW5ndGg7XG5cdCAgICAgIHZhciBmcm9tU3RyID0gU3RyaW5nKG9wdHMuZnJvbSkucGFkU3RhcnQobWF4TGVuZ3RoLCAnMCcpO1xuXHQgICAgICB2YXIgdG9TdHIgPSBTdHJpbmcob3B0cy50bykucGFkU3RhcnQobWF4TGVuZ3RoLCAnMCcpO1xuXHQgICAgICB2YXIgc2FtZUNoYXJzQ291bnQgPSAwO1xuXG5cdCAgICAgIHdoaWxlIChzYW1lQ2hhcnNDb3VudCA8IHRvU3RyLmxlbmd0aCAmJiB0b1N0cltzYW1lQ2hhcnNDb3VudF0gPT09IGZyb21TdHJbc2FtZUNoYXJzQ291bnRdKSB7XG5cdCAgICAgICAgKytzYW1lQ2hhcnNDb3VudDtcblx0ICAgICAgfVxuXG5cdCAgICAgIG9wdHMubWFzayA9IHRvU3RyLnNsaWNlKDAsIHNhbWVDaGFyc0NvdW50KS5yZXBsYWNlKC8wL2csICdcXFxcMCcpICsgJzAnLnJlcGVhdChtYXhMZW5ndGggLSBzYW1lQ2hhcnNDb3VudCk7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJib3VuZGFyaWVzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYm91bmRhcmllcyhzdHIpIHtcblx0ICAgICAgdmFyIG1pbnN0ciA9ICcnO1xuXHQgICAgICB2YXIgbWF4c3RyID0gJyc7XG5cblx0ICAgICAgdmFyIF9yZWYgPSBzdHIubWF0Y2goL14oXFxEKikoXFxkKikoXFxEKikvKSB8fCBbXSxcblx0ICAgICAgICAgIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMyksXG5cdCAgICAgICAgICBwbGFjZWhvbGRlciA9IF9yZWYyWzFdLFxuXHQgICAgICAgICAgbnVtID0gX3JlZjJbMl07XG5cblx0ICAgICAgaWYgKG51bSkge1xuXHQgICAgICAgIG1pbnN0ciA9ICcwJy5yZXBlYXQocGxhY2Vob2xkZXIubGVuZ3RoKSArIG51bTtcblx0ICAgICAgICBtYXhzdHIgPSAnOScucmVwZWF0KHBsYWNlaG9sZGVyLmxlbmd0aCkgKyBudW07XG5cdCAgICAgIH1cblxuXHQgICAgICBtaW5zdHIgPSBtaW5zdHIucGFkRW5kKHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuXHQgICAgICBtYXhzdHIgPSBtYXhzdHIucGFkRW5kKHRoaXMubWF4TGVuZ3RoLCAnOScpO1xuXHQgICAgICByZXR1cm4gW21pbnN0ciwgbWF4c3RyXTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvUHJlcGFyZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvUHJlcGFyZShzdHIpIHtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgc3RyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJkb1ByZXBhcmVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHIsIGZsYWdzKS5yZXBsYWNlKC9cXEQvZywgJycpO1xuXHQgICAgICBpZiAoIXRoaXMuYXV0b2ZpeCkgcmV0dXJuIHN0cjtcblx0ICAgICAgdmFyIGZyb21TdHIgPSBTdHJpbmcodGhpcy5mcm9tKS5wYWRTdGFydCh0aGlzLm1heExlbmd0aCwgJzAnKTtcblx0ICAgICAgdmFyIHRvU3RyID0gU3RyaW5nKHRoaXMudG8pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuXHQgICAgICB2YXIgdmFsID0gdGhpcy52YWx1ZTtcblx0ICAgICAgdmFyIHByZXBTdHIgPSAnJztcblxuXHQgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgc3RyLmxlbmd0aDsgKytjaSkge1xuXHQgICAgICAgIHZhciBuZXh0VmFsID0gdmFsICsgcHJlcFN0ciArIHN0cltjaV07XG5cblx0ICAgICAgICB2YXIgX3RoaXMkYm91bmRhcmllcyA9IHRoaXMuYm91bmRhcmllcyhuZXh0VmFsKSxcblx0ICAgICAgICAgICAgX3RoaXMkYm91bmRhcmllczIgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRib3VuZGFyaWVzLCAyKSxcblx0ICAgICAgICAgICAgbWluc3RyID0gX3RoaXMkYm91bmRhcmllczJbMF0sXG5cdCAgICAgICAgICAgIG1heHN0ciA9IF90aGlzJGJvdW5kYXJpZXMyWzFdO1xuXG5cdCAgICAgICAgaWYgKE51bWJlcihtYXhzdHIpIDwgdGhpcy5mcm9tKSBwcmVwU3RyICs9IGZyb21TdHJbbmV4dFZhbC5sZW5ndGggLSAxXTtlbHNlIGlmIChOdW1iZXIobWluc3RyKSA+IHRoaXMudG8pIHByZXBTdHIgKz0gdG9TdHJbbmV4dFZhbC5sZW5ndGggLSAxXTtlbHNlIHByZXBTdHIgKz0gc3RyW2NpXTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBwcmVwU3RyO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9WYWxpZGF0ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XG5cdCAgICAgIHZhciBfZ2V0MjtcblxuXHQgICAgICB2YXIgc3RyID0gdGhpcy52YWx1ZTtcblx0ICAgICAgdmFyIGZpcnN0Tm9uWmVybyA9IHN0ci5zZWFyY2goL1teMF0vKTtcblx0ICAgICAgaWYgKGZpcnN0Tm9uWmVybyA9PT0gLTEgJiYgc3RyLmxlbmd0aCA8PSB0aGlzLl9tYXRjaEZyb20pIHJldHVybiB0cnVlO1xuXG5cdCAgICAgIHZhciBfdGhpcyRib3VuZGFyaWVzMyA9IHRoaXMuYm91bmRhcmllcyhzdHIpLFxuXHQgICAgICAgICAgX3RoaXMkYm91bmRhcmllczQgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRib3VuZGFyaWVzMywgMiksXG5cdCAgICAgICAgICBtaW5zdHIgPSBfdGhpcyRib3VuZGFyaWVzNFswXSxcblx0ICAgICAgICAgIG1heHN0ciA9IF90aGlzJGJvdW5kYXJpZXM0WzFdO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdGhpcy5mcm9tIDw9IE51bWJlcihtYXhzdHIpICYmIE51bWJlcihtaW5zdHIpIDw9IHRoaXMudG8gJiYgKF9nZXQyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX21hdGNoRnJvbVwiLFxuXG5cdCAgICAvKipcclxuXHQgICAgICBPcHRpb25hbGx5IHNldHMgbWF4IGxlbmd0aCBvZiBwYXR0ZXJuLlxyXG5cdCAgICAgIFVzZWQgd2hlbiBwYXR0ZXJuIGxlbmd0aCBpcyBsb25nZXIgdGhlbiBgdG9gIHBhcmFtIGxlbmd0aC4gUGFkcyB6ZXJvcyBhdCBzdGFydCBpbiB0aGlzIGNhc2UuXHJcblx0ICAgICovXG5cblx0ICAgIC8qKiBNaW4gYm91bmQgKi9cblxuXHQgICAgLyoqIE1heCBib3VuZCAqL1xuXG5cdCAgICAvKiogKi9cblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5tYXhMZW5ndGggLSBTdHJpbmcodGhpcy5mcm9tKS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImlzQ29tcGxldGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJpc0NvbXBsZXRlXCIsIHRoaXMpICYmIEJvb2xlYW4odGhpcy52YWx1ZSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIE1hc2tlZFJhbmdlO1xuXHR9KE1hc2tlZFBhdHRlcm4pO1xuXHRJTWFzay5NYXNrZWRSYW5nZSA9IE1hc2tlZFJhbmdlO1xuXG5cdC8qKiBEYXRlIG1hc2sgKi9cblxuXHR2YXIgTWFza2VkRGF0ZSA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKF9NYXNrZWRQYXR0ZXJuKSB7XG5cdCAgX2luaGVyaXRzKE1hc2tlZERhdGUsIF9NYXNrZWRQYXR0ZXJuKTtcblxuXHQgIC8qKiBQYXR0ZXJuIG1hc2sgZm9yIGRhdGUgYWNjb3JkaW5nIHRvIHtAbGluayBNYXNrZWREYXRlI2Zvcm1hdH0gKi9cblxuXHQgIC8qKiBTdGFydCBkYXRlICovXG5cblx0ICAvKiogRW5kIGRhdGUgKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqXHJcblx0ICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcblx0ICAqL1xuXHQgIGZ1bmN0aW9uIE1hc2tlZERhdGUob3B0cykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZERhdGUpO1xuXG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1hc2tlZERhdGUpLmNhbGwodGhpcywgT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkRGF0ZS5ERUZBVUxUUywge30sIG9wdHMpKSk7XG5cdCAgfVxuXHQgIC8qKlxyXG5cdCAgICBAb3ZlcnJpZGVcclxuXHQgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyhNYXNrZWREYXRlLCBbe1xuXHQgICAga2V5OiBcIl91cGRhdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKG9wdHMpIHtcblx0ICAgICAgaWYgKG9wdHMubWFzayA9PT0gRGF0ZSkgZGVsZXRlIG9wdHMubWFzaztcblx0ICAgICAgaWYgKG9wdHMucGF0dGVybikgb3B0cy5tYXNrID0gb3B0cy5wYXR0ZXJuO1xuXHQgICAgICB2YXIgYmxvY2tzID0gb3B0cy5ibG9ja3M7XG5cdCAgICAgIG9wdHMuYmxvY2tzID0gT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkRGF0ZS5HRVRfREVGQVVMVF9CTE9DS1MoKSk7IC8vIGFkanVzdCB5ZWFyIGJsb2NrXG5cblx0ICAgICAgaWYgKG9wdHMubWluKSBvcHRzLmJsb2Nrcy5ZLmZyb20gPSBvcHRzLm1pbi5nZXRGdWxsWWVhcigpO1xuXHQgICAgICBpZiAob3B0cy5tYXgpIG9wdHMuYmxvY2tzLlkudG8gPSBvcHRzLm1heC5nZXRGdWxsWWVhcigpO1xuXG5cdCAgICAgIGlmIChvcHRzLm1pbiAmJiBvcHRzLm1heCAmJiBvcHRzLmJsb2Nrcy5ZLmZyb20gPT09IG9wdHMuYmxvY2tzLlkudG8pIHtcblx0ICAgICAgICBvcHRzLmJsb2Nrcy5tLmZyb20gPSBvcHRzLm1pbi5nZXRNb250aCgpICsgMTtcblx0ICAgICAgICBvcHRzLmJsb2Nrcy5tLnRvID0gb3B0cy5tYXguZ2V0TW9udGgoKSArIDE7XG5cblx0ICAgICAgICBpZiAob3B0cy5ibG9ja3MubS5mcm9tID09PSBvcHRzLmJsb2Nrcy5tLnRvKSB7XG5cdCAgICAgICAgICBvcHRzLmJsb2Nrcy5kLmZyb20gPSBvcHRzLm1pbi5nZXREYXRlKCk7XG5cdCAgICAgICAgICBvcHRzLmJsb2Nrcy5kLnRvID0gb3B0cy5tYXguZ2V0RGF0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIE9iamVjdC5hc3NpZ24ob3B0cy5ibG9ja3MsIGJsb2Nrcyk7IC8vIGFkZCBhdXRvZml4XG5cblx0ICAgICAgT2JqZWN0LmtleXMob3B0cy5ibG9ja3MpLmZvckVhY2goZnVuY3Rpb24gKGJrKSB7XG5cdCAgICAgICAgdmFyIGIgPSBvcHRzLmJsb2Nrc1tia107XG5cdCAgICAgICAgaWYgKCEoJ2F1dG9maXgnIGluIGIpKSBiLmF1dG9maXggPSBvcHRzLmF1dG9maXg7XG5cdCAgICAgIH0pO1xuXG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZERhdGUucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcblx0ICAgICAgdmFyIF9nZXQyO1xuXG5cdCAgICAgIHZhciBkYXRlID0gdGhpcy5kYXRlO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gKF9nZXQyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRGF0ZS5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzXS5jb25jYXQoYXJncykpICYmICghdGhpcy5pc0NvbXBsZXRlIHx8IHRoaXMuaXNEYXRlRXhpc3QodGhpcy52YWx1ZSkgJiYgZGF0ZSAhPSBudWxsICYmICh0aGlzLm1pbiA9PSBudWxsIHx8IHRoaXMubWluIDw9IGRhdGUpICYmICh0aGlzLm1heCA9PSBudWxsIHx8IGRhdGUgPD0gdGhpcy5tYXgpKTtcblx0ICAgIH1cblx0ICAgIC8qKiBDaGVja3MgaWYgZGF0ZSBpcyBleGlzdHMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpc0RhdGVFeGlzdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRGF0ZUV4aXN0KHN0cikge1xuXHQgICAgICByZXR1cm4gdGhpcy5mb3JtYXQodGhpcy5wYXJzZShzdHIsIHRoaXMpLCB0aGlzKS5pbmRleE9mKHN0cikgPj0gMDtcblx0ICAgIH1cblx0ICAgIC8qKiBQYXJzZWQgRGF0ZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRhdGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50eXBlZFZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KGRhdGUpIHtcblx0ICAgICAgdGhpcy50eXBlZFZhbHVlID0gZGF0ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInR5cGVkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlID8gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRGF0ZS5wcm90b3R5cGUpLCBcInR5cGVkVmFsdWVcIiwgdGhpcykgOiBudWxsO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZERhdGUucHJvdG90eXBlKSwgXCJ0eXBlZFZhbHVlXCIsIHZhbHVlLCB0aGlzLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkRGF0ZTtcblx0fShNYXNrZWRQYXR0ZXJuKTtcblx0TWFza2VkRGF0ZS5ERUZBVUxUUyA9IHtcblx0ICBwYXR0ZXJuOiAnZHsufWBtey59YFknLFxuXHQgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHtcblx0ICAgIHZhciBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG5cdCAgICB2YXIgbW9udGggPSBTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcblx0ICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHQgICAgcmV0dXJuIFtkYXksIG1vbnRoLCB5ZWFyXS5qb2luKCcuJyk7XG5cdCAgfSxcblx0ICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG5cdCAgICB2YXIgX3N0ciRzcGxpdCA9IHN0ci5zcGxpdCgnLicpLFxuXHQgICAgICAgIF9zdHIkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3N0ciRzcGxpdCwgMyksXG5cdCAgICAgICAgZGF5ID0gX3N0ciRzcGxpdDJbMF0sXG5cdCAgICAgICAgbW9udGggPSBfc3RyJHNwbGl0MlsxXSxcblx0ICAgICAgICB5ZWFyID0gX3N0ciRzcGxpdDJbMl07XG5cblx0ICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XG5cdCAgfVxuXHR9O1xuXG5cdE1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICBkOiB7XG5cdCAgICAgIG1hc2s6IE1hc2tlZFJhbmdlLFxuXHQgICAgICBmcm9tOiAxLFxuXHQgICAgICB0bzogMzEsXG5cdCAgICAgIG1heExlbmd0aDogMlxuXHQgICAgfSxcblx0ICAgIG06IHtcblx0ICAgICAgbWFzazogTWFza2VkUmFuZ2UsXG5cdCAgICAgIGZyb206IDEsXG5cdCAgICAgIHRvOiAxMixcblx0ICAgICAgbWF4TGVuZ3RoOiAyXG5cdCAgICB9LFxuXHQgICAgWToge1xuXHQgICAgICBtYXNrOiBNYXNrZWRSYW5nZSxcblx0ICAgICAgZnJvbTogMTkwMCxcblx0ICAgICAgdG86IDk5OTlcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cdElNYXNrLk1hc2tlZERhdGUgPSBNYXNrZWREYXRlO1xuXG5cdC8qKlxyXG5cdCAgR2VuZXJpYyBlbGVtZW50IEFQSSB0byB1c2Ugd2l0aCBtYXNrXHJcblx0ICBAaW50ZXJmYWNlXHJcblx0Ki9cblx0dmFyIE1hc2tFbGVtZW50ID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gTWFza0VsZW1lbnQoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza0VsZW1lbnQpO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhNYXNrRWxlbWVudCwgW3tcblx0ICAgIGtleTogXCJzZWxlY3RcIixcblxuXHQgICAgLyoqIFNhZmVseSBzZXRzIGVsZW1lbnQgc2VsZWN0aW9uICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0KHN0YXJ0LCBlbmQpIHtcblx0ICAgICAgaWYgKHN0YXJ0ID09IG51bGwgfHwgZW5kID09IG51bGwgfHwgc3RhcnQgPT09IHRoaXMuc2VsZWN0aW9uU3RhcnQgJiYgZW5kID09PSB0aGlzLnNlbGVjdGlvbkVuZCkgcmV0dXJuO1xuXG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdGhpcy5fdW5zYWZlU2VsZWN0KHN0YXJ0LCBlbmQpO1xuXHQgICAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgfVxuXHQgICAgLyoqIFNob3VsZCBiZSBvdmVycmlkZW4gaW4gc3ViY2xhc3NlcyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl91bnNhZmVTZWxlY3RcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfdW5zYWZlU2VsZWN0KHN0YXJ0LCBlbmQpIHt9XG5cdCAgICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYmluZEV2ZW50c1wiLFxuXG5cdCAgICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEV2ZW50cyhoYW5kbGVycykge31cblx0ICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bmJpbmRFdmVudHNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRFdmVudHMoKSB7fVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzZWxlY3Rpb25TdGFydFwiLFxuXG5cdCAgICAvKiogKi9cblxuXHQgICAgLyoqICovXG5cblx0ICAgIC8qKiAqL1xuXG5cdCAgICAvKiogU2FmZWx5IHJldHVybnMgc2VsZWN0aW9uIHN0YXJ0ICovXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgdmFyIHN0YXJ0O1xuXG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgc3RhcnQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydDtcblx0ICAgICAgfSBjYXRjaCAoZSkge31cblxuXHQgICAgICByZXR1cm4gc3RhcnQgIT0gbnVsbCA/IHN0YXJ0IDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgICAvKiogU2FmZWx5IHJldHVybnMgc2VsZWN0aW9uIGVuZCAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInNlbGVjdGlvbkVuZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHZhciBlbmQ7XG5cblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBlbmQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25FbmQ7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cblx0ICAgICAgcmV0dXJuIGVuZCAhPSBudWxsID8gZW5kIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImlzQWN0aXZlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrRWxlbWVudDtcblx0fSgpO1xuXHRJTWFzay5NYXNrRWxlbWVudCA9IE1hc2tFbGVtZW50O1xuXG5cdC8qKiBCcmlkZ2UgYmV0d2VlbiBIVE1MRWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cblxuXHR2YXIgSFRNTE1hc2tFbGVtZW50ID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoX01hc2tFbGVtZW50KSB7XG5cdCAgX2luaGVyaXRzKEhUTUxNYXNrRWxlbWVudCwgX01hc2tFbGVtZW50KTtcblxuXHQgIC8qKiBNYXBwaW5nIGJldHdlZW4gSFRNTEVsZW1lbnQgZXZlbnRzIGFuZCBtYXNrIGludGVybmFsIGV2ZW50cyAqL1xuXG5cdCAgLyoqIEhUTUxFbGVtZW50IHRvIHVzZSBtYXNrIG9uICovXG5cblx0ICAvKipcclxuXHQgICAgQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR9IGlucHV0XHJcblx0ICAqL1xuXHQgIGZ1bmN0aW9uIEhUTUxNYXNrRWxlbWVudChpbnB1dCkge1xuXHQgICAgdmFyIF90aGlzO1xuXG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSFRNTE1hc2tFbGVtZW50KTtcblxuXHQgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoSFRNTE1hc2tFbGVtZW50KS5jYWxsKHRoaXMpKTtcblx0ICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XG5cdCAgICBfdGhpcy5faGFuZGxlcnMgPSB7fTtcblx0ICAgIHJldHVybiBfdGhpcztcblx0ICB9XG5cdCAgLyoqICovXG5cdCAgLy8gJEZsb3dGaXhNZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjgzOVxuXG5cblx0ICBfY3JlYXRlQ2xhc3MoSFRNTE1hc2tFbGVtZW50LCBbe1xuXHQgICAga2V5OiBcIl91bnNhZmVTZWxlY3RcIixcblxuXHQgICAgLyoqXHJcblx0ICAgICAgU2V0cyBIVE1MRWxlbWVudCBzZWxlY3Rpb25cclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfdW5zYWZlU2VsZWN0KHN0YXJ0LCBlbmQpIHtcblx0ICAgICAgdGhpcy5pbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEhUTUxFbGVtZW50IHZhbHVlXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYmluZEV2ZW50c1wiLFxuXG5cdCAgICAvKipcclxuXHQgICAgICBCaW5kcyBIVE1MRWxlbWVudCBldmVudHMgdG8gbWFzayBpbnRlcm5hbCBldmVudHNcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kRXZlbnRzKGhhbmRsZXJzKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdCAgICAgIE9iamVjdC5rZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgIHJldHVybiBfdGhpczIuX3RvZ2dsZUV2ZW50SGFuZGxlcihIVE1MTWFza0VsZW1lbnQuRVZFTlRTX01BUFtldmVudF0sIGhhbmRsZXJzW2V2ZW50XSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgVW5iaW5kcyBIVE1MRWxlbWVudCBldmVudHMgdG8gbWFzayBpbnRlcm5hbCBldmVudHNcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bmJpbmRFdmVudHNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRFdmVudHMoKSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdCAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2hhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgIHJldHVybiBfdGhpczMuX3RvZ2dsZUV2ZW50SGFuZGxlcihldmVudCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3RvZ2dsZUV2ZW50SGFuZGxlclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF90b2dnbGVFdmVudEhhbmRsZXIoZXZlbnQsIGhhbmRsZXIpIHtcblx0ICAgICAgaWYgKHRoaXMuX2hhbmRsZXJzW2V2ZW50XSkge1xuXHQgICAgICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5faGFuZGxlcnNbZXZlbnRdKTtcblx0ICAgICAgICBkZWxldGUgdGhpcy5faGFuZGxlcnNbZXZlbnRdO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGhhbmRsZXIpIHtcblx0ICAgICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuXHQgICAgICAgIHRoaXMuX2hhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXI7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicm9vdEVsZW1lbnRcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5pbnB1dC5nZXRSb290Tm9kZSA/IHRoaXMuaW5wdXQuZ2V0Um9vdE5vZGUoKSA6IGRvY3VtZW50O1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgSXMgZWxlbWVudCBpbiBmb2N1c1xyXG5cdCAgICAgIEByZWFkb25seVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImlzQWN0aXZlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgLy8kRmxvd0ZpeE1lXG5cdCAgICAgIHJldHVybiB0aGlzLmlucHV0ID09PSB0aGlzLnJvb3RFbGVtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBzdGFydFxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl91bnNhZmVTZWxlY3Rpb25TdGFydFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmlucHV0LnNlbGVjdGlvblN0YXJ0O1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgUmV0dXJucyBIVE1MRWxlbWVudCBzZWxlY3Rpb24gZW5kXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdGlvbkVuZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmlucHV0LnNlbGVjdGlvbkVuZDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICB0aGlzLmlucHV0LnZhbHVlID0gdmFsdWU7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIEhUTUxNYXNrRWxlbWVudDtcblx0fShNYXNrRWxlbWVudCk7XG5cdEhUTUxNYXNrRWxlbWVudC5FVkVOVFNfTUFQID0ge1xuXHQgIHNlbGVjdGlvbkNoYW5nZTogJ2tleWRvd24nLFxuXHQgIGlucHV0OiAnaW5wdXQnLFxuXHQgIGRyb3A6ICdkcm9wJyxcblx0ICBjbGljazogJ2NsaWNrJyxcblx0ICBmb2N1czogJ2ZvY3VzJyxcblx0ICBjb21taXQ6ICdibHVyJ1xuXHR9O1xuXHRJTWFzay5IVE1MTWFza0VsZW1lbnQgPSBIVE1MTWFza0VsZW1lbnQ7XG5cblx0dmFyIEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKF9IVE1MTWFza0VsZW1lbnQpIHtcblx0ICBfaW5oZXJpdHMoSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50LCBfSFRNTE1hc2tFbGVtZW50KTtcblxuXHQgIGZ1bmN0aW9uIEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCgpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQpO1xuXG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCwgW3tcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0XCIsXG5cblx0ICAgIC8qKlxyXG5cdCAgICAgIFNldHMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKSB7XG5cdCAgICAgIGlmICghdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSkgcmV0dXJuO1xuXHQgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnJvb3RFbGVtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdCAgICAgIHJhbmdlLnNldFN0YXJ0KHRoaXMuaW5wdXQuZmlyc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBzdGFydCk7XG5cdCAgICAgIHJhbmdlLnNldEVuZCh0aGlzLmlucHV0Lmxhc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBlbmQpO1xuXHQgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cdCAgICAgIHZhciBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xuXG5cdCAgICAgIGlmIChzZWxlY3Rpb24pIHtcblx0ICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdCAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgSFRNTEVsZW1lbnQgdmFsdWVcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uU3RhcnRcIixcblxuXHQgICAgLyoqXHJcblx0ICAgICAgUmV0dXJucyBIVE1MRWxlbWVudCBzZWxlY3Rpb24gc3RhcnRcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cdCAgICAgIHZhciBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xuXHQgICAgICByZXR1cm4gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBlbmRcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uRW5kXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3RFbGVtZW50O1xuXHQgICAgICB2YXIgc2VsZWN0aW9uID0gcm9vdC5nZXRTZWxlY3Rpb24gJiYgcm9vdC5nZXRTZWxlY3Rpb24oKTtcblx0ICAgICAgcmV0dXJuIHNlbGVjdGlvbiAmJiB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydCArIFN0cmluZyhzZWxlY3Rpb24pLmxlbmd0aDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAvLyAkRmxvd0ZpeE1lXG5cdCAgICAgIHJldHVybiB0aGlzLmlucHV0LnRleHRDb250ZW50O1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50O1xuXHR9KEhUTUxNYXNrRWxlbWVudCk7XG5cdElNYXNrLkhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCA9IEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudDtcblxuXHQvKiogTGlzdGVucyB0byBlbGVtZW50IGV2ZW50cyBhbmQgY29udHJvbHMgY2hhbmdlcyBiZXR3ZWVuIGVsZW1lbnQgYW5kIHtAbGluayBNYXNrZWR9ICovXG5cblx0dmFyIElucHV0TWFzayA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKCkge1xuXHQgIC8qKlxyXG5cdCAgICBWaWV3IGVsZW1lbnRcclxuXHQgICAgQHJlYWRvbmx5XHJcblx0ICAqL1xuXG5cdCAgLyoqXHJcblx0ICAgIEludGVybmFsIHtAbGluayBNYXNrZWR9IG1vZGVsXHJcblx0ICAgIEByZWFkb25seVxyXG5cdCAgKi9cblxuXHQgIC8qKlxyXG5cdCAgICBAcGFyYW0ge01hc2tFbGVtZW50fEhUTUxJbnB1dEVsZW1lbnR8SFRNTFRleHRBcmVhRWxlbWVudH0gZWxcclxuXHQgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuXHQgICovXG5cdCAgZnVuY3Rpb24gSW5wdXRNYXNrKGVsLCBvcHRzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRNYXNrKTtcblxuXHQgICAgdGhpcy5lbCA9IGVsIGluc3RhbmNlb2YgTWFza0VsZW1lbnQgPyBlbCA6IGVsLmlzQ29udGVudEVkaXRhYmxlICYmIGVsLnRhZ05hbWUgIT09ICdJTlBVVCcgJiYgZWwudGFnTmFtZSAhPT0gJ1RFWFRBUkVBJyA/IG5ldyBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQoZWwpIDogbmV3IEhUTUxNYXNrRWxlbWVudChlbCk7XG5cdCAgICB0aGlzLm1hc2tlZCA9IGNyZWF0ZU1hc2sob3B0cyk7XG5cdCAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcblx0ICAgIHRoaXMuX3ZhbHVlID0gJyc7XG5cdCAgICB0aGlzLl91bm1hc2tlZFZhbHVlID0gJyc7XG5cdCAgICB0aGlzLl9zYXZlU2VsZWN0aW9uID0gdGhpcy5fc2F2ZVNlbGVjdGlvbi5iaW5kKHRoaXMpO1xuXHQgICAgdGhpcy5fb25JbnB1dCA9IHRoaXMuX29uSW5wdXQuYmluZCh0aGlzKTtcblx0ICAgIHRoaXMuX29uQ2hhbmdlID0gdGhpcy5fb25DaGFuZ2UuYmluZCh0aGlzKTtcblx0ICAgIHRoaXMuX29uRHJvcCA9IHRoaXMuX29uRHJvcC5iaW5kKHRoaXMpO1xuXHQgICAgdGhpcy5fb25Gb2N1cyA9IHRoaXMuX29uRm9jdXMuYmluZCh0aGlzKTtcblx0ICAgIHRoaXMuX29uQ2xpY2sgPSB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyk7XG5cdCAgICB0aGlzLmFsaWduQ3Vyc29yID0gdGhpcy5hbGlnbkN1cnNvci5iaW5kKHRoaXMpO1xuXHQgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5ID0gdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5LmJpbmQodGhpcyk7XG5cblx0ICAgIHRoaXMuX2JpbmRFdmVudHMoKTsgLy8gcmVmcmVzaFxuXG5cblx0ICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcblxuXHQgICAgdGhpcy5fb25DaGFuZ2UoKTtcblx0ICB9XG5cdCAgLyoqIFJlYWQgb3IgdXBkYXRlIG1hc2sgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKElucHV0TWFzaywgW3tcblx0ICAgIGtleTogXCJtYXNrRXF1YWxzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbWFza0VxdWFscyhtYXNrKSB7XG5cdCAgICAgIHJldHVybiBtYXNrID09IG51bGwgfHwgbWFzayA9PT0gdGhpcy5tYXNrZWQubWFzayB8fCBtYXNrID09PSBEYXRlICYmIHRoaXMubWFza2VkIGluc3RhbmNlb2YgTWFza2VkRGF0ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2JpbmRFdmVudHNcIixcblxuXHQgICAgLyoqXHJcblx0ICAgICAgU3RhcnRzIGxpc3RlbmluZyB0byBlbGVtZW50IGV2ZW50c1xyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYmluZEV2ZW50cygpIHtcblx0ICAgICAgdGhpcy5lbC5iaW5kRXZlbnRzKHtcblx0ICAgICAgICBzZWxlY3Rpb25DaGFuZ2U6IHRoaXMuX3NhdmVTZWxlY3Rpb24sXG5cdCAgICAgICAgaW5wdXQ6IHRoaXMuX29uSW5wdXQsXG5cdCAgICAgICAgZHJvcDogdGhpcy5fb25Ecm9wLFxuXHQgICAgICAgIGNsaWNrOiB0aGlzLl9vbkNsaWNrLFxuXHQgICAgICAgIGZvY3VzOiB0aGlzLl9vbkZvY3VzLFxuXHQgICAgICAgIGNvbW1pdDogdGhpcy5fb25DaGFuZ2Vcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBTdG9wcyBsaXN0ZW5pbmcgdG8gZWxlbWVudCBldmVudHNcclxuXHQgICAgICBAcHJvdGVjdGVkXHJcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl91bmJpbmRFdmVudHNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfdW5iaW5kRXZlbnRzKCkge1xuXHQgICAgICBpZiAodGhpcy5lbCkgdGhpcy5lbC51bmJpbmRFdmVudHMoKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEZpcmVzIGN1c3RvbSBldmVudFxyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2ZpcmVFdmVudFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maXJlRXZlbnQoZXYpIHtcblx0ICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldl07XG5cdCAgICAgIGlmICghbGlzdGVuZXJzKSByZXR1cm47XG5cdCAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG5cdCAgICAgICAgcmV0dXJuIGwuYXBwbHkodm9pZCAwLCBhcmdzKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBDdXJyZW50IHNlbGVjdGlvbiBzdGFydFxyXG5cdCAgICAgIEByZWFkb25seVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9zYXZlU2VsZWN0aW9uXCIsXG5cblx0ICAgIC8qKlxyXG5cdCAgICAgIFN0b3JlcyBjdXJyZW50IHNlbGVjdGlvblxyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfc2F2ZVNlbGVjdGlvbigpXG5cdCAgICAvKiBldiAqL1xuXHQgICAge1xuXHQgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gdGhpcy5lbC52YWx1ZSkge1xuXHQgICAgICAgIGNvbnNvbGUud2FybignRWxlbWVudCB2YWx1ZSB3YXMgY2hhbmdlZCBvdXRzaWRlIG9mIG1hc2suIFN5bmNyb25pemUgbWFzayB1c2luZyBgbWFzay51cGRhdGVWYWx1ZSgpYCB0byB3b3JrIHByb3Blcmx5LicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblx0ICAgICAgfVxuXG5cdCAgICAgIHRoaXMuX3NlbGVjdGlvbiA9IHtcblx0ICAgICAgICBzdGFydDogdGhpcy5zZWxlY3Rpb25TdGFydCxcblx0ICAgICAgICBlbmQ6IHRoaXMuY3Vyc29yUG9zXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKiogU3luY3Jvbml6ZXMgbW9kZWwgdmFsdWUgZnJvbSB2aWV3ICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidXBkYXRlVmFsdWVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVWYWx1ZSgpIHtcblx0ICAgICAgdGhpcy5tYXNrZWQudmFsdWUgPSB0aGlzLmVsLnZhbHVlO1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMubWFza2VkLnZhbHVlO1xuXHQgICAgfVxuXHQgICAgLyoqIFN5bmNyb25pemVzIHZpZXcgZnJvbSBtb2RlbCB2YWx1ZSwgZmlyZXMgY2hhbmdlIGV2ZW50cyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVwZGF0ZUNvbnRyb2xcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVDb250cm9sKCkge1xuXHQgICAgICB2YXIgbmV3VW5tYXNrZWRWYWx1ZSA9IHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XG5cdCAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMubWFza2VkLnZhbHVlO1xuXHQgICAgICB2YXIgaXNDaGFuZ2VkID0gdGhpcy51bm1hc2tlZFZhbHVlICE9PSBuZXdVbm1hc2tlZFZhbHVlIHx8IHRoaXMudmFsdWUgIT09IG5ld1ZhbHVlO1xuXHQgICAgICB0aGlzLl91bm1hc2tlZFZhbHVlID0gbmV3VW5tYXNrZWRWYWx1ZTtcblx0ICAgICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZTtcblx0ICAgICAgaWYgKHRoaXMuZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB0aGlzLmVsLnZhbHVlID0gbmV3VmFsdWU7XG5cdCAgICAgIGlmIChpc0NoYW5nZWQpIHRoaXMuX2ZpcmVDaGFuZ2VFdmVudHMoKTtcblx0ICAgIH1cblx0ICAgIC8qKiBVcGRhdGVzIG9wdGlvbnMgd2l0aCBkZWVwIGVxdWFsIGNoZWNrLCByZWNyZWF0ZXMgQHtsaW5rIE1hc2tlZH0gbW9kZWwgaWYgbWFzayB0eXBlIGNoYW5nZXMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1cGRhdGVPcHRpb25zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhvcHRzKSB7XG5cdCAgICAgIHZhciBtYXNrID0gb3B0cy5tYXNrLFxuXHQgICAgICAgICAgcmVzdE9wdHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0cywgW1wibWFza1wiXSk7XG5cblx0ICAgICAgdmFyIHVwZGF0ZU1hc2sgPSAhdGhpcy5tYXNrRXF1YWxzKG1hc2spO1xuXHQgICAgICB2YXIgdXBkYXRlT3B0cyA9ICFvYmplY3RJbmNsdWRlcyh0aGlzLm1hc2tlZCwgcmVzdE9wdHMpO1xuXHQgICAgICBpZiAodXBkYXRlTWFzaykgdGhpcy5tYXNrID0gbWFzaztcblx0ICAgICAgaWYgKHVwZGF0ZU9wdHMpIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMocmVzdE9wdHMpO1xuXHQgICAgICBpZiAodXBkYXRlTWFzayB8fCB1cGRhdGVPcHRzKSB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcblx0ICAgIH1cblx0ICAgIC8qKiBVcGRhdGVzIGN1cnNvciAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVwZGF0ZUN1cnNvclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpIHtcblx0ICAgICAgaWYgKGN1cnNvclBvcyA9PSBudWxsKSByZXR1cm47XG5cdCAgICAgIHRoaXMuY3Vyc29yUG9zID0gY3Vyc29yUG9zOyAvLyBhbHNvIHF1ZXVlIGNoYW5nZSBjdXJzb3IgZm9yIG1vYmlsZSBicm93c2Vyc1xuXG5cdCAgICAgIHRoaXMuX2RlbGF5VXBkYXRlQ3Vyc29yKGN1cnNvclBvcyk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBEZWxheXMgY3Vyc29yIHVwZGF0ZSB0byBzdXBwb3J0IG1vYmlsZSBicm93c2Vyc1xyXG5cdCAgICAgIEBwcml2YXRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2RlbGF5VXBkYXRlQ3Vyc29yXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGF5VXBkYXRlQ3Vyc29yKGN1cnNvclBvcykge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7XG5cblx0ICAgICAgdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3MgPSBjdXJzb3JQb3M7XG5cdCAgICAgIHRoaXMuX2N1cnNvckNoYW5naW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCFfdGhpcy5lbCkgcmV0dXJuOyAvLyBpZiB3YXMgZGVzdHJveWVkXG5cblx0ICAgICAgICBfdGhpcy5jdXJzb3JQb3MgPSBfdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3M7XG5cblx0ICAgICAgICBfdGhpcy5fYWJvcnRVcGRhdGVDdXJzb3IoKTtcblx0ICAgICAgfSwgMTApO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgRmlyZXMgY3VzdG9tIGV2ZW50c1xyXG5cdCAgICAgIEBwcm90ZWN0ZWRcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfZmlyZUNoYW5nZUV2ZW50c1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maXJlQ2hhbmdlRXZlbnRzKCkge1xuXHQgICAgICB0aGlzLl9maXJlRXZlbnQoJ2FjY2VwdCcsIHRoaXMuX2lucHV0RXZlbnQpO1xuXG5cdCAgICAgIGlmICh0aGlzLm1hc2tlZC5pc0NvbXBsZXRlKSB0aGlzLl9maXJlRXZlbnQoJ2NvbXBsZXRlJywgdGhpcy5faW5wdXRFdmVudCk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBBYm9ydHMgZGVsYXllZCBjdXJzb3IgdXBkYXRlXHJcblx0ICAgICAgQHByaXZhdGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYWJvcnRVcGRhdGVDdXJzb3JcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYWJvcnRVcGRhdGVDdXJzb3IoKSB7XG5cdCAgICAgIGlmICh0aGlzLl9jdXJzb3JDaGFuZ2luZykge1xuXHQgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jdXJzb3JDaGFuZ2luZyk7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuX2N1cnNvckNoYW5naW5nO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKiogQWxpZ25zIGN1cnNvciB0byBuZWFyZXN0IGF2YWlsYWJsZSBwb3NpdGlvbiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFsaWduQ3Vyc29yXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYWxpZ25DdXJzb3IoKSB7XG5cdCAgICAgIHRoaXMuY3Vyc29yUG9zID0gdGhpcy5tYXNrZWQubmVhcmVzdElucHV0UG9zKHRoaXMuY3Vyc29yUG9zLCBESVJFQ1RJT04uTEVGVCk7XG5cdCAgICB9XG5cdCAgICAvKiogQWxpZ25zIGN1cnNvciBvbmx5IGlmIHNlbGVjdGlvbiBpcyBlbXB0eSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFsaWduQ3Vyc29yRnJpZW5kbHlcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhbGlnbkN1cnNvckZyaWVuZGx5KCkge1xuXHQgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCAhPT0gdGhpcy5jdXJzb3JQb3MpIHJldHVybjsgLy8gc2tpcCBpZiByYW5nZSBpcyBzZWxlY3RlZFxuXG5cdCAgICAgIHRoaXMuYWxpZ25DdXJzb3IoKTtcblx0ICAgIH1cblx0ICAgIC8qKiBBZGRzIGxpc3RlbmVyIG9uIGN1c3RvbSBldmVudCAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm9uXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXYsIGhhbmRsZXIpIHtcblx0ICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnNbZXZdKSB0aGlzLl9saXN0ZW5lcnNbZXZdID0gW107XG5cblx0ICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2XS5wdXNoKGhhbmRsZXIpO1xuXG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgLyoqIFJlbW92ZXMgY3VzdG9tIGV2ZW50IGxpc3RlbmVyICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwib2ZmXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2LCBoYW5kbGVyKSB7XG5cdCAgICAgIGlmICghdGhpcy5fbGlzdGVuZXJzW2V2XSkgcmV0dXJuIHRoaXM7XG5cblx0ICAgICAgaWYgKCFoYW5kbGVyKSB7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldl07XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgaEluZGV4ID0gdGhpcy5fbGlzdGVuZXJzW2V2XS5pbmRleE9mKGhhbmRsZXIpO1xuXG5cdCAgICAgIGlmIChoSW5kZXggPj0gMCkgdGhpcy5fbGlzdGVuZXJzW2V2XS5zcGxpY2UoaEluZGV4LCAxKTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgICAvKiogSGFuZGxlcyB2aWV3IGlucHV0IGV2ZW50ICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX29uSW5wdXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfb25JbnB1dChlKSB7XG5cdCAgICAgIHRoaXMuX2lucHV0RXZlbnQgPSBlO1xuXG5cdCAgICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7IC8vIGZpeCBzdHJhbmdlIElFIGJlaGF2aW9yXG5cblxuXHQgICAgICBpZiAoIXRoaXMuX3NlbGVjdGlvbikgcmV0dXJuIHRoaXMudXBkYXRlVmFsdWUoKTtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQWN0aW9uRGV0YWlscyggLy8gbmV3IHN0YXRlXG5cdCAgICAgIHRoaXMuZWwudmFsdWUsIHRoaXMuY3Vyc29yUG9zLCAvLyBvbGQgc3RhdGVcblx0ICAgICAgdGhpcy52YWx1ZSwgdGhpcy5fc2VsZWN0aW9uKTtcblx0ICAgICAgdmFyIG9sZFJhd1ZhbHVlID0gdGhpcy5tYXNrZWQucmF3SW5wdXRWYWx1ZTtcblx0ICAgICAgdmFyIG9mZnNldCA9IHRoaXMubWFza2VkLnNwbGljZShkZXRhaWxzLnN0YXJ0Q2hhbmdlUG9zLCBkZXRhaWxzLnJlbW92ZWQubGVuZ3RoLCBkZXRhaWxzLmluc2VydGVkLCBkZXRhaWxzLnJlbW92ZURpcmVjdGlvbikub2Zmc2V0OyAvLyBmb3JjZSBhbGlnbiBpbiByZW1vdmUgZGlyZWN0aW9uIG9ubHkgaWYgbm8gaW5wdXQgY2hhcnMgd2VyZSByZW1vdmVkXG5cdCAgICAgIC8vIG90aGVyd2lzZSB3ZSBzdGlsbCBuZWVkIHRvIGFsaWduIHdpdGggTk9ORSAodG8gZ2V0IG91dCBmcm9tIGZpeGVkIHN5bWJvbHMgZm9yIGluc3RhbmNlKVxuXG5cdCAgICAgIHZhciByZW1vdmVEaXJlY3Rpb24gPSBvbGRSYXdWYWx1ZSA9PT0gdGhpcy5tYXNrZWQucmF3SW5wdXRWYWx1ZSA/IGRldGFpbHMucmVtb3ZlRGlyZWN0aW9uIDogRElSRUNUSU9OLk5PTkU7XG5cdCAgICAgIHZhciBjdXJzb3JQb3MgPSB0aGlzLm1hc2tlZC5uZWFyZXN0SW5wdXRQb3MoZGV0YWlscy5zdGFydENoYW5nZVBvcyArIG9mZnNldCwgcmVtb3ZlRGlyZWN0aW9uKTtcblx0ICAgICAgdGhpcy51cGRhdGVDb250cm9sKCk7XG5cdCAgICAgIHRoaXMudXBkYXRlQ3Vyc29yKGN1cnNvclBvcyk7XG5cdCAgICAgIGRlbGV0ZSB0aGlzLl9pbnB1dEV2ZW50O1xuXHQgICAgfVxuXHQgICAgLyoqIEhhbmRsZXMgdmlldyBjaGFuZ2UgZXZlbnQgYW5kIGNvbW1pdHMgbW9kZWwgdmFsdWUgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfb25DaGFuZ2VcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XG5cdCAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLmVsLnZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5tYXNrZWQuZG9Db21taXQoKTtcblx0ICAgICAgdGhpcy51cGRhdGVDb250cm9sKCk7XG5cblx0ICAgICAgdGhpcy5fc2F2ZVNlbGVjdGlvbigpO1xuXHQgICAgfVxuXHQgICAgLyoqIEhhbmRsZXMgdmlldyBkcm9wIGV2ZW50LCBwcmV2ZW50cyBieSBkZWZhdWx0ICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX29uRHJvcFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRyb3AoZXYpIHtcblx0ICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgICB9XG5cdCAgICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9vbkZvY3VzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX29uRm9jdXMoZXYpIHtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG5cdCAgICB9XG5cdCAgICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9vbkNsaWNrXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ2xpY2soZXYpIHtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG5cdCAgICB9XG5cdCAgICAvKiogVW5iaW5kIHZpZXcgZXZlbnRzIGFuZCByZW1vdmVzIGVsZW1lbnQgcmVmZXJlbmNlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZGVzdHJveVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdCAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpOyAvLyAkRmxvd0ZpeE1lIHdoeSBub3QgZG8gc28/XG5cblxuXHQgICAgICB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoID0gMDsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgICAgIGRlbGV0ZSB0aGlzLmVsO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJtYXNrXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMubWFza2VkLm1hc2s7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQobWFzaykge1xuXHQgICAgICBpZiAodGhpcy5tYXNrRXF1YWxzKG1hc2spKSByZXR1cm47XG5cblx0ICAgICAgaWYgKCEobWFzayBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgJiYgdGhpcy5tYXNrZWQuY29uc3RydWN0b3IgPT09IG1hc2tlZENsYXNzKG1hc2spKSB7XG5cdCAgICAgICAgdGhpcy5tYXNrZWQudXBkYXRlT3B0aW9ucyh7XG5cdCAgICAgICAgICBtYXNrOiBtYXNrXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIG1hc2tlZCA9IGNyZWF0ZU1hc2soe1xuXHQgICAgICAgIG1hc2s6IG1hc2tcblx0ICAgICAgfSk7XG5cdCAgICAgIG1hc2tlZC51bm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcblx0ICAgICAgdGhpcy5tYXNrZWQgPSBtYXNrZWQ7XG5cdCAgICB9XG5cdCAgICAvKiogUmF3IHZhbHVlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RyKSB7XG5cdCAgICAgIHRoaXMubWFza2VkLnZhbHVlID0gc3RyO1xuXHQgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvcigpO1xuXHQgICAgfVxuXHQgICAgLyoqIFVubWFza2VkIHZhbHVlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl91bm1hc2tlZFZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHN0cikge1xuXHQgICAgICB0aGlzLm1hc2tlZC51bm1hc2tlZFZhbHVlID0gc3RyO1xuXHQgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvcigpO1xuXHQgICAgfVxuXHQgICAgLyoqIFR5cGVkIHVubWFza2VkIHZhbHVlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidHlwZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm1hc2tlZC50eXBlZFZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuXHQgICAgICB0aGlzLm1hc2tlZC50eXBlZFZhbHVlID0gdmFsO1xuXHQgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvcigpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzZWxlY3Rpb25TdGFydFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9jdXJzb3JDaGFuZ2luZyA/IHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zIDogdGhpcy5lbC5zZWxlY3Rpb25TdGFydDtcblx0ICAgIH1cblx0ICAgIC8qKiBDdXJyZW50IGN1cnNvciBwb3NpdGlvbiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImN1cnNvclBvc1wiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9jdXJzb3JDaGFuZ2luZyA/IHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zIDogdGhpcy5lbC5zZWxlY3Rpb25FbmQ7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQocG9zKSB7XG5cdCAgICAgIGlmICghdGhpcy5lbCB8fCAhdGhpcy5lbC5pc0FjdGl2ZSkgcmV0dXJuO1xuXHQgICAgICB0aGlzLmVsLnNlbGVjdChwb3MsIHBvcyk7XG5cblx0ICAgICAgdGhpcy5fc2F2ZVNlbGVjdGlvbigpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBJbnB1dE1hc2s7XG5cdH0oKTtcblx0SU1hc2suSW5wdXRNYXNrID0gSW5wdXRNYXNrO1xuXG5cdC8qKiBQYXR0ZXJuIHdoaWNoIHZhbGlkYXRlcyBlbnVtIHZhbHVlcyAqL1xuXG5cdHZhciBNYXNrZWRFbnVtID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoX01hc2tlZFBhdHRlcm4pIHtcblx0ICBfaW5oZXJpdHMoTWFza2VkRW51bSwgX01hc2tlZFBhdHRlcm4pO1xuXG5cdCAgZnVuY3Rpb24gTWFza2VkRW51bSgpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRFbnVtKTtcblxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWRFbnVtKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkRW51bSwgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcblx0ICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIC8vIFRPRE8gdHlwZVxuXHQgICAgICBpZiAob3B0cy5lbnVtKSBvcHRzLm1hc2sgPSAnKicucmVwZWF0KG9wdHMuZW51bVswXS5sZW5ndGgpO1xuXG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZEVudW0ucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcblx0ICAgICAgdmFyIF90aGlzID0gdGhpcyxcblx0ICAgICAgICAgIF9nZXQyO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdGhpcy5lbnVtLnNvbWUoZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICByZXR1cm4gZS5pbmRleE9mKF90aGlzLnVubWFza2VkVmFsdWUpID49IDA7XG5cdCAgICAgIH0pICYmIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZEVudW0ucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkRW51bTtcblx0fShNYXNrZWRQYXR0ZXJuKTtcblx0SU1hc2suTWFza2VkRW51bSA9IE1hc2tlZEVudW07XG5cblx0LyoqXHJcblx0ICBOdW1iZXIgbWFza1xyXG5cdCAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuXHQgIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnJhZGl4IC0gU2luZ2xlIGNoYXJcclxuXHQgIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnRob3VzYW5kc1NlcGFyYXRvciAtIFNpbmdsZSBjaGFyXHJcblx0ICBAcGFyYW0ge0FycmF5PHN0cmluZz59IG9wdHMubWFwVG9SYWRpeCAtIEFycmF5IG9mIHNpbmdsZSBjaGFyc1xyXG5cdCAgQHBhcmFtIHtudW1iZXJ9IG9wdHMubWluXHJcblx0ICBAcGFyYW0ge251bWJlcn0gb3B0cy5tYXhcclxuXHQgIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjYWxlIC0gRGlnaXRzIGFmdGVyIHBvaW50XHJcblx0ICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMuc2lnbmVkIC0gQWxsb3cgbmVnYXRpdmVcclxuXHQgIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5ub3JtYWxpemVaZXJvcyAtIEZsYWcgdG8gcmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHplcm9zIGluIHRoZSBlbmQgb2YgZWRpdGluZ1xyXG5cdCAgQHBhcmFtIHtib29sZWFufSBvcHRzLnBhZEZyYWN0aW9uYWxaZXJvcyAtIEZsYWcgdG8gcGFkIHRyYWlsaW5nIHplcm9zIGFmdGVyIHBvaW50IGluIHRoZSBlbmQgb2YgZWRpdGluZ1xyXG5cdCovXG5cdHZhciBNYXNrZWROdW1iZXIgPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uIChfTWFza2VkKSB7XG5cdCAgX2luaGVyaXRzKE1hc2tlZE51bWJlciwgX01hc2tlZCk7XG5cblx0ICAvKiogU2luZ2xlIGNoYXIgKi9cblxuXHQgIC8qKiBTaW5nbGUgY2hhciAqL1xuXG5cdCAgLyoqIEFycmF5IG9mIHNpbmdsZSBjaGFycyAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiBEaWdpdHMgYWZ0ZXIgcG9pbnQgKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqIEZsYWcgdG8gcmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHplcm9zIGluIHRoZSBlbmQgb2YgZWRpdGluZyAqL1xuXG5cdCAgLyoqIEZsYWcgdG8gcGFkIHRyYWlsaW5nIHplcm9zIGFmdGVyIHBvaW50IGluIHRoZSBlbmQgb2YgZWRpdGluZyAqL1xuXHQgIGZ1bmN0aW9uIE1hc2tlZE51bWJlcihvcHRzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza2VkTnVtYmVyKTtcblxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIpLmNhbGwodGhpcywgT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkTnVtYmVyLkRFRkFVTFRTLCB7fSwgb3B0cykpKTtcblx0ICB9XG5cdCAgLyoqXHJcblx0ICAgIEBvdmVycmlkZVxyXG5cdCAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKE1hc2tlZE51bWJlciwgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuXHQgICAgICB0aGlzLl91cGRhdGVSZWdFeHBzKCk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdXBkYXRlUmVnRXhwc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVSZWdFeHBzKCkge1xuXHQgICAgICAvLyB1c2UgZGlmZmVyZW50IHJlZ2V4cCB0byBwcm9jZXNzIHVzZXIgaW5wdXQgKG1vcmUgc3RyaWN0LCBpbnB1dCBzdWZmaXgpIGFuZCB0YWlsIHNoaWZ0aW5nXG5cdCAgICAgIHZhciBzdGFydCA9ICdeJyArICh0aGlzLmFsbG93TmVnYXRpdmUgPyAnWyt8XFxcXC1dPycgOiAnJyk7XG5cdCAgICAgIHZhciBtaWRJbnB1dCA9ICcoMHwoWzEtOV0rXFxcXGQqKSk/Jztcblx0ICAgICAgdmFyIG1pZCA9ICdcXFxcZConO1xuXHQgICAgICB2YXIgZW5kID0gKHRoaXMuc2NhbGUgPyAnKCcgKyBlc2NhcGVSZWdFeHAodGhpcy5yYWRpeCkgKyAnXFxcXGR7MCwnICsgdGhpcy5zY2FsZSArICd9KT8nIDogJycpICsgJyQnO1xuXHQgICAgICB0aGlzLl9udW1iZXJSZWdFeHBJbnB1dCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWRJbnB1dCArIGVuZCk7XG5cdCAgICAgIHRoaXMuX251bWJlclJlZ0V4cCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWQgKyBlbmQpO1xuXHQgICAgICB0aGlzLl9tYXBUb1JhZGl4UmVnRXhwID0gbmV3IFJlZ0V4cCgnWycgKyB0aGlzLm1hcFRvUmFkaXgubWFwKGVzY2FwZVJlZ0V4cCkuam9pbignJykgKyAnXScsICdnJyk7XG5cdCAgICAgIHRoaXMuX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSwgJ2cnKTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5fdGhvdXNhbmRzU2VwYXJhdG9yUmVnRXhwLCAnJyk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfaW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9yc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHZhbHVlKSB7XG5cdCAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI5MDExMDIvaG93LXRvLXByaW50LWEtbnVtYmVyLXdpdGgtY29tbWFzLWFzLXRob3VzYW5kcy1zZXBhcmF0b3JzLWluLWphdmFzY3JpcHRcblx0ICAgICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQodGhpcy5yYWRpeCk7XG5cdCAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpO1xuXHQgICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvUHJlcGFyZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvUHJlcGFyZShzdHIpIHtcblx0ICAgICAgdmFyIF9nZXQyO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiAoX2dldDIgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb1ByZXBhcmVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzLCB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHN0ci5yZXBsYWNlKHRoaXMuX21hcFRvUmFkaXhSZWdFeHAsIHRoaXMucmFkaXgpKV0uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9zZXBhcmF0b3JzQ291bnRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VwYXJhdG9yc0NvdW50KHRvKSB7XG5cdCAgICAgIHZhciBleHRlbmRPblNlcGFyYXRvcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXHQgICAgICB2YXIgY291bnQgPSAwO1xuXG5cdCAgICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHRvOyArK3Bvcykge1xuXHQgICAgICAgIGlmICh0aGlzLl92YWx1ZS5pbmRleE9mKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLCBwb3MpID09PSBwb3MpIHtcblx0ICAgICAgICAgICsrY291bnQ7XG5cdCAgICAgICAgICBpZiAoZXh0ZW5kT25TZXBhcmF0b3JzKSB0byArPSB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGNvdW50O1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UoKSB7XG5cdCAgICAgIHZhciBzbGljZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5fdmFsdWU7XG5cdCAgICAgIHJldHVybiB0aGlzLl9zZXBhcmF0b3JzQ291bnQodGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyhzbGljZSkubGVuZ3RoLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImV4dHJhY3RJbnB1dFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJbnB1dCgpIHtcblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuXG5cdCAgICAgIHZhciBfdGhpcyRfYWRqdXN0UmFuZ2VXaXQgPSB0aGlzLl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzKGZyb21Qb3MsIHRvUG9zKTtcblxuXHQgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0MiA9IF9zbGljZWRUb0FycmF5KF90aGlzJF9hZGp1c3RSYW5nZVdpdCwgMik7XG5cblx0ICAgICAgZnJvbVBvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDJbMF07XG5cdCAgICAgIHRvUG9zID0gX3RoaXMkX2FkanVzdFJhbmdlV2l0MlsxXTtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMoX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwiZXh0cmFjdElucHV0XCIsIHRoaXMpLmNhbGwodGhpcywgZnJvbVBvcywgdG9Qb3MsIGZsYWdzKSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kQ2hhclJhd1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyUmF3KGNoKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgICAgIGlmICghdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJfYXBwZW5kQ2hhclJhd1wiLCB0aGlzKS5jYWxsKHRoaXMsIGNoLCBmbGFncyk7XG5cdCAgICAgIHZhciBwcmV2QmVmb3JlVGFpbFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLl92YWx1ZTtcblxuXHQgICAgICB2YXIgcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UocHJldkJlZm9yZVRhaWxWYWx1ZSk7XG5cblx0ICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpO1xuXG5cdCAgICAgIHZhciBhcHBlbmREZXRhaWxzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwiX2FwcGVuZENoYXJSYXdcIiwgdGhpcykuY2FsbCh0aGlzLCBjaCwgZmxhZ3MpO1xuXG5cdCAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLl92YWx1ZSk7XG5cdCAgICAgIHZhciBiZWZvcmVUYWlsVmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgPyBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl92YWx1ZSA6IHRoaXMuX3ZhbHVlO1xuXG5cdCAgICAgIHZhciBiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlKGJlZm9yZVRhaWxWYWx1ZSk7XG5cblx0ICAgICAgYXBwZW5kRGV0YWlscy50YWlsU2hpZnQgKz0gKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG5cdCAgICAgIGFwcGVuZERldGFpbHMuc2tpcCA9ICFhcHBlbmREZXRhaWxzLnJhd0luc2VydGVkICYmIGNoID09PSB0aGlzLnRob3VzYW5kc1NlcGFyYXRvcjtcblx0ICAgICAgcmV0dXJuIGFwcGVuZERldGFpbHM7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfZmluZFNlcGFyYXRvckFyb3VuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU2VwYXJhdG9yQXJvdW5kKHBvcykge1xuXHQgICAgICBpZiAodGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHtcblx0ICAgICAgICB2YXIgc2VhcmNoRnJvbSA9IHBvcyAtIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aCArIDE7XG5cdCAgICAgICAgdmFyIHNlcGFyYXRvclBvcyA9IHRoaXMudmFsdWUuaW5kZXhPZih0aGlzLnRob3VzYW5kc1NlcGFyYXRvciwgc2VhcmNoRnJvbSk7XG5cdCAgICAgICAgaWYgKHNlcGFyYXRvclBvcyA8PSBwb3MpIHJldHVybiBzZXBhcmF0b3JQb3M7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gLTE7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMoZnJvbSwgdG8pIHtcblx0ICAgICAgdmFyIHNlcGFyYXRvckFyb3VuZEZyb21Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKGZyb20pO1xuXG5cdCAgICAgIGlmIChzZXBhcmF0b3JBcm91bmRGcm9tUG9zID49IDApIGZyb20gPSBzZXBhcmF0b3JBcm91bmRGcm9tUG9zO1xuXG5cdCAgICAgIHZhciBzZXBhcmF0b3JBcm91bmRUb1BvcyA9IHRoaXMuX2ZpbmRTZXBhcmF0b3JBcm91bmQodG8pO1xuXG5cdCAgICAgIGlmIChzZXBhcmF0b3JBcm91bmRUb1BvcyA+PSAwKSB0byA9IHNlcGFyYXRvckFyb3VuZFRvUG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xuXHQgICAgICByZXR1cm4gW2Zyb20sIHRvXTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlbW92ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cblx0ICAgICAgdmFyIF90aGlzJF9hZGp1c3RSYW5nZVdpdDMgPSB0aGlzLl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzKGZyb21Qb3MsIHRvUG9zKTtcblxuXHQgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0NCA9IF9zbGljZWRUb0FycmF5KF90aGlzJF9hZGp1c3RSYW5nZVdpdDMsIDIpO1xuXG5cdCAgICAgIGZyb21Qb3MgPSBfdGhpcyRfYWRqdXN0UmFuZ2VXaXQ0WzBdO1xuXHQgICAgICB0b1BvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDRbMV07XG5cdCAgICAgIHZhciB2YWx1ZUJlZm9yZVBvcyA9IHRoaXMudmFsdWUuc2xpY2UoMCwgZnJvbVBvcyk7XG5cdCAgICAgIHZhciB2YWx1ZUFmdGVyUG9zID0gdGhpcy52YWx1ZS5zbGljZSh0b1Bvcyk7XG5cblx0ICAgICAgdmFyIHByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50KHZhbHVlQmVmb3JlUG9zLmxlbmd0aCk7XG5cblx0ICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWVCZWZvcmVQb3MgKyB2YWx1ZUFmdGVyUG9zKSk7XG5cblx0ICAgICAgdmFyIGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UodmFsdWVCZWZvcmVQb3MpO1xuXG5cdCAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XG5cdCAgICAgICAgdGFpbFNoaWZ0OiAoYmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCAtIHByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50KSAqIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aFxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIGRpcmVjdGlvbikge1xuXHQgICAgICBpZiAoIXRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSByZXR1cm4gY3Vyc29yUG9zO1xuXG5cdCAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uTk9ORTpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX0xFRlQ6XG5cdCAgICAgICAgICB7XG5cdCAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdExlZnRQb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKGN1cnNvclBvcyAtIDEpO1xuXG5cdCAgICAgICAgICAgIGlmIChzZXBhcmF0b3JBdExlZnRQb3MgPj0gMCkge1xuXHQgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdExlZnRFbmRQb3MgPSBzZXBhcmF0b3JBdExlZnRQb3MgKyB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgICBpZiAoY3Vyc29yUG9zIDwgc2VwYXJhdG9yQXRMZWZ0RW5kUG9zIHx8IHRoaXMudmFsdWUubGVuZ3RoIDw9IHNlcGFyYXRvckF0TGVmdEVuZFBvcyB8fCBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9MRUZUKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc2VwYXJhdG9yQXRMZWZ0UG9zO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XG5cdCAgICAgICAgICB7XG5cdCAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdFJpZ2h0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MpO1xuXG5cdCAgICAgICAgICAgIGlmIChzZXBhcmF0b3JBdFJpZ2h0UG9zID49IDApIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gc2VwYXJhdG9yQXRSaWdodFBvcyArIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGN1cnNvclBvcztcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvVmFsaWRhdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKGZsYWdzKSB7XG5cdCAgICAgIHZhciByZWdleHAgPSBmbGFncy5pbnB1dCA/IHRoaXMuX251bWJlclJlZ0V4cElucHV0IDogdGhpcy5fbnVtYmVyUmVnRXhwOyAvLyB2YWxpZGF0ZSBhcyBzdHJpbmdcblxuXHQgICAgICB2YXIgdmFsaWQgPSByZWdleHAudGVzdCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpKTtcblxuXHQgICAgICBpZiAodmFsaWQpIHtcblx0ICAgICAgICAvLyB2YWxpZGF0ZSBhcyBudW1iZXJcblx0ICAgICAgICB2YXIgbnVtYmVyID0gdGhpcy5udW1iZXI7XG5cdCAgICAgICAgdmFsaWQgPSB2YWxpZCAmJiAhaXNOYU4obnVtYmVyKSAmJiAoIC8vIGNoZWNrIG1pbiBib3VuZCBmb3IgbmVnYXRpdmUgdmFsdWVzXG5cdCAgICAgICAgdGhpcy5taW4gPT0gbnVsbCB8fCB0aGlzLm1pbiA+PSAwIHx8IHRoaXMubWluIDw9IHRoaXMubnVtYmVyKSAmJiAoIC8vIGNoZWNrIG1heCBib3VuZCBmb3IgcG9zaXRpdmUgdmFsdWVzXG5cdCAgICAgICAgdGhpcy5tYXggPT0gbnVsbCB8fCB0aGlzLm1heCA8PSAwIHx8IHRoaXMubnVtYmVyIDw9IHRoaXMubWF4KTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiB2YWxpZCAmJiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgZmxhZ3MpO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9Db21taXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb0NvbW1pdCgpIHtcblx0ICAgICAgaWYgKHRoaXMudmFsdWUpIHtcblx0ICAgICAgICB2YXIgbnVtYmVyID0gdGhpcy5udW1iZXI7XG5cdCAgICAgICAgdmFyIHZhbGlkbnVtID0gbnVtYmVyOyAvLyBjaGVjayBib3VuZHNcblxuXHQgICAgICAgIGlmICh0aGlzLm1pbiAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWF4KHZhbGlkbnVtLCB0aGlzLm1pbik7XG5cdCAgICAgICAgaWYgKHRoaXMubWF4ICE9IG51bGwpIHZhbGlkbnVtID0gTWF0aC5taW4odmFsaWRudW0sIHRoaXMubWF4KTtcblx0ICAgICAgICBpZiAodmFsaWRudW0gIT09IG51bWJlcikgdGhpcy51bm1hc2tlZFZhbHVlID0gU3RyaW5nKHZhbGlkbnVtKTtcblx0ICAgICAgICB2YXIgZm9ybWF0dGVkID0gdGhpcy52YWx1ZTtcblx0ICAgICAgICBpZiAodGhpcy5ub3JtYWxpemVaZXJvcykgZm9ybWF0dGVkID0gdGhpcy5fbm9ybWFsaXplWmVyb3MoZm9ybWF0dGVkKTtcblx0ICAgICAgICBpZiAodGhpcy5wYWRGcmFjdGlvbmFsWmVyb3MpIGZvcm1hdHRlZCA9IHRoaXMuX3BhZEZyYWN0aW9uYWxaZXJvcyhmb3JtYXR0ZWQpO1xuXHQgICAgICAgIHRoaXMuX3ZhbHVlID0gZm9ybWF0dGVkO1xuXHQgICAgICB9XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwiZG9Db21taXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9ub3JtYWxpemVaZXJvc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3JtYWxpemVaZXJvcyh2YWx1ZSkge1xuXHQgICAgICB2YXIgcGFydHMgPSB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHZhbHVlKS5zcGxpdCh0aGlzLnJhZGl4KTsgLy8gcmVtb3ZlIGxlYWRpbmcgemVyb3NcblxuXG5cdCAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXihcXEQqKSgwKikoXFxkKikvLCBmdW5jdGlvbiAobWF0Y2gsIHNpZ24sIHplcm9zLCBudW0pIHtcblx0ICAgICAgICByZXR1cm4gc2lnbiArIG51bTtcblx0ICAgICAgfSk7IC8vIGFkZCBsZWFkaW5nIHplcm9cblxuXHQgICAgICBpZiAodmFsdWUubGVuZ3RoICYmICEvXFxkJC8udGVzdChwYXJ0c1swXSkpIHBhcnRzWzBdID0gcGFydHNbMF0gKyAnMCc7XG5cblx0ICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0ICAgICAgICBwYXJ0c1sxXSA9IHBhcnRzWzFdLnJlcGxhY2UoLzAqJC8sICcnKTsgLy8gcmVtb3ZlIHRyYWlsaW5nIHplcm9zXG5cblx0ICAgICAgICBpZiAoIXBhcnRzWzFdLmxlbmd0aCkgcGFydHMubGVuZ3RoID0gMTsgLy8gcmVtb3ZlIGZyYWN0aW9uYWxcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiB0aGlzLl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHBhcnRzLmpvaW4odGhpcy5yYWRpeCkpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3BhZEZyYWN0aW9uYWxaZXJvc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9wYWRGcmFjdGlvbmFsWmVyb3ModmFsdWUpIHtcblx0ICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnJhZGl4KTtcblx0ICAgICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHBhcnRzLnB1c2goJycpO1xuXHQgICAgICBwYXJ0c1sxXSA9IHBhcnRzWzFdLnBhZEVuZCh0aGlzLnNjYWxlLCAnMCcpO1xuXHQgICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLl9ub3JtYWxpemVaZXJvcyh0aGlzLnZhbHVlKSkucmVwbGFjZSh0aGlzLnJhZGl4LCAnLicpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCB1bm1hc2tlZFZhbHVlLnJlcGxhY2UoJy4nLCB0aGlzLnJhZGl4KSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnVubWFza2VkVmFsdWUpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KG4pIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCBTdHJpbmcobiksIHRoaXMsIHRydWUpO1xuXHQgICAgfVxuXHQgICAgLyoqIFBhcnNlZCBOdW1iZXIgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJudW1iZXJcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50eXBlZFZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KG51bWJlcikge1xuXHQgICAgICB0aGlzLnR5cGVkVmFsdWUgPSBudW1iZXI7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBJcyBuZWdhdGl2ZSBhbGxvd2VkXHJcblx0ICAgICAgQHJlYWRvbmx5XHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYWxsb3dOZWdhdGl2ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNpZ25lZCB8fCB0aGlzLm1pbiAhPSBudWxsICYmIHRoaXMubWluIDwgMCB8fCB0aGlzLm1heCAhPSBudWxsICYmIHRoaXMubWF4IDwgMDtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkTnVtYmVyO1xuXHR9KE1hc2tlZCk7XG5cdE1hc2tlZE51bWJlci5ERUZBVUxUUyA9IHtcblx0ICByYWRpeDogJywnLFxuXHQgIHRob3VzYW5kc1NlcGFyYXRvcjogJycsXG5cdCAgbWFwVG9SYWRpeDogWycuJ10sXG5cdCAgc2NhbGU6IDIsXG5cdCAgc2lnbmVkOiBmYWxzZSxcblx0ICBub3JtYWxpemVaZXJvczogdHJ1ZSxcblx0ICBwYWRGcmFjdGlvbmFsWmVyb3M6IGZhbHNlXG5cdH07XG5cdElNYXNrLk1hc2tlZE51bWJlciA9IE1hc2tlZE51bWJlcjtcblxuXHQvKiogTWFza2luZyBieSBjdXN0b20gRnVuY3Rpb24gKi9cblxuXHR2YXIgTWFza2VkRnVuY3Rpb24gPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uIChfTWFza2VkKSB7XG5cdCAgX2luaGVyaXRzKE1hc2tlZEZ1bmN0aW9uLCBfTWFza2VkKTtcblxuXHQgIGZ1bmN0aW9uIE1hc2tlZEZ1bmN0aW9uKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZEZ1bmN0aW9uKTtcblxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWRGdW5jdGlvbikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKE1hc2tlZEZ1bmN0aW9uLCBbe1xuXHQgICAga2V5OiBcIl91cGRhdGVcIixcblxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuXHQgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKG9wdHMpIHtcblx0ICAgICAgaWYgKG9wdHMubWFzaykgb3B0cy52YWxpZGF0ZSA9IG9wdHMubWFzaztcblxuXHQgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRGdW5jdGlvbi5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkRnVuY3Rpb247XG5cdH0oTWFza2VkKTtcblx0SU1hc2suTWFza2VkRnVuY3Rpb24gPSBNYXNrZWRGdW5jdGlvbjtcblxuXHQvKiogRHluYW1pYyBtYXNrIGZvciBjaG9vc2luZyBhcHJvcHJpYXRlIG1hc2sgaW4gcnVuLXRpbWUgKi9cblx0dmFyIE1hc2tlZER5bmFtaWMgPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uIChfTWFza2VkKSB7XG5cdCAgX2luaGVyaXRzKE1hc2tlZER5bmFtaWMsIF9NYXNrZWQpO1xuXG5cdCAgLyoqIEN1cnJlbnRseSBjaG9zZW4gbWFzayAqL1xuXG5cdCAgLyoqIENvbXBsaWxlZCB7QGxpbmsgTWFza2VkfSBvcHRpb25zICovXG5cblx0ICAvKiogQ2hvb3NlcyB7QGxpbmsgTWFza2VkfSBkZXBlbmRpbmcgb24gaW5wdXQgdmFsdWUgKi9cblxuXHQgIC8qKlxyXG5cdCAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG5cdCAgKi9cblx0ICBmdW5jdGlvbiBNYXNrZWREeW5hbWljKG9wdHMpIHtcblx0ICAgIHZhciBfdGhpcztcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZER5bmFtaWMpO1xuXG5cdCAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljKS5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZER5bmFtaWMuREVGQVVMVFMsIHt9LCBvcHRzKSkpO1xuXHQgICAgX3RoaXMuY3VycmVudE1hc2sgPSBudWxsO1xuXHQgICAgcmV0dXJuIF90aGlzO1xuXHQgIH1cblx0ICAvKipcclxuXHQgICAgQG92ZXJyaWRlXHJcblx0ICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkRHluYW1pYywgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG5cblx0ICAgICAgaWYgKCdtYXNrJyBpbiBvcHRzKSB7XG5cdCAgICAgICAgLy8gbWFzayBjb3VsZCBiZSB0b3RhbGx5IGR5bmFtaWMgd2l0aCBvbmx5IGBkaXNwYXRjaGAgb3B0aW9uXG5cdCAgICAgICAgdGhpcy5jb21waWxlZE1hc2tzID0gQXJyYXkuaXNBcnJheShvcHRzLm1hc2spID8gb3B0cy5tYXNrLm1hcChmdW5jdGlvbiAobSkge1xuXHQgICAgICAgICAgcmV0dXJuIGNyZWF0ZU1hc2sobSk7XG5cdCAgICAgICAgfSkgOiBbXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJSYXdcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdygpIHtcblx0ICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLl9hcHBseURpc3BhdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0ICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcblx0ICAgICAgICB2YXIgX3RoaXMkY3VycmVudE1hc2s7XG5cblx0ICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSgoX3RoaXMkY3VycmVudE1hc2sgPSB0aGlzLmN1cnJlbnRNYXNrKS5fYXBwZW5kQ2hhci5hcHBseShfdGhpcyRjdXJyZW50TWFzaywgYXJndW1lbnRzKSk7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gZGV0YWlscztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGx5RGlzcGF0Y2hcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlEaXNwYXRjaCgpIHtcblx0ICAgICAgdmFyIGFwcGVuZGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgdmFyIHByZXZWYWx1ZUJlZm9yZVRhaWwgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgIT0gbnVsbCA/IGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3ZhbHVlIDogdGhpcy52YWx1ZTtcblx0ICAgICAgdmFyIGlucHV0VmFsdWUgPSB0aGlzLnJhd0lucHV0VmFsdWU7XG5cdCAgICAgIHZhciBpbnNlcnRWYWx1ZSA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSAhPSBudWxsID8gLy8gJEZsb3dGaXhNZSAtIHRpcmVkIHRvIGZpZ2h0IHdpdGggdHlwZSBzeXN0ZW1cblx0ICAgICAgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fcmF3SW5wdXRWYWx1ZSA6IGlucHV0VmFsdWU7XG5cdCAgICAgIHZhciB0YWlsVmFsdWUgPSBpbnB1dFZhbHVlLnNsaWNlKGluc2VydFZhbHVlLmxlbmd0aCk7XG5cdCAgICAgIHZhciBwcmV2TWFzayA9IHRoaXMuY3VycmVudE1hc2s7XG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgdmFyIHByZXZNYXNrU3RhdGUgPSBwcmV2TWFzayAmJiBwcmV2TWFzay5zdGF0ZTsgLy8gY2xvbmUgZmxhZ3MgdG8gcHJldmVudCBvdmVyd3JpdGluZyBgX2JlZm9yZVRhaWxTdGF0ZWBcblxuXHQgICAgICB0aGlzLmN1cnJlbnRNYXNrID0gdGhpcy5kb0Rpc3BhdGNoKGFwcGVuZGVkLCBPYmplY3QuYXNzaWduKHt9LCBmbGFncykpOyAvLyByZXN0b3JlIHN0YXRlIGFmdGVyIGRpc3BhdGNoXG5cblx0ICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcblx0ICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFzayAhPT0gcHJldk1hc2spIHtcblx0ICAgICAgICAgIC8vIGlmIG1hc2sgY2hhbmdlZCByZWFwcGx5IGlucHV0XG5cdCAgICAgICAgICB0aGlzLmN1cnJlbnRNYXNrLnJlc2V0KCk7IC8vICRGbG93Rml4TWUgLSBpdCdzIG9rLCB3ZSBkb24ndCBjaGFuZ2UgY3VycmVudCBtYXNrIGFib3ZlXG5cblx0ICAgICAgICAgIHZhciBkID0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQoaW5zZXJ0VmFsdWUsIHtcblx0ICAgICAgICAgICAgcmF3OiB0cnVlXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIGRldGFpbHMudGFpbFNoaWZ0ID0gZC5pbnNlcnRlZC5sZW5ndGggLSBwcmV2VmFsdWVCZWZvcmVUYWlsLmxlbmd0aDtcblxuXHQgICAgICAgICAgaWYgKHRhaWxWYWx1ZSkge1xuXHQgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gaXQncyBvaywgd2UgZG9uJ3QgY2hhbmdlIGN1cnJlbnQgbWFzayBhYm92ZVxuXHQgICAgICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSB0aGlzLmN1cnJlbnRNYXNrLmFwcGVuZCh0YWlsVmFsdWUsIHtcblx0ICAgICAgICAgICAgICByYXc6IHRydWUsXG5cdCAgICAgICAgICAgICAgdGFpbDogdHJ1ZVxuXHQgICAgICAgICAgICB9KS50YWlsU2hpZnQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIC8vIERpc3BhdGNoIGNhbiBkbyBzb21ldGhpbmcgYmFkIHdpdGggc3RhdGUsIHNvXG5cdCAgICAgICAgICAvLyByZXN0b3JlIHByZXYgbWFzayBzdGF0ZVxuXHQgICAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IHByZXZNYXNrU3RhdGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcblx0ICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLl9hcHBseURpc3BhdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0ICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcblx0ICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9EaXNwYXRjaFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvRGlzcGF0Y2goYXBwZW5kZWQpIHtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goYXBwZW5kZWQsIHRoaXMsIGZsYWdzKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvVmFsaWRhdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKCkge1xuXHQgICAgICB2YXIgX2dldDIsIF90aGlzJGN1cnJlbnRNYXNrMjtcblxuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSAmJiAoIXRoaXMuY3VycmVudE1hc2sgfHwgKF90aGlzJGN1cnJlbnRNYXNrMiA9IHRoaXMuY3VycmVudE1hc2spLmRvVmFsaWRhdGUuYXBwbHkoX3RoaXMkY3VycmVudE1hc2syLCBhcmdzKSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZXNldFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykgdGhpcy5jdXJyZW50TWFzay5yZXNldCgpO1xuXHQgICAgICB0aGlzLmNvbXBpbGVkTWFza3MuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuXHQgICAgICAgIHJldHVybiBtLnJlc2V0KCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlXCIsXG5cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXG5cdCAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XG5cdCAgICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrMztcblxuXHQgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKChfdGhpcyRjdXJyZW50TWFzazMgPSB0aGlzLmN1cnJlbnRNYXNrKS5yZW1vdmUuYXBwbHkoX3RoaXMkY3VycmVudE1hc2szLCBhcmd1bWVudHMpKSAvLyB1cGRhdGUgd2l0aCBkaXNwYXRjaFxuXHQgICAgICAgIC5hZ2dyZWdhdGUodGhpcy5fYXBwbHlEaXNwYXRjaCgpKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXHJcblx0ICAgICAgQG92ZXJyaWRlXHJcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdElucHV0XCIsXG5cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJbnB1dCgpIHtcblx0ICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrNDtcblxuXHQgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IChfdGhpcyRjdXJyZW50TWFzazQgPSB0aGlzLmN1cnJlbnRNYXNrKS5leHRyYWN0SW5wdXQuYXBwbHkoX3RoaXMkY3VycmVudE1hc2s0LCBhcmd1bWVudHMpIDogJyc7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuXHQgICAgICB2YXIgX3RoaXMkY3VycmVudE1hc2s1LCBfZ2V0MztcblxuXHQgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcblx0ICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IChfdGhpcyRjdXJyZW50TWFzazUgPSB0aGlzLmN1cnJlbnRNYXNrKS5leHRyYWN0VGFpbC5hcHBseShfdGhpcyRjdXJyZW50TWFzazUsIGFyZ3MpIDogKF9nZXQzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcImV4dHJhY3RUYWlsXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQzLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvQ29tbWl0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9Db21taXQoKSB7XG5cdCAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB0aGlzLmN1cnJlbnRNYXNrLmRvQ29tbWl0KCk7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcImRvQ29tbWl0XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoKSB7XG5cdCAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazYsIF9nZXQ0O1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gKF90aGlzJGN1cnJlbnRNYXNrNiA9IHRoaXMuY3VycmVudE1hc2spLm5lYXJlc3RJbnB1dFBvcy5hcHBseShfdGhpcyRjdXJyZW50TWFzazYsIGFyZ3MpIDogKF9nZXQ0ID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcIm5lYXJlc3RJbnB1dFBvc1wiLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0NCwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLnZhbHVlIDogJyc7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInZhbHVlXCIsIHZhbHVlLCB0aGlzLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIC8qKlxyXG5cdCAgICAgIEBvdmVycmlkZVxyXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudW5tYXNrZWRWYWx1ZSA6ICcnO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLnR5cGVkVmFsdWUgOiAnJztcblx0ICAgIH0gLy8gcHJvYmFibHkgdHlwZWRWYWx1ZSBzaG91bGQgbm90IGJlIHVzZWQgd2l0aCBkeW5hbWljXG5cdCAgICAsXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICB2YXIgdW5tYXNrZWRWYWx1ZSA9IFN0cmluZyh2YWx1ZSk7IC8vIGRvdWJsZSBjaGVjayBpdFxuXG5cdCAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50TWFzay50eXBlZFZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgdW5tYXNrZWRWYWx1ZSA9IHRoaXMuY3VycmVudE1hc2sudW5tYXNrZWRWYWx1ZTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHRoaXMudW5tYXNrZWRWYWx1ZSA9IHVubWFza2VkVmFsdWU7XG5cdCAgICB9XG5cdCAgICAvKipcclxuXHQgICAgICBAb3ZlcnJpZGVcclxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuICEhdGhpcy5jdXJyZW50TWFzayAmJiB0aGlzLmN1cnJlbnRNYXNrLmlzQ29tcGxldGU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJzdGF0ZVwiLCB0aGlzKSwge1xuXHQgICAgICAgIF9yYXdJbnB1dFZhbHVlOiB0aGlzLnJhd0lucHV0VmFsdWUsXG5cdCAgICAgICAgY29tcGlsZWRNYXNrczogdGhpcy5jb21waWxlZE1hc2tzLm1hcChmdW5jdGlvbiAobSkge1xuXHQgICAgICAgICAgcmV0dXJuIG0uc3RhdGU7XG5cdCAgICAgICAgfSksXG5cdCAgICAgICAgY3VycmVudE1hc2tSZWY6IHRoaXMuY3VycmVudE1hc2ssXG5cdCAgICAgICAgY3VycmVudE1hc2s6IHRoaXMuY3VycmVudE1hc2sgJiYgdGhpcy5jdXJyZW50TWFzay5zdGF0ZVxuXHQgICAgICB9KTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICB2YXIgY29tcGlsZWRNYXNrcyA9IHN0YXRlLmNvbXBpbGVkTWFza3MsXG5cdCAgICAgICAgICBjdXJyZW50TWFza1JlZiA9IHN0YXRlLmN1cnJlbnRNYXNrUmVmLFxuXHQgICAgICAgICAgY3VycmVudE1hc2sgPSBzdGF0ZS5jdXJyZW50TWFzayxcblx0ICAgICAgICAgIG1hc2tlZFN0YXRlID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHN0YXRlLCBbXCJjb21waWxlZE1hc2tzXCIsIFwiY3VycmVudE1hc2tSZWZcIiwgXCJjdXJyZW50TWFza1wiXSk7XG5cblx0ICAgICAgdGhpcy5jb21waWxlZE1hc2tzLmZvckVhY2goZnVuY3Rpb24gKG0sIG1pKSB7XG5cdCAgICAgICAgcmV0dXJuIG0uc3RhdGUgPSBjb21waWxlZE1hc2tzW21pXTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgaWYgKGN1cnJlbnRNYXNrUmVmICE9IG51bGwpIHtcblx0ICAgICAgICB0aGlzLmN1cnJlbnRNYXNrID0gY3VycmVudE1hc2tSZWY7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IGN1cnJlbnRNYXNrO1xuXHQgICAgICB9XG5cblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInN0YXRlXCIsIG1hc2tlZFN0YXRlLCB0aGlzLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwib3ZlcndyaXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLm92ZXJ3cml0ZSA6IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJvdmVyd3JpdGVcIiwgdGhpcyk7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQob3ZlcndyaXRlKSB7XG5cdCAgICAgIGNvbnNvbGUud2FybignXCJvdmVyd3JpdGVcIiBvcHRpb24gaXMgbm90IGF2YWlsYWJsZSBpbiBkeW5hbWljIG1hc2ssIHVzZSB0aGlzIG9wdGlvbiBpbiBzaWJsaW5ncycpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrZWREeW5hbWljO1xuXHR9KE1hc2tlZCk7XG5cdE1hc2tlZER5bmFtaWMuREVGQVVMVFMgPSB7XG5cdCAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKGFwcGVuZGVkLCBtYXNrZWQsIGZsYWdzKSB7XG5cdCAgICBpZiAoIW1hc2tlZC5jb21waWxlZE1hc2tzLmxlbmd0aCkgcmV0dXJuO1xuXHQgICAgdmFyIGlucHV0VmFsdWUgPSBtYXNrZWQucmF3SW5wdXRWYWx1ZTsgLy8gc2ltdWxhdGUgaW5wdXRcblxuXHQgICAgdmFyIGlucHV0cyA9IG1hc2tlZC5jb21waWxlZE1hc2tzLm1hcChmdW5jdGlvbiAobSwgaW5kZXgpIHtcblx0ICAgICAgbS5yZXNldCgpO1xuXHQgICAgICBtLmFwcGVuZChpbnB1dFZhbHVlLCB7XG5cdCAgICAgICAgcmF3OiB0cnVlXG5cdCAgICAgIH0pO1xuXHQgICAgICBtLmFwcGVuZChhcHBlbmRlZCwgZmxhZ3MpO1xuXHQgICAgICB2YXIgd2VpZ2h0ID0gbS5yYXdJbnB1dFZhbHVlLmxlbmd0aDtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICB3ZWlnaHQ6IHdlaWdodCxcblx0ICAgICAgICBpbmRleDogaW5kZXhcblx0ICAgICAgfTtcblx0ICAgIH0pOyAvLyBwb3AgbWFza3Mgd2l0aCBsb25nZXIgdmFsdWVzIGZpcnN0XG5cblx0ICAgIGlucHV0cy5zb3J0KGZ1bmN0aW9uIChpMSwgaTIpIHtcblx0ICAgICAgcmV0dXJuIGkyLndlaWdodCAtIGkxLndlaWdodDtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIG1hc2tlZC5jb21waWxlZE1hc2tzW2lucHV0c1swXS5pbmRleF07XG5cdCAgfVxuXHR9O1xuXHRJTWFzay5NYXNrZWREeW5hbWljID0gTWFza2VkRHluYW1pYztcblxuXHQvKiogTWFzayBwaXBlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gdHlwZXMgKi9cblxuXHR2YXIgUElQRV9UWVBFID0ge1xuXHQgIE1BU0tFRDogJ3ZhbHVlJyxcblx0ICBVTk1BU0tFRDogJ3VubWFza2VkVmFsdWUnLFxuXHQgIFRZUEVEOiAndHlwZWRWYWx1ZSdcblx0fTtcblx0LyoqIENyZWF0ZXMgbmV3IHBpcGUgZnVuY3Rpb24gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXG5cblx0ZnVuY3Rpb24gY3JlYXRlUGlwZShtYXNrKSB7XG5cdCAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFBJUEVfVFlQRS5NQVNLRUQ7XG5cdCAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBQSVBFX1RZUEUuTUFTS0VEO1xuXHQgIHZhciBtYXNrZWQgPSBjcmVhdGVNYXNrKG1hc2spO1xuXHQgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgIHJldHVybiBtYXNrZWQucnVuSXNvbGF0ZWQoZnVuY3Rpb24gKG0pIHtcblx0ICAgICAgbVtmcm9tXSA9IHZhbHVlO1xuXHQgICAgICByZXR1cm4gbVt0b107XG5cdCAgICB9KTtcblx0ICB9O1xuXHR9XG5cdC8qKiBQaXBlcyB2YWx1ZSB0aHJvdWdoIG1hc2sgZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXG5cblx0ZnVuY3Rpb24gcGlwZSh2YWx1ZSkge1xuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwaXBlQXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICBwaXBlQXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGNyZWF0ZVBpcGUuYXBwbHkodm9pZCAwLCBwaXBlQXJncykodmFsdWUpO1xuXHR9XG5cdElNYXNrLlBJUEVfVFlQRSA9IFBJUEVfVFlQRTtcblx0SU1hc2suY3JlYXRlUGlwZSA9IGNyZWF0ZVBpcGU7XG5cdElNYXNrLnBpcGUgPSBwaXBlO1xuXG5cdHRyeSB7XG5cdCAgZ2xvYmFsVGhpcy5JTWFzayA9IElNYXNrO1xuXHR9IGNhdGNoIChlKSB7fVxuXG5cdGV4cG9ydHMuSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50ID0gSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50O1xuXHRleHBvcnRzLkhUTUxNYXNrRWxlbWVudCA9IEhUTUxNYXNrRWxlbWVudDtcblx0ZXhwb3J0cy5JbnB1dE1hc2sgPSBJbnB1dE1hc2s7XG5cdGV4cG9ydHMuTWFza0VsZW1lbnQgPSBNYXNrRWxlbWVudDtcblx0ZXhwb3J0cy5NYXNrZWQgPSBNYXNrZWQ7XG5cdGV4cG9ydHMuTWFza2VkRGF0ZSA9IE1hc2tlZERhdGU7XG5cdGV4cG9ydHMuTWFza2VkRHluYW1pYyA9IE1hc2tlZER5bmFtaWM7XG5cdGV4cG9ydHMuTWFza2VkRW51bSA9IE1hc2tlZEVudW07XG5cdGV4cG9ydHMuTWFza2VkRnVuY3Rpb24gPSBNYXNrZWRGdW5jdGlvbjtcblx0ZXhwb3J0cy5NYXNrZWROdW1iZXIgPSBNYXNrZWROdW1iZXI7XG5cdGV4cG9ydHMuTWFza2VkUGF0dGVybiA9IE1hc2tlZFBhdHRlcm47XG5cdGV4cG9ydHMuTWFza2VkUmFuZ2UgPSBNYXNrZWRSYW5nZTtcblx0ZXhwb3J0cy5NYXNrZWRSZWdFeHAgPSBNYXNrZWRSZWdFeHA7XG5cdGV4cG9ydHMuUElQRV9UWVBFID0gUElQRV9UWVBFO1xuXHRleHBvcnRzLmNyZWF0ZU1hc2sgPSBjcmVhdGVNYXNrO1xuXHRleHBvcnRzLmNyZWF0ZVBpcGUgPSBjcmVhdGVQaXBlO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBJTWFzaztcblx0ZXhwb3J0cy5waXBlID0gcGlwZTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuXG5cbn0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgbGF6eVNpemVzID0gZmFjdG9yeSh3aW5kb3csIHdpbmRvdy5kb2N1bWVudCwgRGF0ZSk7XG5cdHdpbmRvdy5sYXp5U2l6ZXMgPSBsYXp5U2l6ZXM7XG5cdGlmKHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuXHRcdG1vZHVsZS5leHBvcnRzID0gbGF6eVNpemVzO1xuXHR9XG59KHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgd2luZG93IDoge30sIGZ1bmN0aW9uIGwod2luZG93LCBkb2N1bWVudCwgRGF0ZSkgeyAvLyBQYXNzIGluIHRoZSB3aW5kb2UgRGF0ZSBmdW5jdGlvbiBhbHNvIGZvciBTU1IgYmVjYXVzZSB0aGUgRGF0ZSBjbGFzcyBjYW4gYmUgbG9zdFxuXHQndXNlIHN0cmljdCc7XG5cdC8qanNoaW50IGVxbnVsbDp0cnVlICovXG5cblx0dmFyIGxhenlzaXplcywgbGF6eVNpemVzQ2ZnO1xuXG5cdChmdW5jdGlvbigpe1xuXHRcdHZhciBwcm9wO1xuXG5cdFx0dmFyIGxhenlTaXplc0RlZmF1bHRzID0ge1xuXHRcdFx0bGF6eUNsYXNzOiAnbGF6eWxvYWQnLFxuXHRcdFx0bG9hZGVkQ2xhc3M6ICdsYXp5bG9hZGVkJyxcblx0XHRcdGxvYWRpbmdDbGFzczogJ2xhenlsb2FkaW5nJyxcblx0XHRcdHByZWxvYWRDbGFzczogJ2xhenlwcmVsb2FkJyxcblx0XHRcdGVycm9yQ2xhc3M6ICdsYXp5ZXJyb3InLFxuXHRcdFx0Ly9zdHJpY3RDbGFzczogJ2xhenlzdHJpY3QnLFxuXHRcdFx0YXV0b3NpemVzQ2xhc3M6ICdsYXp5YXV0b3NpemVzJyxcblx0XHRcdHNyY0F0dHI6ICdkYXRhLXNyYycsXG5cdFx0XHRzcmNzZXRBdHRyOiAnZGF0YS1zcmNzZXQnLFxuXHRcdFx0c2l6ZXNBdHRyOiAnZGF0YS1zaXplcycsXG5cdFx0XHQvL3ByZWxvYWRBZnRlckxvYWQ6IGZhbHNlLFxuXHRcdFx0bWluU2l6ZTogNDAsXG5cdFx0XHRjdXN0b21NZWRpYToge30sXG5cdFx0XHRpbml0OiB0cnVlLFxuXHRcdFx0ZXhwRmFjdG9yOiAxLjUsXG5cdFx0XHRoRmFjOiAwLjgsXG5cdFx0XHRsb2FkTW9kZTogMixcblx0XHRcdGxvYWRIaWRkZW46IHRydWUsXG5cdFx0XHRyaWNUaW1lb3V0OiAwLFxuXHRcdFx0dGhyb3R0bGVEZWxheTogMTI1LFxuXHRcdH07XG5cblx0XHRsYXp5U2l6ZXNDZmcgPSB3aW5kb3cubGF6eVNpemVzQ29uZmlnIHx8IHdpbmRvdy5sYXp5c2l6ZXNDb25maWcgfHwge307XG5cblx0XHRmb3IocHJvcCBpbiBsYXp5U2l6ZXNEZWZhdWx0cyl7XG5cdFx0XHRpZighKHByb3AgaW4gbGF6eVNpemVzQ2ZnKSl7XG5cdFx0XHRcdGxhenlTaXplc0NmZ1twcm9wXSA9IGxhenlTaXplc0RlZmF1bHRzW3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkoKTtcblxuXHRpZiAoIWRvY3VtZW50IHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGluaXQ6IGZ1bmN0aW9uICgpIHt9LFxuXHRcdFx0Y2ZnOiBsYXp5U2l6ZXNDZmcsXG5cdFx0XHRub1N1cHBvcnQ6IHRydWUsXG5cdFx0fTtcblx0fVxuXG5cdHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdHZhciBzdXBwb3J0UGljdHVyZSA9IHdpbmRvdy5IVE1MUGljdHVyZUVsZW1lbnQ7XG5cblx0dmFyIF9hZGRFdmVudExpc3RlbmVyID0gJ2FkZEV2ZW50TGlzdGVuZXInO1xuXG5cdHZhciBfZ2V0QXR0cmlidXRlID0gJ2dldEF0dHJpYnV0ZSc7XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0byBiaW5kIHRvIHdpbmRvdyBiZWNhdXNlICd0aGlzJyBiZWNvbWVzIG51bGwgZHVyaW5nIFNTUlxuXHQgKiBidWlsZHMuXG5cdCAqL1xuXHR2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IHdpbmRvd1tfYWRkRXZlbnRMaXN0ZW5lcl0uYmluZCh3aW5kb3cpO1xuXG5cdHZhciBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdElkbGVDYWxsYmFjayA9IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrO1xuXG5cdHZhciByZWdQaWN0dXJlID0gL15waWN0dXJlJC9pO1xuXG5cdHZhciBsb2FkRXZlbnRzID0gWydsb2FkJywgJ2Vycm9yJywgJ2xhenlpbmNsdWRlZCcsICdfbGF6eWxvYWRlZCddO1xuXG5cdHZhciByZWdDbGFzc0NhY2hlID0ge307XG5cblx0dmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuXHR2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdGlmKCFyZWdDbGFzc0NhY2hlW2Nsc10pe1xuXHRcdFx0cmVnQ2xhc3NDYWNoZVtjbHNdID0gbmV3IFJlZ0V4cCgnKFxcXFxzfF4pJytjbHMrJyhcXFxcc3wkKScpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVnQ2xhc3NDYWNoZVtjbHNdLnRlc3QoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKSAmJiByZWdDbGFzc0NhY2hlW2Nsc107XG5cdH07XG5cblx0dmFyIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZiAoIWhhc0NsYXNzKGVsZSwgY2xzKSl7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnRyaW0oKSArICcgJyArIGNscyk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0dmFyIHJlZztcblx0XHRpZiAoKHJlZyA9IGhhc0NsYXNzKGVsZSxjbHMpKSkge1xuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKS5yZXBsYWNlKHJlZywgJyAnKSk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBhZGRSZW1vdmVMb2FkRXZlbnRzID0gZnVuY3Rpb24oZG9tLCBmbiwgYWRkKXtcblx0XHR2YXIgYWN0aW9uID0gYWRkID8gX2FkZEV2ZW50TGlzdGVuZXIgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cdFx0aWYoYWRkKXtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZG9tLCBmbik7XG5cdFx0fVxuXHRcdGxvYWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbihldnQpe1xuXHRcdFx0ZG9tW2FjdGlvbl0oZXZ0LCBmbik7XG5cdFx0fSk7XG5cdH07XG5cblx0dmFyIHRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsZW0sIG5hbWUsIGRldGFpbCwgbm9CdWJibGVzLCBub0NhbmNlbGFibGUpe1xuXHRcdHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXG5cdFx0aWYoIWRldGFpbCl7XG5cdFx0XHRkZXRhaWwgPSB7fTtcblx0XHR9XG5cblx0XHRkZXRhaWwuaW5zdGFuY2UgPSBsYXp5c2l6ZXM7XG5cblx0XHRldmVudC5pbml0RXZlbnQobmFtZSwgIW5vQnViYmxlcywgIW5vQ2FuY2VsYWJsZSk7XG5cblx0XHRldmVudC5kZXRhaWwgPSBkZXRhaWw7XG5cblx0XHRlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdHJldHVybiBldmVudDtcblx0fTtcblxuXHR2YXIgdXBkYXRlUG9seWZpbGwgPSBmdW5jdGlvbiAoZWwsIGZ1bGwpe1xuXHRcdHZhciBwb2x5ZmlsbDtcblx0XHRpZiggIXN1cHBvcnRQaWN0dXJlICYmICggcG9seWZpbGwgPSAod2luZG93LnBpY3R1cmVmaWxsIHx8IGxhenlTaXplc0NmZy5wZikgKSApe1xuXHRcdFx0aWYoZnVsbCAmJiBmdWxsLnNyYyAmJiAhZWxbX2dldEF0dHJpYnV0ZV0oJ3NyY3NldCcpKXtcblx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBmdWxsLnNyYyk7XG5cdFx0XHR9XG5cdFx0XHRwb2x5ZmlsbCh7cmVldmFsdWF0ZTogdHJ1ZSwgZWxlbWVudHM6IFtlbF19KTtcblx0XHR9IGVsc2UgaWYoZnVsbCAmJiBmdWxsLnNyYyl7XG5cdFx0XHRlbC5zcmMgPSBmdWxsLnNyYztcblx0XHR9XG5cdH07XG5cblx0dmFyIGdldENTUyA9IGZ1bmN0aW9uIChlbGVtLCBzdHlsZSl7XG5cdFx0cmV0dXJuIChnZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpIHx8IHt9KVtzdHlsZV07XG5cdH07XG5cblx0dmFyIGdldFdpZHRoID0gZnVuY3Rpb24oZWxlbSwgcGFyZW50LCB3aWR0aCl7XG5cdFx0d2lkdGggPSB3aWR0aCB8fCBlbGVtLm9mZnNldFdpZHRoO1xuXG5cdFx0d2hpbGUod2lkdGggPCBsYXp5U2l6ZXNDZmcubWluU2l6ZSAmJiBwYXJlbnQgJiYgIWVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdHdpZHRoID0gIHBhcmVudC5vZmZzZXRXaWR0aDtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiB3aWR0aDtcblx0fTtcblxuXHR2YXIgckFGID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHJ1bm5pbmcsIHdhaXRpbmc7XG5cdFx0dmFyIGZpcnN0Rm5zID0gW107XG5cdFx0dmFyIHNlY29uZEZucyA9IFtdO1xuXHRcdHZhciBmbnMgPSBmaXJzdEZucztcblxuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHJ1bkZucyA9IGZucztcblxuXHRcdFx0Zm5zID0gZmlyc3RGbnMubGVuZ3RoID8gc2Vjb25kRm5zIDogZmlyc3RGbnM7XG5cblx0XHRcdHJ1bm5pbmcgPSB0cnVlO1xuXHRcdFx0d2FpdGluZyA9IGZhbHNlO1xuXG5cdFx0XHR3aGlsZShydW5GbnMubGVuZ3RoKXtcblx0XHRcdFx0cnVuRm5zLnNoaWZ0KCkoKTtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdH07XG5cblx0XHR2YXIgcmFmQmF0Y2ggPSBmdW5jdGlvbihmbiwgcXVldWUpe1xuXHRcdFx0aWYocnVubmluZyAmJiAhcXVldWUpe1xuXHRcdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm5zLnB1c2goZm4pO1xuXG5cdFx0XHRcdGlmKCF3YWl0aW5nKXtcblx0XHRcdFx0XHR3YWl0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHQoZG9jdW1lbnQuaGlkZGVuID8gc2V0VGltZW91dCA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSkocnVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyYWZCYXRjaC5fbHNGbHVzaCA9IHJ1bjtcblxuXHRcdHJldHVybiByYWZCYXRjaDtcblx0fSkoKTtcblxuXHR2YXIgckFGSXQgPSBmdW5jdGlvbihmbiwgc2ltcGxlKXtcblx0XHRyZXR1cm4gc2ltcGxlID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyQUYoZm4pO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHRcdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRmbi5hcHBseSh0aGF0LCBhcmdzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0O1xuXHR9O1xuXG5cdHZhciB0aHJvdHRsZSA9IGZ1bmN0aW9uKGZuKXtcblx0XHR2YXIgcnVubmluZztcblx0XHR2YXIgbGFzdFRpbWUgPSAwO1xuXHRcdHZhciBnRGVsYXkgPSBsYXp5U2l6ZXNDZmcudGhyb3R0bGVEZWxheTtcblx0XHR2YXIgcklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdFx0bGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdFx0Zm4oKTtcblx0XHR9O1xuXHRcdHZhciBpZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHJJQ1RpbWVvdXQgPiA0OSA/XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXF1ZXN0SWRsZUNhbGxiYWNrKHJ1biwge3RpbWVvdXQ6IHJJQ1RpbWVvdXR9KTtcblxuXHRcdFx0XHRpZihySUNUaW1lb3V0ICE9PSBsYXp5U2l6ZXNDZmcucmljVGltZW91dCl7XG5cdFx0XHRcdFx0cklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IDpcblx0XHRcdHJBRkl0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHNldFRpbWVvdXQocnVuKTtcblx0XHRcdH0sIHRydWUpXG5cdFx0O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGlzUHJpb3JpdHkpe1xuXHRcdFx0dmFyIGRlbGF5O1xuXG5cdFx0XHRpZigoaXNQcmlvcml0eSA9IGlzUHJpb3JpdHkgPT09IHRydWUpKXtcblx0XHRcdFx0cklDVGltZW91dCA9IDMzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihydW5uaW5nKXtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gIHRydWU7XG5cblx0XHRcdGRlbGF5ID0gZ0RlbGF5IC0gKERhdGUubm93KCkgLSBsYXN0VGltZSk7XG5cblx0XHRcdGlmKGRlbGF5IDwgMCl7XG5cdFx0XHRcdGRlbGF5ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYoaXNQcmlvcml0eSB8fCBkZWxheSA8IDkpe1xuXHRcdFx0XHRpZGxlQ2FsbGJhY2soKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoaWRsZUNhbGxiYWNrLCBkZWxheSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHQvL2Jhc2VkIG9uIGh0dHA6Ly9tb2Rlcm5qYXZhc2NyaXB0LmJsb2dzcG90LmRlLzIwMTMvMDgvYnVpbGRpbmctYmV0dGVyLWRlYm91bmNlLmh0bWxcblx0dmFyIGRlYm91bmNlID0gZnVuY3Rpb24oZnVuYykge1xuXHRcdHZhciB0aW1lb3V0LCB0aW1lc3RhbXA7XG5cdFx0dmFyIHdhaXQgPSA5OTtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0ZnVuYygpO1xuXHRcdH07XG5cdFx0dmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cblx0XHRcdGlmIChsYXN0IDwgd2FpdCkge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQocmVxdWVzdElkbGVDYWxsYmFjayB8fCBydW4pKHJ1bik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0XHRcdGlmICghdGltZW91dCkge1xuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgbG9hZGVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByZWxvYWRFbGVtcywgaXNDb21wbGV0ZWQsIHJlc2V0UHJlbG9hZGluZ1RpbWVyLCBsb2FkTW9kZSwgc3RhcnRlZDtcblxuXHRcdHZhciBlTHZXLCBlbHZILCBlTHRvcCwgZUxsZWZ0LCBlTHJpZ2h0LCBlTGJvdHRvbSwgaXNCb2R5SGlkZGVuO1xuXG5cdFx0dmFyIHJlZ0ltZyA9IC9eaW1nJC9pO1xuXHRcdHZhciByZWdJZnJhbWUgPSAvXmlmcmFtZSQvaTtcblxuXHRcdHZhciBzdXBwb3J0U2Nyb2xsID0gKCdvbnNjcm9sbCcgaW4gd2luZG93KSAmJiAhKC8oZ2xlfGluZylib3QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpO1xuXG5cdFx0dmFyIHNocmlua0V4cGFuZCA9IDA7XG5cdFx0dmFyIGN1cnJlbnRFeHBhbmQgPSAwO1xuXG5cdFx0dmFyIGlzTG9hZGluZyA9IDA7XG5cdFx0dmFyIGxvd1J1bnMgPSAtMTtcblxuXHRcdHZhciByZXNldFByZWxvYWRpbmcgPSBmdW5jdGlvbihlKXtcblx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0aWYoIWUgfHwgaXNMb2FkaW5nIDwgMCB8fCAhZS50YXJnZXQpe1xuXHRcdFx0XHRpc0xvYWRpbmcgPSAwO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaXNWaXNpYmxlID0gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdGlmIChpc0JvZHlIaWRkZW4gPT0gbnVsbCkge1xuXHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBnZXRDU1MoZG9jdW1lbnQuYm9keSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGlzQm9keUhpZGRlbiB8fCAhKGdldENTUyhlbGVtLnBhcmVudE5vZGUsICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicgJiYgZ2V0Q1NTKGVsZW0sICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicpO1xuXHRcdH07XG5cblx0XHR2YXIgaXNOZXN0ZWRWaXNpYmxlID0gZnVuY3Rpb24oZWxlbSwgZWxlbUV4cGFuZCl7XG5cdFx0XHR2YXIgb3V0ZXJSZWN0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW07XG5cdFx0XHR2YXIgdmlzaWJsZSA9IGlzVmlzaWJsZShlbGVtKTtcblxuXHRcdFx0ZUx0b3AgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMYm90dG9tICs9IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTGxlZnQgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMcmlnaHQgKz0gZWxlbUV4cGFuZDtcblxuXHRcdFx0d2hpbGUodmlzaWJsZSAmJiAocGFyZW50ID0gcGFyZW50Lm9mZnNldFBhcmVudCkgJiYgcGFyZW50ICE9IGRvY3VtZW50LmJvZHkgJiYgcGFyZW50ICE9IGRvY0VsZW0pe1xuXHRcdFx0XHR2aXNpYmxlID0gKChnZXRDU1MocGFyZW50LCAnb3BhY2l0eScpIHx8IDEpID4gMCk7XG5cblx0XHRcdFx0aWYodmlzaWJsZSAmJiBnZXRDU1MocGFyZW50LCAnb3ZlcmZsb3cnKSAhPSAndmlzaWJsZScpe1xuXHRcdFx0XHRcdG91dGVyUmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0XHR2aXNpYmxlID0gZUxyaWdodCA+IG91dGVyUmVjdC5sZWZ0ICYmXG5cdFx0XHRcdFx0XHRlTGxlZnQgPCBvdXRlclJlY3QucmlnaHQgJiZcblx0XHRcdFx0XHRcdGVMYm90dG9tID4gb3V0ZXJSZWN0LnRvcCAtIDEgJiZcblx0XHRcdFx0XHRcdGVMdG9wIDwgb3V0ZXJSZWN0LmJvdHRvbSArIDFcblx0XHRcdFx0XHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZpc2libGU7XG5cdFx0fTtcblxuXHRcdHZhciBjaGVja0VsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZUxsZW4sIGksIHJlY3QsIGF1dG9Mb2FkRWxlbSwgbG9hZGVkU29tZXRoaW5nLCBlbGVtRXhwYW5kLCBlbGVtTmVnYXRpdmVFeHBhbmQsIGVsZW1FeHBhbmRWYWwsXG5cdFx0XHRcdGJlZm9yZUV4cGFuZFZhbCwgZGVmYXVsdEV4cGFuZCwgcHJlbG9hZEV4cGFuZCwgaEZhYztcblx0XHRcdHZhciBsYXp5bG9hZEVsZW1zID0gbGF6eXNpemVzLmVsZW1lbnRzO1xuXG5cdFx0XHRpZigobG9hZE1vZGUgPSBsYXp5U2l6ZXNDZmcubG9hZE1vZGUpICYmIGlzTG9hZGluZyA8IDggJiYgKGVMbGVuID0gbGF6eWxvYWRFbGVtcy5sZW5ndGgpKXtcblxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHRsb3dSdW5zKys7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGVMbGVuOyBpKyspe1xuXG5cdFx0XHRcdFx0aWYoIWxhenlsb2FkRWxlbXNbaV0gfHwgbGF6eWxvYWRFbGVtc1tpXS5fbGF6eVJhY2Upe2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCFzdXBwb3J0U2Nyb2xsIHx8IChsYXp5c2l6ZXMucHJlbWF0dXJlVW52ZWlsICYmIGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwobGF6eWxvYWRFbGVtc1tpXSkpKXt1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCEoZWxlbUV4cGFuZFZhbCA9IGxhenlsb2FkRWxlbXNbaV1bX2dldEF0dHJpYnV0ZV0oJ2RhdGEtZXhwYW5kJykpIHx8ICEoZWxlbUV4cGFuZCA9IGVsZW1FeHBhbmRWYWwgKiAxKSl7XG5cdFx0XHRcdFx0XHRlbGVtRXhwYW5kID0gY3VycmVudEV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWRlZmF1bHRFeHBhbmQpIHtcblx0XHRcdFx0XHRcdGRlZmF1bHRFeHBhbmQgPSAoIWxhenlTaXplc0NmZy5leHBhbmQgfHwgbGF6eVNpemVzQ2ZnLmV4cGFuZCA8IDEpID9cblx0XHRcdFx0XHRcdFx0ZG9jRWxlbS5jbGllbnRIZWlnaHQgPiA1MDAgJiYgZG9jRWxlbS5jbGllbnRXaWR0aCA+IDUwMCA/IDUwMCA6IDM3MCA6XG5cdFx0XHRcdFx0XHRcdGxhenlTaXplc0NmZy5leHBhbmQ7XG5cblx0XHRcdFx0XHRcdGxhenlzaXplcy5fZGVmRXggPSBkZWZhdWx0RXhwYW5kO1xuXG5cdFx0XHRcdFx0XHRwcmVsb2FkRXhwYW5kID0gZGVmYXVsdEV4cGFuZCAqIGxhenlTaXplc0NmZy5leHBGYWN0b3I7XG5cdFx0XHRcdFx0XHRoRmFjID0gbGF6eVNpemVzQ2ZnLmhGYWM7XG5cdFx0XHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRpZihjdXJyZW50RXhwYW5kIDwgcHJlbG9hZEV4cGFuZCAmJiBpc0xvYWRpbmcgPCAxICYmIGxvd1J1bnMgPiAyICYmIGxvYWRNb2RlID4gMiAmJiAhZG9jdW1lbnQuaGlkZGVuKXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IHByZWxvYWRFeHBhbmQ7XG5cdFx0XHRcdFx0XHRcdGxvd1J1bnMgPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGxvYWRNb2RlID4gMSAmJiBsb3dSdW5zID4gMSAmJiBpc0xvYWRpbmcgPCA2KXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IGRlZmF1bHRFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gc2hyaW5rRXhwYW5kO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGJlZm9yZUV4cGFuZFZhbCAhPT0gZWxlbUV4cGFuZCl7XG5cdFx0XHRcdFx0XHRlTHZXID0gaW5uZXJXaWR0aCArIChlbGVtRXhwYW5kICogaEZhYyk7XG5cdFx0XHRcdFx0XHRlbHZIID0gaW5uZXJIZWlnaHQgKyBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdFx0ZWxlbU5lZ2F0aXZlRXhwYW5kID0gZWxlbUV4cGFuZCAqIC0xO1xuXHRcdFx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsID0gZWxlbUV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZWN0ID0gbGF6eWxvYWRFbGVtc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRcdGlmICgoZUxib3R0b20gPSByZWN0LmJvdHRvbSkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICYmXG5cdFx0XHRcdFx0XHQoZUx0b3AgPSByZWN0LnRvcCkgPD0gZWx2SCAmJlxuXHRcdFx0XHRcdFx0KGVMcmlnaHQgPSByZWN0LnJpZ2h0KSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgKiBoRmFjICYmXG5cdFx0XHRcdFx0XHQoZUxsZWZ0ID0gcmVjdC5sZWZ0KSA8PSBlTHZXICYmXG5cdFx0XHRcdFx0XHQoZUxib3R0b20gfHwgZUxyaWdodCB8fCBlTGxlZnQgfHwgZUx0b3ApICYmXG5cdFx0XHRcdFx0XHQobGF6eVNpemVzQ2ZnLmxvYWRIaWRkZW4gfHwgaXNWaXNpYmxlKGxhenlsb2FkRWxlbXNbaV0pKSAmJlxuXHRcdFx0XHRcdFx0KChpc0NvbXBsZXRlZCAmJiBpc0xvYWRpbmcgPCAzICYmICFlbGVtRXhwYW5kVmFsICYmIChsb2FkTW9kZSA8IDMgfHwgbG93UnVucyA8IDQpKSB8fCBpc05lc3RlZFZpc2libGUobGF6eWxvYWRFbGVtc1tpXSwgZWxlbUV4cGFuZCkpKXtcblx0XHRcdFx0XHRcdHVudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7XG5cdFx0XHRcdFx0XHRsb2FkZWRTb21ldGhpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYoaXNMb2FkaW5nID4gOSl7YnJlYWs7fVxuXHRcdFx0XHRcdH0gZWxzZSBpZighbG9hZGVkU29tZXRoaW5nICYmIGlzQ29tcGxldGVkICYmICFhdXRvTG9hZEVsZW0gJiZcblx0XHRcdFx0XHRcdGlzTG9hZGluZyA8IDQgJiYgbG93UnVucyA8IDQgJiYgbG9hZE1vZGUgPiAyICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8IGxhenlTaXplc0NmZy5wcmVsb2FkQWZ0ZXJMb2FkKSAmJlxuXHRcdFx0XHRcdFx0KHByZWxvYWRFbGVtc1swXSB8fCAoIWVsZW1FeHBhbmRWYWwgJiYgKChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgfHwgbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc2l6ZXNBdHRyKSAhPSAnYXV0bycpKSkpe1xuXHRcdFx0XHRcdFx0YXV0b0xvYWRFbGVtID0gcHJlbG9hZEVsZW1zWzBdIHx8IGxhenlsb2FkRWxlbXNbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoYXV0b0xvYWRFbGVtICYmICFsb2FkZWRTb21ldGhpbmcpe1xuXHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoYXV0b0xvYWRFbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyA9IHRocm90dGxlKGNoZWNrRWxlbWVudHMpO1xuXG5cdFx0dmFyIHN3aXRjaExvYWRpbmdDbGFzcyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcblxuXHRcdFx0aWYgKGVsZW0uX2xhenlDYWNoZSkge1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eUNhY2hlO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc2V0UHJlbG9hZGluZyhlKTtcblx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkZWRDbGFzcyk7XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHRcdHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWxvYWRlZCcpO1xuXHRcdH07XG5cdFx0dmFyIHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzID0gckFGSXQoc3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHR2YXIgcmFmU3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyh7dGFyZ2V0OiBlLnRhcmdldH0pO1xuXHRcdH07XG5cblx0XHR2YXIgY2hhbmdlSWZyYW1lU3JjID0gZnVuY3Rpb24oZWxlbSwgc3JjKXtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGVsZW0uY29udGVudFdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHNyYyk7XG5cdFx0XHR9IGNhdGNoKGUpe1xuXHRcdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGhhbmRsZVNvdXJjZXMgPSBmdW5jdGlvbihzb3VyY2Upe1xuXHRcdFx0dmFyIGN1c3RvbU1lZGlhO1xuXG5cdFx0XHR2YXIgc291cmNlU3Jjc2V0ID0gc291cmNlW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNzZXRBdHRyKTtcblxuXHRcdFx0aWYoIChjdXN0b21NZWRpYSA9IGxhenlTaXplc0NmZy5jdXN0b21NZWRpYVtzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ2RhdGEtbWVkaWEnKSB8fCBzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ21lZGlhJyldKSApe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdtZWRpYScsIGN1c3RvbU1lZGlhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoc291cmNlU3Jjc2V0KXtcblx0XHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZSgnc3Jjc2V0Jywgc291cmNlU3Jjc2V0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGxhenlVbnZlaWwgPSByQUZJdChmdW5jdGlvbiAoZWxlbSwgZGV0YWlsLCBpc0F1dG8sIHNpemVzLCBpc0ltZyl7XG5cdFx0XHR2YXIgc3JjLCBzcmNzZXQsIHBhcmVudCwgaXNQaWN0dXJlLCBldmVudCwgZmlyZXNMb2FkO1xuXG5cdFx0XHRpZighKGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3JldW52ZWlsJywgZGV0YWlsKSkuZGVmYXVsdFByZXZlbnRlZCl7XG5cblx0XHRcdFx0aWYoc2l6ZXMpe1xuXHRcdFx0XHRcdGlmKGlzQXV0byl7XG5cdFx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcuYXV0b3NpemVzQ2xhc3MpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCBzaXplcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3Jjc2V0ID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3Jjc2V0QXR0cik7XG5cdFx0XHRcdHNyYyA9IGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY0F0dHIpO1xuXG5cdFx0XHRcdGlmKGlzSW1nKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdGlzUGljdHVyZSA9IHBhcmVudCAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpcmVzTG9hZCA9IGRldGFpbC5maXJlc0xvYWQgfHwgKCgnc3JjJyBpbiBlbGVtKSAmJiAoc3Jjc2V0IHx8IHNyYyB8fCBpc1BpY3R1cmUpKTtcblxuXHRcdFx0XHRldmVudCA9IHt0YXJnZXQ6IGVsZW19O1xuXG5cdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXG5cdFx0XHRcdGlmKGZpcmVzTG9hZCl7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHJlc2V0UHJlbG9hZGluZ1RpbWVyKTtcblx0XHRcdFx0XHRyZXNldFByZWxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQocmVzZXRQcmVsb2FkaW5nLCAyNTAwKTtcblx0XHRcdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGVsZW0sIHJhZlN3aXRjaExvYWRpbmdDbGFzcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihpc1BpY3R1cmUpe1xuXHRcdFx0XHRcdGZvckVhY2guY2FsbChwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpLCBoYW5kbGVTb3VyY2VzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHNyY3NldCl7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNyY3NldCk7XG5cdFx0XHRcdH0gZWxzZSBpZihzcmMgJiYgIWlzUGljdHVyZSl7XG5cdFx0XHRcdFx0aWYocmVnSWZyYW1lLnRlc3QoZWxlbS5ub2RlTmFtZSkpe1xuXHRcdFx0XHRcdFx0Y2hhbmdlSWZyYW1lU3JjKGVsZW0sIHNyYyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGlzSW1nICYmIChzcmNzZXQgfHwgaXNQaWN0dXJlKSl7XG5cdFx0XHRcdFx0dXBkYXRlUG9seWZpbGwoZWxlbSwge3NyYzogc3JjfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoZWxlbS5fbGF6eVJhY2Upe1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eVJhY2U7XG5cdFx0XHR9XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKTtcblxuXHRcdFx0ckFGKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdC8vIFBhcnQgb2YgdGhpcyBjYW4gYmUgcmVtb3ZlZCBhcyBzb29uIGFzIHRoaXMgZml4IGlzIG9sZGVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03NzMxICgyMDE1KVxuXHRcdFx0XHR2YXIgaXNMb2FkZWQgPSBlbGVtLmNvbXBsZXRlICYmIGVsZW0ubmF0dXJhbFdpZHRoID4gMTtcblxuXHRcdFx0XHRpZiggIWZpcmVzTG9hZCB8fCBpc0xvYWRlZCl7XG5cdFx0XHRcdFx0aWYgKGlzTG9hZGVkKSB7XG5cdFx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCAnbHMtaXMtY2FjaGVkJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN3aXRjaExvYWRpbmdDbGFzcyhldmVudCk7XG5cdFx0XHRcdFx0ZWxlbS5fbGF6eUNhY2hlID0gdHJ1ZTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZiAoJ19sYXp5Q2FjaGUnIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlDYWNoZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCA5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5sb2FkaW5nID09ICdsYXp5Jykge1xuXHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdHZhciB1bnZlaWxFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0pe1xuXHRcdFx0aWYgKGVsZW0uX2xhenlSYWNlKSB7cmV0dXJuO31cblx0XHRcdHZhciBkZXRhaWw7XG5cblx0XHRcdHZhciBpc0ltZyA9IHJlZ0ltZy50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXG5cdFx0XHQvL2FsbG93IHVzaW5nIHNpemVzPVwiYXV0b1wiLCBidXQgZG9uJ3QgdXNlLiBpdCdzIGludmFsaWQuIFVzZSBkYXRhLXNpemVzPVwiYXV0b1wiIG9yIGEgdmFsaWQgdmFsdWUgZm9yIHNpemVzIGluc3RlYWQgKGkuZS46IHNpemVzPVwiODB2d1wiKVxuXHRcdFx0dmFyIHNpemVzID0gaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNpemVzQXR0cikgfHwgZWxlbVtfZ2V0QXR0cmlidXRlXSgnc2l6ZXMnKSk7XG5cdFx0XHR2YXIgaXNBdXRvID0gc2l6ZXMgPT0gJ2F1dG8nO1xuXG5cdFx0XHRpZiggKGlzQXV0byB8fCAhaXNDb21wbGV0ZWQpICYmIGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKCdzcmMnKSB8fCBlbGVtLnNyY3NldCkgJiYgIWVsZW0uY29tcGxldGUgJiYgIWhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5lcnJvckNsYXNzKSAmJiBoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKSl7cmV0dXJuO31cblxuXHRcdFx0ZGV0YWlsID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5dW52ZWlscmVhZCcpLmRldGFpbDtcblxuXHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0IGF1dG9TaXplci51cGRhdGVFbGVtKGVsZW0sIHRydWUsIGVsZW0ub2Zmc2V0V2lkdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLl9sYXp5UmFjZSA9IHRydWU7XG5cdFx0XHRpc0xvYWRpbmcrKztcblxuXHRcdFx0bGF6eVVudmVpbChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKTtcblx0XHR9O1xuXG5cdFx0dmFyIGFmdGVyU2Nyb2xsID0gZGVib3VuY2UoZnVuY3Rpb24oKXtcblx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDM7XG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0fSk7XG5cblx0XHR2YXIgYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGxhenlTaXplc0NmZy5sb2FkTW9kZSA9PSAzKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMjtcblx0XHRcdH1cblx0XHRcdGFmdGVyU2Nyb2xsKCk7XG5cdFx0fTtcblxuXHRcdHZhciBvbmxvYWQgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYoaXNDb21wbGV0ZWQpe3JldHVybjt9XG5cdFx0XHRpZihEYXRlLm5vdygpIC0gc3RhcnRlZCA8IDk5OSl7XG5cdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCA5OTkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblxuXHRcdFx0aXNDb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAzO1xuXG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cblx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciwgdHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0XHRsYXp5c2l6ZXMuZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpO1xuXHRcdFx0XHRwcmVsb2FkRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MgKyAnICcgKyBsYXp5U2l6ZXNDZmcucHJlbG9hZENsYXNzKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0aWYgKGUucGVyc2lzdGVkKSB7XG5cdFx0XHRcdFx0XHR2YXIgbG9hZGluZ0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRcdFx0aWYgKGxvYWRpbmdFbGVtZW50cy5sZW5ndGggJiYgbG9hZGluZ0VsZW1lbnRzLmZvckVhY2gpIHtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRsb2FkaW5nRWxlbWVudHMuZm9yRWFjaCggZnVuY3Rpb24gKGltZykge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGltZy5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGltZyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpe1xuXHRcdFx0XHRcdG5ldyBNdXRhdGlvbk9ic2VydmVyKCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzICkub2JzZXJ2ZSggZG9jRWxlbSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NTm9kZUluc2VydGVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUF0dHJNb2RpZmllZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdHNldEludGVydmFsKHRocm90dGxlZENoZWNrRWxlbWVudHMsIDk5OSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0Ly8sICdmdWxsc2NyZWVuY2hhbmdlJ1xuXHRcdFx0XHRbJ2ZvY3VzJywgJ21vdXNlb3ZlcicsICdjbGljaycsICdsb2FkJywgJ3RyYW5zaXRpb25lbmQnLCAnYW5pbWF0aW9uZW5kJ10uZm9yRWFjaChmdW5jdGlvbihuYW1lKXtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0obmFtZSwgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKCgvZCR8XmMvLnRlc3QoZG9jdW1lbnQucmVhZHlTdGF0ZSkpKXtcblx0XHRcdFx0XHRvbmxvYWQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25sb2FkKTtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzKTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgMjAwMDApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYobGF6eXNpemVzLmVsZW1lbnRzLmxlbmd0aCl7XG5cdFx0XHRcdFx0Y2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHRcdHJBRi5fbHNGbHVzaCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNoZWNrRWxlbXM6IHRocm90dGxlZENoZWNrRWxlbWVudHMsXG5cdFx0XHR1bnZlaWw6IHVudmVpbEVsZW1lbnQsXG5cdFx0XHRfYUxTTDogYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyLFxuXHRcdH07XG5cdH0pKCk7XG5cblxuXHR2YXIgYXV0b1NpemVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGF1dG9zaXplc0VsZW1zO1xuXG5cdFx0dmFyIHNpemVFbGVtZW50ID0gckFGSXQoZnVuY3Rpb24oZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpe1xuXHRcdFx0dmFyIHNvdXJjZXMsIGksIGxlbjtcblx0XHRcdGVsZW0uX2xhenlzaXplc1dpZHRoID0gd2lkdGg7XG5cdFx0XHR3aWR0aCArPSAncHgnO1xuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cblx0XHRcdGlmKHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKXtcblx0XHRcdFx0c291cmNlcyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyk7XG5cdFx0XHRcdGZvcihpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0c291cmNlc1tpXS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFldmVudC5kZXRhaWwuZGF0YUF0dHIpe1xuXHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCBldmVudC5kZXRhaWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBnZXRTaXplRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhQXR0ciwgd2lkdGgpe1xuXHRcdFx0dmFyIGV2ZW50O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYocGFyZW50KXtcblx0XHRcdFx0d2lkdGggPSBnZXRXaWR0aChlbGVtLCBwYXJlbnQsIHdpZHRoKTtcblx0XHRcdFx0ZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmVzaXplcycsIHt3aWR0aDogd2lkdGgsIGRhdGFBdHRyOiAhIWRhdGFBdHRyfSk7XG5cblx0XHRcdFx0aWYoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpe1xuXHRcdFx0XHRcdHdpZHRoID0gZXZlbnQuZGV0YWlsLndpZHRoO1xuXG5cdFx0XHRcdFx0aWYod2lkdGggJiYgd2lkdGggIT09IGVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdFx0XHRcdHNpemVFbGVtZW50KGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIHVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGk7XG5cdFx0XHR2YXIgbGVuID0gYXV0b3NpemVzRWxlbXMubGVuZ3RoO1xuXHRcdFx0aWYobGVuKXtcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRnZXRTaXplRWxlbWVudChhdXRvc2l6ZXNFbGVtc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBkZWJvdW5jZSh1cGRhdGVFbGVtZW50c1NpemVzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRhdXRvc2l6ZXNFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyk7XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyxcblx0XHRcdHVwZGF0ZUVsZW06IGdldFNpemVFbGVtZW50XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0aWYoIWluaXQuaSAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXtcblx0XHRcdGluaXQuaSA9IHRydWU7XG5cdFx0XHRhdXRvU2l6ZXIuXygpO1xuXHRcdFx0bG9hZGVyLl8oKTtcblx0XHR9XG5cdH07XG5cblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdGlmKGxhenlTaXplc0NmZy5pbml0KXtcblx0XHRcdGluaXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGxhenlzaXplcyA9IHtcblx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGLFxuXHR9O1xuXG5cdHJldHVybiBsYXp5c2l6ZXM7XG59XG4pKTtcblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdGlmKCF3aW5kb3cpIHtyZXR1cm47fVxuXHR2YXIgZ2xvYmFsSW5zdGFsbCA9IGZ1bmN0aW9uKCl7XG5cdFx0ZmFjdG9yeSh3aW5kb3cubGF6eVNpemVzKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fTtcblxuXHRmYWN0b3J5ID0gZmFjdG9yeS5iaW5kKG51bGwsIHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblxuXHRpZih0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKXtcblx0XHRmYWN0b3J5KHJlcXVpcmUoJ2xhenlzaXplcycpKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShbJ2xhenlzaXplcyddLCBmYWN0b3J5KTtcblx0fSBlbHNlIGlmKHdpbmRvdy5sYXp5U2l6ZXMpIHtcblx0XHRnbG9iYWxJbnN0YWxsKCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH1cbn0odHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/XG5cdHdpbmRvdyA6IDAsIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQndXNlIHN0cmljdCc7XG5cblx0aWYoIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKXtyZXR1cm47fVxuXG5cdHZhciByZWdEZXNjcmlwdG9ycyA9IC9cXHMrKFxcZCspKHd8aClcXHMrKFxcZCspKHd8aCkvO1xuXHR2YXIgcmVnQ3NzRml0ID0gL3BhcmVudC1maXRbXCInXSpcXHMqOlxccypbXCInXSooY29udGFpbnxjb3Zlcnx3aWR0aCkvO1xuXHR2YXIgcmVnQ3NzT2JqZWN0ID0gL3BhcmVudC1jb250YWluZXJbXCInXSpcXHMqOlxccypbXCInXSooLis/KSg/PShcXHN8JHwsfCd8XCJ8OykpLztcblx0dmFyIHJlZ1BpY3R1cmUgPSAvXnBpY3R1cmUkL2k7XG5cdHZhciBjZmcgPSBsYXp5U2l6ZXMuY2ZnO1xuXG5cdHZhciBnZXRDU1MgPSBmdW5jdGlvbiAoZWxlbSl7XG5cdFx0cmV0dXJuIChnZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpIHx8IHt9KTtcblx0fTtcblxuXHR2YXIgcGFyZW50Rml0ID0ge1xuXG5cdFx0Z2V0UGFyZW50OiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRTZWwpe1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW1lbnQ7XG5cdFx0XHR2YXIgcGFyZW50Tm9kZSA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYoKCFwYXJlbnRTZWwgfHwgcGFyZW50U2VsID09ICdwcmV2JykgJiYgcGFyZW50Tm9kZSAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Tm9kZS5ub2RlTmFtZSB8fCAnJykpe1xuXHRcdFx0XHRwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihwYXJlbnRTZWwgIT0gJ3NlbGYnKXtcblx0XHRcdFx0aWYocGFyZW50U2VsID09ICdwcmV2Jyl7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXHRcdFx0XHR9IGVsc2UgaWYocGFyZW50U2VsICYmIChwYXJlbnROb2RlLmNsb3Nlc3QgfHwgd2luZG93LmpRdWVyeSkpe1xuXHRcdFx0XHRcdHBhcmVudCA9IChwYXJlbnROb2RlLmNsb3Nlc3QgP1xuXHRcdFx0XHRcdFx0XHRwYXJlbnROb2RlLmNsb3Nlc3QocGFyZW50U2VsKSA6XG5cdFx0XHRcdFx0XHRcdGpRdWVyeShwYXJlbnROb2RlKS5jbG9zZXN0KHBhcmVudFNlbClbMF0pIHx8XG5cdFx0XHRcdFx0XHRwYXJlbnROb2RlXG5cdFx0XHRcdFx0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBhcmVudCA9IHBhcmVudE5vZGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHBhcmVudDtcblx0XHR9LFxuXG5cdFx0Z2V0Rml0OiBmdW5jdGlvbihlbGVtZW50KXtcblx0XHRcdHZhciB0bXBNYXRjaCwgcGFyZW50T2JqO1xuXHRcdFx0dmFyIGNzcyA9IGdldENTUyhlbGVtZW50KTtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzLmNvbnRlbnQgfHwgY3NzLmZvbnRGYW1pbHk7XG5cdFx0XHR2YXIgb2JqID0ge1xuXHRcdFx0XHRmaXQ6IGVsZW1lbnQuX2xhenlzaXplc1BhcmVudEZpdCB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQtZml0Jylcblx0XHRcdH07XG5cblx0XHRcdGlmKCFvYmouZml0ICYmIGNvbnRlbnQgJiYgKHRtcE1hdGNoID0gY29udGVudC5tYXRjaChyZWdDc3NGaXQpKSl7XG5cdFx0XHRcdG9iai5maXQgPSB0bXBNYXRjaFsxXTtcblx0XHRcdH1cblxuXHRcdFx0aWYob2JqLmZpdCl7XG5cdFx0XHRcdHBhcmVudE9iaiA9IGVsZW1lbnQuX2xhenlzaXplc1BhcmVudENvbnRhaW5lciB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQtY29udGFpbmVyJyk7XG5cblx0XHRcdFx0aWYoIXBhcmVudE9iaiAmJiBjb250ZW50ICYmICh0bXBNYXRjaCA9IGNvbnRlbnQubWF0Y2gocmVnQ3NzT2JqZWN0KSkpe1xuXHRcdFx0XHRcdHBhcmVudE9iaiA9IHRtcE1hdGNoWzFdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b2JqLnBhcmVudCA9IHBhcmVudEZpdC5nZXRQYXJlbnQoZWxlbWVudCwgcGFyZW50T2JqKTtcblxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmouZml0ID0gY3NzLm9iamVjdEZpdDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2VSYXRpbzogZnVuY3Rpb24oZWxlbWVudCl7XG5cdFx0XHR2YXIgaSwgc3Jjc2V0LCBtZWRpYSwgcmF0aW8sIG1hdGNoLCB3aWR0aCwgaGVpZ2h0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRcdHZhciBlbGVtZW50cyA9IHBhcmVudCAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKSA/XG5cdFx0XHRcdFx0cGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NvdXJjZSwgaW1nJykgOlxuXHRcdFx0XHRcdFtlbGVtZW50XVxuXHRcdFx0XHQ7XG5cblx0XHRcdGZvcihpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXHRcdFx0XHRzcmNzZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShjZmcuc3Jjc2V0QXR0cikgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBmc3Jjc2V0JykgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmlzcmNzZXQnKSB8fCAnJztcblx0XHRcdFx0bWVkaWEgPSBlbGVtZW50Ll9sc01lZGlhIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtZWRpYScpO1xuXHRcdFx0XHRtZWRpYSA9IGNmZy5jdXN0b21NZWRpYVtlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1tZWRpYScpIHx8IG1lZGlhXSB8fCBtZWRpYTtcblxuXHRcdFx0XHRpZihzcmNzZXQgJiYgKCFtZWRpYSB8fCAod2luZG93Lm1hdGNoTWVkaWEgJiYgbWF0Y2hNZWRpYShtZWRpYSkgfHwge30pLm1hdGNoZXMgKSl7XG5cdFx0XHRcdFx0cmF0aW8gPSBwYXJzZUZsb2F0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFzcGVjdHJhdGlvJykpO1xuXG5cdFx0XHRcdFx0aWYgKCFyYXRpbykge1xuXHRcdFx0XHRcdFx0bWF0Y2ggPSBzcmNzZXQubWF0Y2gocmVnRGVzY3JpcHRvcnMpO1xuXG5cdFx0XHRcdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0XHRcdFx0aWYobWF0Y2hbMl0gPT0gJ3cnKXtcblx0XHRcdFx0XHRcdFx0XHR3aWR0aCA9IG1hdGNoWzFdO1xuXHRcdFx0XHRcdFx0XHRcdGhlaWdodCA9IG1hdGNoWzNdO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHdpZHRoID0gbWF0Y2hbM107XG5cdFx0XHRcdFx0XHRcdFx0aGVpZ2h0ID0gbWF0Y2hbMV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHdpZHRoID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG5cdFx0XHRcdFx0XHRcdGhlaWdodCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmF0aW8gPSB3aWR0aCAvIGhlaWdodDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmF0aW87XG5cdFx0fSxcblxuXHRcdGNhbGN1bGF0ZVNpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIHdpZHRoKXtcblx0XHRcdHZhciBkaXNwbGF5UmF0aW8sIGhlaWdodCwgaW1hZ2VSYXRpbywgcmV0V2lkdGg7XG5cdFx0XHR2YXIgZml0T2JqID0gdGhpcy5nZXRGaXQoZWxlbWVudCk7XG5cdFx0XHR2YXIgZml0ID0gZml0T2JqLmZpdDtcblx0XHRcdHZhciBmaXRFbGVtID0gZml0T2JqLnBhcmVudDtcblxuXHRcdFx0aWYoZml0ICE9ICd3aWR0aCcgJiYgKChmaXQgIT0gJ2NvbnRhaW4nICYmIGZpdCAhPSAnY292ZXInKSB8fCAhKGltYWdlUmF0aW8gPSB0aGlzLmdldEltYWdlUmF0aW8oZWxlbWVudCkpKSl7XG5cdFx0XHRcdHJldHVybiB3aWR0aDtcblx0XHRcdH1cblxuXHRcdFx0aWYoZml0RWxlbSl7XG5cdFx0XHRcdHdpZHRoID0gZml0RWxlbS5jbGllbnRXaWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpdEVsZW0gPSBlbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRXaWR0aCA9IHdpZHRoO1xuXG5cdFx0XHRpZihmaXQgPT0gJ3dpZHRoJyl7XG5cdFx0XHRcdHJldFdpZHRoID0gd2lkdGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWlnaHQgPSBmaXRFbGVtLmNsaWVudEhlaWdodDtcblxuXHRcdFx0XHRpZigoZGlzcGxheVJhdGlvID0gIHdpZHRoIC8gaGVpZ2h0KSAmJiAoKGZpdCA9PSAnY292ZXInICYmIGRpc3BsYXlSYXRpbyA8IGltYWdlUmF0aW8pIHx8IChmaXQgPT0gJ2NvbnRhaW4nICYmIGRpc3BsYXlSYXRpbyA+IGltYWdlUmF0aW8pKSl7XG5cdFx0XHRcdFx0cmV0V2lkdGggPSB3aWR0aCAqIChpbWFnZVJhdGlvIC8gZGlzcGxheVJhdGlvKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0V2lkdGg7XG5cdFx0fVxuXHR9O1xuXG5cdGxhenlTaXplcy5wYXJlbnRGaXQgPSBwYXJlbnRGaXQ7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbGF6eWJlZm9yZXNpemVzJywgZnVuY3Rpb24oZSl7XG5cdFx0aWYoZS5kZWZhdWx0UHJldmVudGVkIHx8IGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcyl7cmV0dXJuO31cblxuXHRcdHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG5cdFx0ZS5kZXRhaWwud2lkdGggPSBwYXJlbnRGaXQuY2FsY3VsYXRlU2l6ZShlbGVtZW50LCBlLmRldGFpbC53aWR0aCk7XG5cdH0pO1xufSkpO1xuXG59LHtcImxhenlzaXplc1wiOjJ9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICNJRSAxMSBQT0xJRklMU1xyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLy8g0KjQsNCz0Lgg0LDQu9Cz0L7RgNC40YLQvNCwIEVDTUEtMjYyLCA2LdC1INC40LfQtNCw0L3QuNC1LCAyMi4xLjIuMVxuLy8g0KHRgdGL0LvQutCwOiBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtYXJyYXkuZnJvbVxuXG5yZXF1aXJlKFwibGF6eXNpemVzXCIpO1xuXG5yZXF1aXJlKFwibGF6eXNpemVzL3BsdWdpbnMvcGFyZW50LWZpdC9scy5wYXJlbnQtZml0XCIpO1xuXG52YXIgX2ltYXNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW1hc2tcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuaWYgKCFBcnJheS5mcm9tKSB7XG4gIEFycmF5LmZyb20gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuICAgIHZhciBpc0NhbGxhYmxlID0gZnVuY3Rpb24gaXNDYWxsYWJsZShmbikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9O1xuXG4gICAgdmFyIHRvSW50ZWdlciA9IGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIG51bWJlciA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBpZiAobnVtYmVyID09PSAwIHx8ICFpc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAobnVtYmVyID4gMCA/IDEgOiAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuICAgIH07XG5cbiAgICB2YXIgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG4gICAgdmFyIHRvTGVuZ3RoID0gZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHZhciBsZW4gPSB0b0ludGVnZXIodmFsdWUpO1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGxlbiwgMCksIG1heFNhZmVJbnRlZ2VyKTtcbiAgICB9OyAvLyDQodCy0L7QudGB0YLQstC+IGxlbmd0aCDQvNC10YLQvtC00LAgZnJvbSDRgNCw0LLQvdC+IDEuXG5cblxuICAgIHJldHVybiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZVxuICAgIC8qLCBtYXBGbiwgdGhpc0FyZyAqL1xuICAgICkge1xuICAgICAgLy8gMS4g0J/QvtC70L7QttC40LwgQyDRgNCw0LLQvdGL0Lwg0LfQvdCw0YfQtdC90LjRjiB0aGlzLlxuICAgICAgdmFyIEMgPSB0aGlzOyAvLyAyLiDQn9C+0LvQvtC20LjQvCBpdGVtcyDRgNCw0LLQvdGL0LwgVG9PYmplY3QoYXJyYXlMaWtlKS5cblxuICAgICAgdmFyIGl0ZW1zID0gT2JqZWN0KGFycmF5TGlrZSk7IC8vIDMuIFJldHVybklmQWJydXB0KGl0ZW1zKS5cblxuICAgICAgaWYgKGFycmF5TGlrZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LmZyb20gcmVxdWlyZXMgYW4gYXJyYXktbGlrZSBvYmplY3QgLSBub3QgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgIH0gLy8gNC4g0JXRgdC70LggbWFwZm4g0YDQsNCy0LXQvSB1bmRlZmluZWQsINC/0L7Qu9C+0LbQuNC8IG1hcHBpbmcg0YDQsNCy0L3Ri9C8IGZhbHNlLlxuXG5cbiAgICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCB1bmRlZmluZWQ7XG4gICAgICB2YXIgVDtcblxuICAgICAgaWYgKHR5cGVvZiBtYXBGbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gNS4g0LjQvdCw0YfQtVxuICAgICAgICAvLyA1LiBhLiDQldGB0LvQuCDQstGL0LfQvtCyIElzQ2FsbGFibGUobWFwZm4pINGA0LDQstC10L0gZmFsc2UsINCy0YvQutC40LTRi9Cy0LDQtdC8INC40YHQutC70Y7Rh9C10L3QuNC1IFR5cGVFcnJvci5cbiAgICAgICAgaWYgKCFpc0NhbGxhYmxlKG1hcEZuKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LmZyb206IHdoZW4gcHJvdmlkZWQsIHRoZSBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH0gLy8gNS4gYi4g0JXRgdC70LggdGhpc0FyZyDQv9GA0LjRgdGD0YLRgdGC0LLRg9C10YIsINC/0L7Qu9C+0LbQuNC8IFQg0YDQsNCy0L3Ri9C8IHRoaXNBcmc7INC40L3QsNGH0LUg0L/QvtC70L7QttC40LwgVCDRgNCw0LLQvdGL0LwgdW5kZWZpbmVkLlxuXG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgVCA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgfVxuICAgICAgfSAvLyAxMC4g0J/QvtC70L7QttC40LwgbGVuVmFsdWUg0YDQsNCy0L3Ri9C8IEdldChpdGVtcywgXCJsZW5ndGhcIikuXG4gICAgICAvLyAxMS4g0J/QvtC70L7QttC40LwgbGVuINGA0LDQstC90YvQvCBUb0xlbmd0aChsZW5WYWx1ZSkuXG5cblxuICAgICAgdmFyIGxlbiA9IHRvTGVuZ3RoKGl0ZW1zLmxlbmd0aCk7IC8vIDEzLiDQldGB0LvQuCBJc0NvbnN0cnVjdG9yKEMpINGA0LDQstC10L0gdHJ1ZSwg0YLQvlxuICAgICAgLy8gMTMuIGEuINCf0L7Qu9C+0LbQuNC8IEEg0YDQsNCy0L3Ri9C8INGA0LXQt9GD0LvRjNGC0LDRgtGDINCy0YvQt9C+0LLQsCDQstC90YPRgtGA0LXQvdC90LXQs9C+INC80LXRgtC+0LTQsCBbW0NvbnN0cnVjdF1dXG4gICAgICAvLyAgICAg0L7QsdGK0LXQutGC0LAgQyDRgdC+INGB0L/QuNGB0LrQvtC8INCw0YDQs9GD0LzQtdC90YLQvtCyLCDRgdC+0LTQtdGA0LbQsNGJ0LjQvCDQtdC00LjQvdGB0YLQstC10L3QvdGL0Lkg0Y3Qu9C10LzQtdC90YIgbGVuLlxuICAgICAgLy8gMTQuIGEuINCY0L3QsNGH0LUsINC/0L7Qu9C+0LbQuNC8IEEg0YDQsNCy0L3Ri9C8IEFycmF5Q3JlYXRlKGxlbikuXG5cbiAgICAgIHZhciBBID0gaXNDYWxsYWJsZShDKSA/IE9iamVjdChuZXcgQyhsZW4pKSA6IG5ldyBBcnJheShsZW4pOyAvLyAxNi4g0J/QvtC70L7QttC40LwgayDRgNCw0LLQvdGL0LwgMC5cblxuICAgICAgdmFyIGsgPSAwOyAvLyAxNy4g0J/QvtC60LAgayA8IGxlbiwg0LHRg9C00LXQvCDQv9C+0LLRgtC+0YDRj9GC0YwuLi4gKNGI0LDQs9C4INGBIGEg0L/QviBoKVxuXG4gICAgICB2YXIga1ZhbHVlO1xuXG4gICAgICB3aGlsZSAoayA8IGxlbikge1xuICAgICAgICBrVmFsdWUgPSBpdGVtc1trXTtcblxuICAgICAgICBpZiAobWFwRm4pIHtcbiAgICAgICAgICBBW2tdID0gdHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gbWFwRm4oa1ZhbHVlLCBrKSA6IG1hcEZuLmNhbGwoVCwga1ZhbHVlLCBrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBW2tdID0ga1ZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgayArPSAxO1xuICAgICAgfSAvLyAxOC4g0J/QvtC70L7QttC40LwgcHV0U3RhdHVzINGA0LDQstC90YvQvCBQdXQoQSwgXCJsZW5ndGhcIiwgbGVuLCB0cnVlKS5cblxuXG4gICAgICBBLmxlbmd0aCA9IGxlbjsgLy8gMjAuINCS0LXRgNC90ZHQvCBBLlxuXG4gICAgICByZXR1cm4gQTtcbiAgICB9O1xuICB9KCk7XG59IC8vIEFycmF5LmZvckVhY2hcblxuXG5pZiAoJ05vZGVMaXN0JyBpbiB3aW5kb3cgJiYgIU5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoKSB7XG4gIGNvbnNvbGUuaW5mbygncG9seWZpbGwgZm9yIElFMTEnKTtcblxuICBOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIHRoaXNBcmcgPSB0aGlzQXJnIHx8IHdpbmRvdztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKTtcbiAgICB9XG4gIH07XG59IC8vIE51bWJlci5pc05hTlxuXG5cbk51bWJlci5pc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpO1xufTtcblxudmFyIGdldEZpeGVkID0gZnVuY3Rpb24gZ2V0Rml4ZWQoKSB7XG4gIHZhciBhbGwgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oYWxsKS5maWx0ZXIoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICB2YXIgYm9vbCA9IGdldENvbXB1dGVkU3R5bGUoZWxlbSkucG9zaXRpb24gPT09ICdmaXhlZCc7XG4gICAgcmV0dXJuIGJvb2w7XG4gIH0pO1xufTtcblxudmFyIGZpeGVkRWxlbWVudHMgPSBnZXRGaXhlZCgpO1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgI0xhenlzaXplXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbnZhciBpbnB1dFRlbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2pzLWlucHV0LXRlbCcpO1xudmFyIG1hc2tPcHRpb25zID0ge1xuICBtYXNrOiAnK3szOH0oMDAwKTAwMC0wMC0wMCdcbn07XG5pbnB1dFRlbEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0RWxlbWVudCkge1xuICAoMCwgX2ltYXNrW1wiZGVmYXVsdFwiXSkoaW5wdXRFbGVtZW50LCBtYXNrT3B0aW9ucyk7XG59KTtcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICNCVVJHRVJcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxudmFyIGJ1cmdlclRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXJnZXJfX3RvZ2dsZScpLFxuICAgIGJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXJnZXInKSxcbiAgICBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZS1oZWFkZXInKSxcbiAgICBtb2JCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZS1oZWFkZXJfX21vYi1ncm91cCcpLFxuICAgIHNjcm9sbFdpZHRoID0gc2NyZWVuLndpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgIGNsb3NlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UtaGVhZGVyX19jbG9zZS1idG4nKTtcblxudmFyIGFkZFNjcm9sbCA9IGZ1bmN0aW9uIGFkZFNjcm9sbCgpIHtcbiAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdzY3JvbGwtb2ZmJyk7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gIGZpeGVkRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xuICAgIGVsZW0uc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gIH0pO1xufTtcblxudmFyIHN0b3BlZFNjcm9sbCA9IGZ1bmN0aW9uIHN0b3BlZFNjcm9sbCgpIHtcbiAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdzY3JvbGwtb2ZmJyk7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoc2Nyb2xsV2lkdGgsIFwicHhcIik7XG4gIGZpeGVkRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xuICAgIGVsZW0uc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoc2Nyb2xsV2lkdGgsIFwicHhcIik7XG4gIH0pO1xufTtcblxuYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgaGVhZGVyLmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcbiAgc3RvcGVkU2Nyb2xsKCk7XG59KTtcbm1vYkJhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnQScgfHwgZS50YXJnZXQuY2xvc2VzdCgnLnBhZ2UtaGVhZGVyX19jbG9zZS1idG4nKSkge1xuICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCcucGFnZS1oZWFkZXJfX2Nsb3NlLWJ0bicpKSB7XG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtdmlzaWJsZScpO1xuICAgICAgYWRkU2Nyb2xsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRTY3JvbGwoKTtcbiAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfVxuICB9XG59KTtcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICNUQUJcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0LWRlc2NfX3RpdGxlLXdyYXAnKSkge1xuICB2YXIgdGh1bWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdC1kZXNjX190aXRsZS13cmFwJyksXG4gICAgICBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2R1Y3QtZGVzY19fdHh0Jyk7XG5cbiAgdmFyIHRhYiA9IGZ1bmN0aW9uIHRhYigpIHtcbiAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDw9IDYwMCkge1xuICAgICAgdGh1bWIuZGF0YXNldC50YWIgPSB0cnVlO1xuICAgICAgdGh1bWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVUYWIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdG9nZ2xlVGFiID0gZnVuY3Rpb24gdG9nZ2xlVGFiKCkge1xuICAgIHRodW1iLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScpO1xuICAgIGNvbnRlbnQuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScpO1xuICB9O1xuXG4gIHRhYigpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIXRodW1iLmRhdGFzZXQudGFiKSB7XG4gICAgICB0YWIoKTtcbiAgICB9IGVsc2UgaWYgKHRodW1iLmRhdGFzZXQudGFiICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA+PSA2MDApIHtcbiAgICAgIHRodW1iLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10YWInKTtcbiAgICAgIHRodW1iLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgICAgdGh1bWIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVUYWIpO1xuICAgICAgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XG4gICAgfVxuICB9KTtcbn1cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICNNT0RBTCBXSU5ET1dcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG57XG4gIHZhciBtb2RhbEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNtb2RhbC1idG4nKSxcbiAgICAgIF9jbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbF9fY2xvc2UtYnRuJyksXG4gICAgICBtb2RhbE92ZXJsYXk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2Nyb2xsV2lkdGggPSBzY3JlZW4ud2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH0pO1xuICBtb2RhbEJ0bi5mb3JFYWNoKGZ1bmN0aW9uIChvcGVuQnRuKSB7XG4gICAgb3BlbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzdG9wZWRTY3JvbGwoKTtcbiAgICAgIHZhciBvdmVybGF5ID0gb3BlbkJ0bi5kYXRhc2V0Lm1vZGFsO1xuICAgICAgbW9kYWxPdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJcIi5jb25jYXQob3ZlcmxheSkpO1xuICAgICAgbW9kYWxPdmVybGF5LmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgX2Nsb3NlQnRuLmZvckVhY2goZnVuY3Rpb24gKGJ0bikge1xuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBhZGRTY3JvbGwoKTtcbiAgICAgIG1vZGFsT3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgICBtb2RhbE92ZXJsYXkgPSBudWxsO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICNTV0lQRVJcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8vIGluaXQgU3dpcGVyOlxuXG52YXIgdGh1bWJzID0gbmV3IFN3aXBlcignLnNsaWRlci10aHVtYnMnLCB7XG4gIHNwYWNlQmV0d2VlbjogMTAsXG4gIHNsaWRlc1BlclZpZXc6IDQsXG4gIGJyZWFrcG9pbnRzOiB7XG4gICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gMzIwcHhcbiAgICA5MDA6IHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDUsXG4gICAgICBzcGFjZUJldHdlZW46IDI1XG4gICAgfVxuICB9LFxuICBmcmVlTW9kZTogdHJ1ZSxcbiAgbG9vcGVkU2xpZGVzOiA1LFxuICAvL2xvb3BlZCBzbGlkZXMgc2hvdWxkIGJlIHRoZSBzYW1lXG4gIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogdHJ1ZSxcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZVxufSk7XG52YXIgc2xpZGVyVG9wID0gbmV3IFN3aXBlcignLnNsaWRlci10b3AnLCB7XG4gIHNwYWNlQmV0d2VlbjogMTAsXG4gIGxvb3A6IHRydWUsXG4gIGxvb3BlZFNsaWRlczogNSxcbiAgLy9sb29wZWQgc2xpZGVzIHNob3VsZCBiZSB0aGUgc2FtZVxuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dDEnLFxuICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYxJ1xuICB9LFxuICB0aHVtYnM6IHtcbiAgICBzd2lwZXI6IHRodW1ic1xuICB9XG59KTtcbnZhciB0aHVtYnMyID0gbmV3IFN3aXBlcignLnNsaWRlci10aHVtYnMyJywge1xuICBzcGFjZUJldHdlZW46IDEwLFxuICBzbGlkZXNQZXJWaWV3OiA0LFxuICAvLyBsb29wOiB0cnVlLFxuICBicmVha3BvaW50czoge1xuICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDMyMHB4XG4gICAgOTAwOiB7XG4gICAgICBzbGlkZXNQZXJWaWV3OiA3IC8vIHNwYWNlQmV0d2VlbjogMjVcblxuICAgIH1cbiAgfSxcbiAgZnJlZU1vZGU6IHRydWUsXG4gIGxvb3BlZFNsaWRlczogNSxcbiAgLy9sb29wZWQgc2xpZGVzIHNob3VsZCBiZSB0aGUgc2FtZVxuICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWVcbn0pO1xudmFyIHNsaWRlclRvcDIgPSBuZXcgU3dpcGVyKCcuc2xpZGVyLXRvcDInLCB7XG4gIHNwYWNlQmV0d2VlbjogMTAsXG4gIGxvb3A6IHRydWUsXG4gIGxvb3BlZFNsaWRlczogNSxcbiAgLy9sb29wZWQgc2xpZGVzIHNob3VsZCBiZSB0aGUgc2FtZVxuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dDInLFxuICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYyJ1xuICB9LFxuICB0aHVtYnM6IHtcbiAgICBzd2lwZXI6IHRodW1iczJcbiAgfVxufSk7XG52YXIgc2xpZGVyUmV2aWV3cyA9IG5ldyBTd2lwZXIoJy5yZXZpZXdzLXN3aXBlci1jb250YWluZXInLCB7XG4gIHNwYWNlQmV0d2VlbjogMzAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxuICBsb29wOiB0cnVlLFxuICBicmVha3BvaW50czoge1xuICAgIDEyMDA6IHtcbiAgICAgIHNwYWNlQmV0d2VlbjogMzAsXG4gICAgICBzbGlkZXNQZXJWaWV3OiAzLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDMsXG4gICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICBsb29wOiBmYWxzZVxuICAgIH0sXG4gICAgMTEwMDoge1xuICAgICAgc3BhY2VCZXR3ZWVuOiA1LFxuICAgICAgc2xpZGVzUGVyVmlldzogMyxcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAzLFxuICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgbG9vcDogZmFsc2VcbiAgICB9LFxuICAgIDgwMDoge1xuICAgICAgc3BhY2VCZXR3ZWVuOiAxMCxcbiAgICAgIHNsaWRlc1BlclZpZXc6IDIsXG4gICAgICBzbGlkZXNQZXJHcm91cDogMixcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgIGxvb3A6IGZhbHNlXG4gICAgfVxuICB9LFxuICBwYWdpbmF0aW9uOiB7XG4gICAgZWw6ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxuICAgIGNsaWNrYWJsZTogdHJ1ZVxuICB9LFxuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dDMnLFxuICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYzJ1xuICB9XG59KTtcblxufSx7XCJpbWFza1wiOjEsXCJsYXp5c2l6ZXNcIjoyLFwibGF6eXNpemVzL3BsdWdpbnMvcGFyZW50LWZpdC9scy5wYXJlbnQtZml0XCI6M31dfSx7fSxbNF0pO1xuIl19
